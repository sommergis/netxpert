/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGRUBY


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#include <ruby.h>

/* Ruby 1.9.1 has a "memoisation optimisation" when compiling with GCC which
 * breaks using rb_intern as an lvalue, as SWIG does.  We work around this
 * issue for now by disabling this.
 * https://sourceforge.net/tracker/?func=detail&aid=2859614&group_id=1645&atid=101645
 */
#ifdef rb_intern
# undef rb_intern
#endif

/* Remove global macros defined in Ruby's win32.h */
#ifdef write
# undef write
#endif
#ifdef read
# undef read
#endif
#ifdef bind
# undef bind
#endif
#ifdef close
# undef close
#endif
#ifdef connect
# undef connect
#endif


/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/* RSTRING_LEN, etc are new in Ruby 1.9, but ->ptr and ->len no longer work */
/* Define these for older versions so we can just write code the new way */
#ifndef RSTRING_LEN
# define RSTRING_LEN(x) RSTRING(x)->len
#endif
#ifndef RSTRING_PTR
# define RSTRING_PTR(x) RSTRING(x)->ptr
#endif
#ifndef RSTRING_END
# define RSTRING_END(x) (RSTRING_PTR(x) + RSTRING_LEN(x))
#endif
#ifndef RARRAY_LEN
# define RARRAY_LEN(x) RARRAY(x)->len
#endif
#ifndef RARRAY_PTR
# define RARRAY_PTR(x) RARRAY(x)->ptr
#endif
#ifndef RFLOAT_VALUE
# define RFLOAT_VALUE(x) RFLOAT(x)->value
#endif
#ifndef DOUBLE2NUM
# define DOUBLE2NUM(x) rb_float_new(x)
#endif
#ifndef RHASH_TBL
# define RHASH_TBL(x) (RHASH(x)->tbl)
#endif
#ifndef RHASH_ITER_LEV
# define RHASH_ITER_LEV(x) (RHASH(x)->iter_lev)
#endif
#ifndef RHASH_IFNONE
# define RHASH_IFNONE(x) (RHASH(x)->ifnone)
#endif
#ifndef RHASH_SIZE
# define RHASH_SIZE(x) (RHASH(x)->tbl->num_entries)
#endif
#ifndef RHASH_EMPTY_P
# define RHASH_EMPTY_P(x) (RHASH_SIZE(x) == 0)
#endif
#ifndef RSTRUCT_LEN
# define RSTRUCT_LEN(x) RSTRUCT(x)->len
#endif
#ifndef RSTRUCT_PTR
# define RSTRUCT_PTR(x) RSTRUCT(x)->ptr
#endif



/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING_PTR(RB_STRING_VALUE(s))
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING_LEN(RB_STRING_VALUE(s))
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

static VALUE _mSWIG = Qnil;

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */


/* Define some additional error types */
#define SWIG_ObjectPreviouslyDeletedError  -100


/* Define custom exceptions for errors that do not map to existing Ruby
   exceptions.  Note this only works for C++ since a global cannot be
   initialized by a function in C.  For C, fallback to rb_eRuntimeError.*/

SWIGINTERN VALUE 
getNullReferenceError(void) {
  static int init = 0;
  static VALUE rb_eNullReferenceError ;
  if (!init) {
    init = 1;
    rb_eNullReferenceError = rb_define_class("NullReferenceError", rb_eRuntimeError);
  }
  return rb_eNullReferenceError;
} 

SWIGINTERN VALUE 
getObjectPreviouslyDeletedError(void) {
  static int init = 0;
  static VALUE rb_eObjectPreviouslyDeleted ;
  if (!init) {
    init = 1;
    rb_eObjectPreviouslyDeleted = rb_define_class("ObjectPreviouslyDeleted", rb_eRuntimeError);
  }
  return rb_eObjectPreviouslyDeleted;
} 


SWIGINTERN VALUE
SWIG_Ruby_ErrorType(int SWIG_code) {
  VALUE type;
  switch (SWIG_code) {
  case SWIG_MemoryError:
    type = rb_eNoMemError;
    break;
  case SWIG_IOError:
    type = rb_eIOError;
    break;
  case SWIG_RuntimeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_IndexError:
    type = rb_eIndexError;
    break;
  case SWIG_TypeError:
    type = rb_eTypeError;
    break;
  case SWIG_DivisionByZero:
    type = rb_eZeroDivError;
    break;
  case SWIG_OverflowError:
    type = rb_eRangeError;
    break;
  case SWIG_SyntaxError:
    type = rb_eSyntaxError;
    break;
  case SWIG_ValueError:
    type = rb_eArgError;
    break;
  case SWIG_SystemError:
    type = rb_eFatal;
    break;
  case SWIG_AttributeError:
    type = rb_eRuntimeError;
    break;
  case SWIG_NullReferenceError:
    type = getNullReferenceError();
    break;
  case SWIG_ObjectPreviouslyDeletedError:
    type = getObjectPreviouslyDeletedError();
    break;
  case SWIG_UnknownError:
    type = rb_eRuntimeError;
    break;
  default:
    type = rb_eRuntimeError;
  }
  return type;
}


/* This function is called when a user inputs a wrong argument to
   a method.
 */
SWIGINTERN 
const char* Ruby_Format_TypeError( const char* msg,
				   const char* type, 
				   const char* name, 
				   const int argn,
				   VALUE input )
{
  char buf[128];
  VALUE str;
  VALUE asStr;
  if ( msg && *msg )
    {
      str = rb_str_new2(msg);
    }
  else
    {
      str = rb_str_new(NULL, 0);
    }

  str = rb_str_cat2( str, "Expected argument " );
  sprintf( buf, "%d of type ", argn-1 );
  str = rb_str_cat2( str, buf );
  str = rb_str_cat2( str, type );
  str = rb_str_cat2( str, ", but got " );
  str = rb_str_cat2( str, rb_obj_classname(input) );
  str = rb_str_cat2( str, " " );
  asStr = rb_inspect(input);
  if ( RSTRING_LEN(asStr) > 30 )
    {
      str = rb_str_cat( str, StringValuePtr(asStr), 30 );
      str = rb_str_cat2( str, "..." );
    }
  else
    {
      str = rb_str_append( str, asStr );
    }

  if ( name )
    {
      str = rb_str_cat2( str, "\n\tin SWIG method '" );
      str = rb_str_cat2( str, name );
      str = rb_str_cat2( str, "'" );
    }

  return StringValuePtr( str );
}

/* This function is called when an overloaded method fails */
SWIGINTERN 
void Ruby_Format_OverloadedError(
				 const int argc,
				 const int maxargs,
				 const char* method, 
				 const char* prototypes 
				 )
{
  const char* msg = "Wrong # of arguments";
  if ( argc <= maxargs ) msg = "Wrong arguments";
  rb_raise(rb_eArgError,"%s for overloaded method '%s'.\n"  
	   "Possible C/C++ prototypes are:\n%s",
	   msg, method, prototypes);
}

/* -----------------------------------------------------------------------------
 * rubytracking.swg
 *
 * This file contains support for tracking mappings from 
 * Ruby objects to C++ objects.  This functionality is needed
 * to implement mark functions for Ruby's mark and sweep
 * garbage collector.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* Ruby 1.8 actually assumes the first case. */
#if SIZEOF_VOIDP == SIZEOF_LONG
#  define SWIG2NUM(v) LONG2NUM((unsigned long)v)
#  define NUM2SWIG(x) (unsigned long)NUM2LONG(x)
#elif SIZEOF_VOIDP == SIZEOF_LONG_LONG
#  define SWIG2NUM(v) LL2NUM((unsigned long long)v)
#  define NUM2SWIG(x) (unsigned long long)NUM2LL(x)
#else
#  error sizeof(void*) is not the same as long or long long
#endif


/* Global Ruby hash table to store Trackings from C/C++
   structs to Ruby Objects. 
*/
static VALUE swig_ruby_trackings = Qnil;

/* Global variable that stores a reference to the ruby
   hash table delete function. */
static ID swig_ruby_hash_delete;

/* Setup a Ruby hash table to store Trackings */
SWIGRUNTIME void SWIG_RubyInitializeTrackings(void) {
  /* Create a ruby hash table to store Trackings from C++ 
     objects to Ruby objects. */

  /* Try to see if some other .so has already created a 
     tracking hash table, which we keep hidden in an instance var
     in the SWIG module.
     This is done to allow multiple DSOs to share the same
     tracking table.
  */
  ID trackings_id = rb_intern( "@__trackings__" );
  VALUE verbose = rb_gv_get("VERBOSE");
  rb_gv_set("VERBOSE", Qfalse);
  swig_ruby_trackings = rb_ivar_get( _mSWIG, trackings_id );
  rb_gv_set("VERBOSE", verbose);

  /* No, it hasn't.  Create one ourselves */ 
  if ( swig_ruby_trackings == Qnil )
    {
      swig_ruby_trackings = rb_hash_new();
      rb_ivar_set( _mSWIG, trackings_id, swig_ruby_trackings );
    }

  /* Now store a reference to the hash table delete function
     so that we only have to look it up once.*/
  swig_ruby_hash_delete = rb_intern("delete");
}

/* Get a Ruby number to reference a pointer */
SWIGRUNTIME VALUE SWIG_RubyPtrToReference(void* ptr) {
  /* We cast the pointer to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the pointer to a Ruby number */
  return SWIG2NUM(ptr);
}

/* Get a Ruby number to reference an object */
SWIGRUNTIME VALUE SWIG_RubyObjectToReference(VALUE object) {
  /* We cast the object to an unsigned long
     and then store a reference to it using
     a Ruby number object. */

  /* Convert the Object to a Ruby number */
  return SWIG2NUM(object);
}

/* Get a Ruby object from a previously stored reference */
SWIGRUNTIME VALUE SWIG_RubyReferenceToObject(VALUE reference) {
  /* The provided Ruby number object is a reference
     to the Ruby object we want.*/

  /* Convert the Ruby number to a Ruby object */
  return NUM2SWIG(reference);
}

/* Add a Tracking from a C/C++ struct to a Ruby object */
SWIGRUNTIME void SWIG_RubyAddTracking(void* ptr, VALUE object) {
  /* In a Ruby hash table we store the pointer and
     the associated Ruby object.  The trick here is
     that we cannot store the Ruby object directly - if
     we do then it cannot be garbage collected.  So
     instead we typecast it as a unsigned long and
     convert it to a Ruby number object.*/

  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Get a reference to the Ruby object as a Ruby number */
  VALUE value = SWIG_RubyObjectToReference(object);

  /* Store the mapping to the global hash table. */
  rb_hash_aset(swig_ruby_trackings, key, value);
}

/* Get the Ruby object that owns the specified C/C++ struct */
SWIGRUNTIME VALUE SWIG_RubyInstanceFor(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Now lookup the value stored in the global hash table */
  VALUE value = rb_hash_aref(swig_ruby_trackings, key);
	
  if (value == Qnil) {
    /* No object exists - return nil. */
    return Qnil;
  }
  else {
    /* Convert this value to Ruby object */
    return SWIG_RubyReferenceToObject(value);
  }
}

/* Remove a Tracking from a C/C++ struct to a Ruby object.  It
   is very important to remove objects once they are destroyed
   since the same memory address may be reused later to create
   a new object. */
SWIGRUNTIME void SWIG_RubyRemoveTracking(void* ptr) {
  /* Get a reference to the pointer as a Ruby number */
  VALUE key = SWIG_RubyPtrToReference(ptr);

  /* Delete the object from the hash table by calling Ruby's
     do this we need to call the Hash.delete method.*/
  rb_funcall(swig_ruby_trackings, swig_ruby_hash_delete, 1, key);
}

/* This is a helper method that unlinks a Ruby object from its
   underlying C++ object.  This is needed if the lifetime of the
   Ruby object is longer than the C++ object */
SWIGRUNTIME void SWIG_RubyUnlinkObjects(void* ptr) {
  VALUE object = SWIG_RubyInstanceFor(ptr);

  if (object != Qnil) {
    DATA_PTR(object) = 0;
  }
}


#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Ruby API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN VALUE
SWIG_Ruby_AppendOutput(VALUE target, VALUE o) {
  if (NIL_P(target)) {
    target = o;
  } else {
    if (TYPE(target) != T_ARRAY) {
      VALUE o2 = target;
      target = rb_ary_new();
      rb_ary_push(target, o2);
    }
    rb_ary_push(target, o);
  }
  return target;
}

/* For ruby1.8.4 and earlier. */
#ifndef RUBY_INIT_STACK
   RUBY_EXTERN void Init_stack(VALUE* addr);
#  define RUBY_INIT_STACK \
   VALUE variable_in_this_stack_frame; \
   Init_stack(&variable_in_this_stack_frame);
#endif


#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * rubyrun.swg
 *
 * This file contains the runtime support for Ruby modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Ruby_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Ruby_NewPointerObj(ptr, type, flags)
#define SWIG_AcquirePtr(ptr, own)                       SWIG_Ruby_AcquirePtr(ptr, own)
#define swig_owntype                                    ruby_owntype

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Ruby_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Ruby_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) 		SWIG_Ruby_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Ruby_ErrorType(code)               
#define SWIG_Error(code, msg)            		rb_raise(SWIG_Ruby_ErrorType(code), "%s", msg)
#define SWIG_fail                        		goto fail				 


/* Ruby-specific SWIG API */

#define SWIG_InitRuntime()                              SWIG_Ruby_InitRuntime()              
#define SWIG_define_class(ty)                        	SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty)             	SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value)                        	SWIG_Ruby_MangleStr(value)		  
#define SWIG_CheckConvert(value, ty)                 	SWIG_Ruby_CheckConvert(value, ty)	  

#include "assert.h"

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
  int trackObjects;
} swig_class;


/* Global pointer used to keep some internal SWIG stuff */
static VALUE _cSWIG_Pointer = Qnil;
static VALUE swig_runtime_data_type_pointer = Qnil;

/* Global IDs used to keep some internal SWIG stuff */
static ID swig_arity_id = 0;
static ID swig_call_id  = 0;

/*
  If your swig extension is to be run within an embedded ruby and has
  director callbacks, you should set -DRUBY_EMBEDDED during compilation.  
  This will reset ruby's stack frame on each entry point from the main 
  program the first time a virtual director function is invoked (in a 
  non-recursive way).
  If this is not done, you run the risk of Ruby trashing the stack.
*/

#ifdef RUBY_EMBEDDED

#  define SWIG_INIT_STACK                            \
      if ( !swig_virtual_calls ) { RUBY_INIT_STACK } \
      ++swig_virtual_calls;
#  define SWIG_RELEASE_STACK --swig_virtual_calls;
#  define Ruby_DirectorTypeMismatchException(x) \
          rb_raise( rb_eTypeError, "%s", x ); return c_result;

      static unsigned int swig_virtual_calls = 0;

#else  /* normal non-embedded extension */

#  define SWIG_INIT_STACK
#  define SWIG_RELEASE_STACK
#  define Ruby_DirectorTypeMismatchException(x) \
          throw Swig::DirectorTypeMismatchException( x );

#endif  /* RUBY_EMBEDDED */


SWIGRUNTIME VALUE 
getExceptionClass(void) {
  static int init = 0;
  static VALUE rubyExceptionClass ;
  if (!init) {
    init = 1;
    rubyExceptionClass = rb_const_get(_mSWIG, rb_intern("Exception"));
  }
  return rubyExceptionClass;
} 

/* This code checks to see if the Ruby object being raised as part
   of an exception inherits from the Ruby class Exception.  If so,
   the object is simply returned.  If not, then a new Ruby exception
   object is created and that will be returned to Ruby.*/
SWIGRUNTIME VALUE
SWIG_Ruby_ExceptionType(swig_type_info *desc, VALUE obj) {
  VALUE exceptionClass = getExceptionClass();
  if (rb_obj_is_kind_of(obj, exceptionClass)) {
    return obj;
  }  else {
    return rb_exc_new3(rb_eRuntimeError, rb_obj_as_string(obj));
  }
}

/* Initialize Ruby runtime support */
SWIGRUNTIME void
SWIG_Ruby_InitRuntime(void)
{
  if (_mSWIG == Qnil) {
    _mSWIG = rb_define_module("SWIG");
    swig_call_id  = rb_intern("call");
    swig_arity_id = rb_intern("arity");
  }
}

/* Define Ruby class for C type */
SWIGRUNTIME void
SWIG_Ruby_define_class(swig_type_info *type)
{
  VALUE klass;
  char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
  sprintf(klass_name, "TYPE%s", type->name);
  if (NIL_P(_cSWIG_Pointer)) {
    _cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
    rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
  }
  klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
  free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME VALUE
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int flags)
{
  int own =  flags & SWIG_POINTER_OWN; 
  int track;
  char *klass_name;
  swig_class *sklass;
  VALUE klass;
  VALUE obj;
  
  if (!ptr)
    return Qnil;
  
  if (type->clientdata) {
    sklass = (swig_class *) type->clientdata;
		
    /* Are we tracking this class and have we already returned this Ruby object? */
    track = sklass->trackObjects;
    if (track) {
      obj = SWIG_RubyInstanceFor(ptr);
      
      /* Check the object's type and make sure it has the correct type.
        It might not in cases where methods do things like 
        downcast methods. */
      if (obj != Qnil) {
        VALUE value = rb_iv_get(obj, "@__swigtype__");
        const char* type_name = RSTRING_PTR(value);
				
        if (strcmp(type->name, type_name) == 0) {
          return obj;
        }
      }
    }

    /* Create a new Ruby object */
    obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), 
			   ( own ? VOIDFUNC(sklass->destroy) : 
			     (track ? VOIDFUNC(SWIG_RubyRemoveTracking) : 0 )
			     ), ptr);

    /* If tracking is on for this class then track this object. */
    if (track) {
      SWIG_RubyAddTracking(ptr, obj);
    }
  } else {
    klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    klass = rb_const_get(_mSWIG, rb_intern(klass_name));
    free((void *) klass_name);
    obj = Data_Wrap_Struct(klass, 0, 0, ptr);
  }
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  
  return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME VALUE
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
  VALUE obj;
  swig_class *sklass = (swig_class *) type->clientdata;
  obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
  rb_iv_set(obj, "@__swigtype__", rb_str_new2(type->name));
  return obj;
}

/* Get type mangle from class name */
SWIGRUNTIMEINLINE char *
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "@__swigtype__");
  return StringValuePtr(stype);
}

/* Acquire a pointer value */
typedef void (*ruby_owntype)(void*);

SWIGRUNTIME ruby_owntype
SWIG_Ruby_AcquirePtr(VALUE obj, ruby_owntype own) {
  if (obj) {
    ruby_owntype oldown = RDATA(obj)->dfree;
    RDATA(obj)->dfree = own;
    return oldown;
  } else {
    return 0;
  }
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPtrAndOwn(VALUE obj, void **ptr, swig_type_info *ty, int flags, ruby_owntype *own)
{
  char *c;
  swig_cast_info *tc;
  void *vptr = 0;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return SWIG_OK;
  } else {
    if (TYPE(obj) != T_DATA) {
      return SWIG_ERROR;
    }
    Data_Get_Struct(obj, void, vptr);
  }
  
  if (own) *own = RDATA(obj)->dfree;
    
  /* Check to see if the input object is giving up ownership
     of the underlying C struct or C++ object.  If so then we
     need to reset the destructor since the Ruby object no 
     longer owns the underlying C++ object.*/ 
  if (flags & SWIG_POINTER_DISOWN) {
    /* Is tracking on for this class? */
    int track = 0;
    if (ty && ty->clientdata) {
      swig_class *sklass = (swig_class *) ty->clientdata;
      track = sklass->trackObjects;
    }
		
    if (track) {
      /* We are tracking objects for this class.  Thus we change the destructor
       * to SWIG_RubyRemoveTracking.  This allows us to
       * remove the mapping from the C++ to Ruby object
       * when the Ruby object is garbage collected.  If we don't
       * do this, then it is possible we will return a reference 
       * to a Ruby object that no longer exists thereby crashing Ruby. */
      RDATA(obj)->dfree = SWIG_RubyRemoveTracking;
    } else {    
      RDATA(obj)->dfree = 0;
    }
  }

  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
      if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
        if (vptr == 0) {
          /* The object has already been deleted */
          return SWIG_ObjectPreviouslyDeletedError;
        }
        *ptr = vptr;
        return SWIG_OK;
      }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      return SWIG_ERROR;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      return SWIG_ERROR;
    } else {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc, vptr, &newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
    *ptr = vptr;
  }
  
  return SWIG_OK;
}

/* Check convert */
SWIGRUNTIMEINLINE int
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c) return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME VALUE
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:
  return SWIG_ERROR;
}

SWIGRUNTIME swig_module_info *
SWIG_Ruby_GetModule(void *SWIGUNUSEDPARM(clientdata))
{
  VALUE pointer;
  swig_module_info *ret = 0;
  VALUE verbose = rb_gv_get("VERBOSE");

 /* temporarily disable warnings, since the pointer check causes warnings with 'ruby -w' */
  rb_gv_set("VERBOSE", Qfalse);
  
  /* first check if pointer already created */
  pointer = rb_gv_get("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  if (pointer != Qnil) {
    Data_Get_Struct(pointer, swig_module_info, ret);
  }

  /* reinstate warnings */
  rb_gv_set("VERBOSE", verbose);
  return ret;
}

SWIGRUNTIME void 
SWIG_Ruby_SetModule(swig_module_info *pointer)
{
  /* register a new class */
  VALUE cl = rb_define_class("swig_runtime_data", rb_cObject);
  /* create and store the structure pointer to a global variable */
  swig_runtime_data_type_pointer = Data_Wrap_Struct(cl, 0, 0, pointer);
  rb_define_readonly_variable("$swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, &swig_runtime_data_type_pointer);
}

/* This function can be used to check whether a proc or method or similarly
   callable function has been passed.  Usually used in a %typecheck, like:

   %typecheck(c_callback_t, precedence=SWIG_TYPECHECK_POINTER) {
        $result = SWIG_Ruby_isCallable( $input );
   }
 */
SWIGINTERN
int SWIG_Ruby_isCallable( VALUE proc )
{
  if ( rb_respond_to( proc, swig_call_id ) )
    return 1;
  return 0;
}

/* This function can be used to check the arity (number of arguments)
   a proc or method can take.  Usually used in a %typecheck.
   Valid arities will be that equal to minimal or those < 0
   which indicate a variable number of parameters at the end.
 */
SWIGINTERN
int SWIG_Ruby_arity( VALUE proc, int minimal )
{
  if ( rb_respond_to( proc, swig_arity_id ) )
    {
      VALUE num = rb_funcall( proc, swig_arity_id, 0 );
      int arity = NUM2INT(num);
      if ( arity < 0 && (arity+1) < -minimal ) return 1;
      if ( arity == minimal ) return 1;
      return 1;
    }
  return 0;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg);; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Coordinate swig_types[0]
#define SWIGTYPE_p_allocator_type swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_difference_type swig_types[3]
#define SWIGTYPE_p_netxpert__ColumnMap swig_types[4]
#define SWIGTYPE_p_netxpert__Config swig_types[5]
#define SWIGTYPE_p_netxpert__DBHELPER swig_types[6]
#define SWIGTYPE_p_netxpert__ExtDistributionArc swig_types[7]
#define SWIGTYPE_p_netxpert__ExtNodeSupply swig_types[8]
#define SWIGTYPE_p_netxpert__ExtSPTreeArc swig_types[9]
#define SWIGTYPE_p_netxpert__ExtTransportationData swig_types[10]
#define SWIGTYPE_p_netxpert__ExternalArc swig_types[11]
#define SWIGTYPE_p_netxpert__FlowCost swig_types[12]
#define SWIGTYPE_p_netxpert__ISolver swig_types[13]
#define SWIGTYPE_p_netxpert__InputArc swig_types[14]
#define SWIGTYPE_p_netxpert__InputNode swig_types[15]
#define SWIGTYPE_p_netxpert__InternalArc swig_types[16]
#define SWIGTYPE_p_netxpert__LOGGER swig_types[17]
#define SWIGTYPE_p_netxpert__MinCostFlow swig_types[18]
#define SWIGTYPE_p_netxpert__MinimumSpanningTree swig_types[19]
#define SWIGTYPE_p_netxpert__Network swig_types[20]
#define SWIGTYPE_p_netxpert__NewNode swig_types[21]
#define SWIGTYPE_p_netxpert__ODPair swig_types[22]
#define SWIGTYPE_p_netxpert__OriginDestinationMatrix swig_types[23]
#define SWIGTYPE_p_netxpert__ShortestPathTree swig_types[24]
#define SWIGTYPE_p_netxpert__Transportation swig_types[25]
#define SWIGTYPE_p_netxpert__simple__MinimumSpanningTree swig_types[26]
#define SWIGTYPE_p_netxpert__simple__OriginDestinationMatrix swig_types[27]
#define SWIGTYPE_p_netxpert__simple__ShortestPathTree swig_types[28]
#define SWIGTYPE_p_netxpert__simple__Transportation swig_types[29]
#define SWIGTYPE_p_p_void swig_types[30]
#define SWIGTYPE_p_size_type swig_types[31]
#define SWIGTYPE_p_std__allocatorT_netxpert__ExtDistributionArc_t swig_types[32]
#define SWIGTYPE_p_std__allocatorT_netxpert__ExtNodeSupply_t swig_types[33]
#define SWIGTYPE_p_std__allocatorT_netxpert__ExtSPTreeArc_t swig_types[34]
#define SWIGTYPE_p_std__allocatorT_netxpert__InputArc_t swig_types[35]
#define SWIGTYPE_p_std__allocatorT_netxpert__InputNode_t swig_types[36]
#define SWIGTYPE_p_std__allocatorT_netxpert__NewNode_t swig_types[37]
#define SWIGTYPE_p_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t swig_types[38]
#define SWIGTYPE_p_std__string swig_types[39]
#define SWIGTYPE_p_std__unordered_mapT_netxpert__ODPair_double_t swig_types[40]
#define SWIGTYPE_p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t swig_types[42]
#define SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t swig_types[43]
#define SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t swig_types[44]
#define SWIGTYPE_p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t swig_types[45]
#define SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t swig_types[46]
#define SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t swig_types[47]
#define SWIGTYPE_p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t swig_types[48]
#define SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t swig_types[49]
#define SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t swig_types[50]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[51]
#define SWIGTYPE_p_string swig_types[52]
#define SWIGTYPE_p_swig__ConstIterator swig_types[53]
#define SWIGTYPE_p_swig__GC_VALUE swig_types[54]
#define SWIGTYPE_p_swig__Iterator swig_types[55]
#define SWIGTYPE_p_value_type swig_types[56]
#define SWIGTYPE_p_void swig_types[57]
static swig_type_info *swig_types[59];
static swig_module_info swig_module = {swig_types, 58, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_rbnetxpert
#define SWIG_name    "Rbnetxpert"

static VALUE mRbnetxpert;

#define SWIG_RUBY_THREAD_BEGIN_BLOCK
#define SWIG_RUBY_THREAD_END_BLOCK


#define SWIGVERSION 0x020011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C" {
#endif

// Ruby 1.9 changed the file name of this header
#ifdef HAVE_RUBY_IO_H
#include "ruby/io.h"
#else
#include "rubyio.h"
#endif

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
#ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
struct timeval rb_time_timeval(VALUE);
#endif
#ifdef __cplusplus
}
#endif


#include <string>


namespace swig {
  class SwigGCReferences {
    // Hash of all GC_VALUE's currently in use
    static SwigGCReferences s_references;

    VALUE _hash;

    SwigGCReferences() : _hash(Qnil) {
    }
    ~SwigGCReferences() {
      if (_hash != Qnil)
        rb_gc_unregister_address(&_hash);
    }
    static void EndProcHandler(VALUE) {
      // Ruby interpreter ending - _hash can no longer be accessed.
      s_references._hash = Qnil;
    }
  public:
    static SwigGCReferences& instance() {
      return s_references;
    }
    static void initialize() {
      if (s_references._hash == Qnil) {
        rb_set_end_proc(&EndProcHandler, Qnil);
        s_references._hash = rb_hash_new();
        rb_gc_register_address(&s_references._hash);
      }
    }
    void GC_register(VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(_hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 0;
        ++n;
        rb_hash_aset(_hash, obj, INT2NUM(n));
      }
    }
    void GC_unregister(const VALUE& obj) {
      if (FIXNUM_P(obj) || SPECIAL_CONST_P(obj) || SYMBOL_P(obj))
        return;
      // this test should not be needed but I've noticed some very erratic
      // behavior of none being unregistered in some very rare situations.
      if (BUILTIN_TYPE(obj) == T_NONE)
        return;
      if (_hash != Qnil) {
        VALUE val = rb_hash_aref(s_references._hash, obj);
        unsigned n = FIXNUM_P(val) ? NUM2UINT(val) : 1;
        --n;
        if (n)
          rb_hash_aset(s_references._hash, obj, INT2NUM(n));
        else
          rb_hash_delete(s_references._hash, obj);
      }
    }
  };

  class GC_VALUE {
  protected:
    VALUE  _obj;

    static ID hash_id;
    static ID   lt_id;
    static ID   gt_id;
    static ID   eq_id;
    static ID   le_id;
    static ID   ge_id;

    static ID  pos_id;
    static ID  neg_id;
    static ID  inv_id;

    static ID  add_id;
    static ID  sub_id;
    static ID  mul_id;
    static ID  div_id;
    static ID  mod_id;

    static ID  and_id;
    static ID   or_id;
    static ID  xor_id;

    static ID  lshift_id;
    static ID  rshift_id;

    struct OpArgs
    {
      VALUE src;
      ID    id;
      int   nargs;
      VALUE target;
    };


  public:
    GC_VALUE() : _obj(Qnil)
    {
    }

    GC_VALUE(const GC_VALUE& item) : _obj(item._obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    GC_VALUE(VALUE obj) :_obj(obj)
    {
      SwigGCReferences::instance().GC_register(_obj);
    }
    
    ~GC_VALUE() 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
    }
    
    GC_VALUE & operator=(const GC_VALUE& item) 
    {
      SwigGCReferences::instance().GC_unregister(_obj);
      _obj = item._obj;
      SwigGCReferences::instance().GC_register(_obj);
      return *this;
    }

    operator VALUE() const
    {
      return _obj;
    }

    VALUE inspect() const
    {
      return rb_inspect(_obj);
    }

    VALUE to_s() const
    {
      return rb_inspect(_obj);
    }

    static VALUE swig_rescue_swallow(VALUE)
    {
      /*
      VALUE errstr = rb_obj_as_string(rb_errinfo());
      printf("Swallowing error: '%s'\n", RSTRING_PTR(StringValue(errstr)));
      */
      return Qnil; /* Swallow Ruby exception */
    }

    static VALUE swig_rescue_funcall(VALUE p)
    {
      OpArgs* args = (OpArgs*) p;
      return rb_funcall(args->src, args->id, args->nargs, args->target);
    }

    bool relational_equal_op(const GC_VALUE& other, const ID& op_id, bool (*op_func)(const VALUE& a, const VALUE& b)) const
    {
      if (FIXNUM_P(_obj) && FIXNUM_P(other._obj)) {
        return op_func(_obj, other._obj);
      }
      bool res = false;
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      if (rb_respond_to(_obj, op_id)) {
        OpArgs  args;
        args.src    = _obj;
        args.id     = op_id;
        args.nargs  = 1;
        args.target = VALUE(other);
        ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                       (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      }
      if (ret == Qnil) {
        VALUE a = rb_funcall(         _obj, hash_id, 0 );
        VALUE b = rb_funcall( VALUE(other), hash_id, 0 );
        res = op_func(a, b);
      } else {
        res = RTEST(ret);
      }
      SWIG_RUBY_THREAD_END_BLOCK;
      return res;
    }

    static bool operator_eq(const VALUE& a, const VALUE& b) { return a == b; }
    static bool operator_lt(const VALUE& a, const VALUE& b) { return a < b; }
    static bool operator_le(const VALUE& a, const VALUE& b) { return a <= b; }
    static bool operator_gt(const VALUE& a, const VALUE& b) { return a > b; }
    static bool operator_ge(const VALUE& a, const VALUE& b) { return a >= b; }

    bool operator==(const GC_VALUE& other) const { return relational_equal_op(other, eq_id, operator_eq); }
    bool operator<(const GC_VALUE& other) const { return relational_equal_op(other, lt_id, operator_lt); }
    bool operator<=(const GC_VALUE& other) const { return relational_equal_op(other, le_id, operator_le); }
    bool operator>(const GC_VALUE& other) const { return relational_equal_op(other, gt_id, operator_gt); }
    bool operator>=(const GC_VALUE& other) const { return relational_equal_op(other, ge_id, operator_ge); }

    bool operator!=(const GC_VALUE& other) const
    {
      return !(this->operator==(other));
    }

    GC_VALUE unary_op(const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 0;
      args.target = Qnil;
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return ret;
    }

    GC_VALUE operator+() const { return unary_op(pos_id); }
    GC_VALUE operator-() const { return unary_op(neg_id); }
    GC_VALUE operator~() const { return unary_op(inv_id); }

    GC_VALUE binary_op(const GC_VALUE& other, const ID& op_id) const
    {
      VALUE ret = Qnil;
      SWIG_RUBY_THREAD_BEGIN_BLOCK;
      OpArgs  args;
      args.src    = _obj;
      args.id     = op_id;
      args.nargs  = 1;
      args.target = VALUE(other);
      ret = rb_rescue(RUBY_METHOD_FUNC(swig_rescue_funcall), VALUE(&args),
                     (RUBY_METHOD_FUNC(swig_rescue_swallow)), Qnil);
      SWIG_RUBY_THREAD_END_BLOCK;
      return GC_VALUE(ret);
    }

    GC_VALUE operator+(const GC_VALUE& other) const { return binary_op(other, add_id); }
    GC_VALUE operator-(const GC_VALUE& other) const { return binary_op(other, sub_id); }
    GC_VALUE operator*(const GC_VALUE& other) const { return binary_op(other, mul_id); }
    GC_VALUE operator/(const GC_VALUE& other) const { return binary_op(other, div_id); }
    GC_VALUE operator%(const GC_VALUE& other) const { return binary_op(other, mod_id); }
    GC_VALUE operator&(const GC_VALUE& other) const { return binary_op(other, and_id); }
    GC_VALUE operator^(const GC_VALUE& other) const { return binary_op(other, xor_id); }
    GC_VALUE operator|(const GC_VALUE& other) const { return binary_op(other, or_id); }
    GC_VALUE operator<<(const GC_VALUE& other) const { return binary_op(other, lshift_id); }
    GC_VALUE operator>>(const GC_VALUE& other) const { return binary_op(other, rshift_id); }
  };

  ID  GC_VALUE::hash_id = rb_intern("hash");
  ID  GC_VALUE::lt_id = rb_intern("<");
  ID  GC_VALUE::gt_id = rb_intern(">");
  ID  GC_VALUE::eq_id = rb_intern("==");
  ID  GC_VALUE::le_id = rb_intern("<=");
  ID  GC_VALUE::ge_id = rb_intern(">=");

  ID  GC_VALUE::pos_id = rb_intern("+@");
  ID  GC_VALUE::neg_id = rb_intern("-@");
  ID  GC_VALUE::inv_id = rb_intern("~");

  ID  GC_VALUE::add_id = rb_intern("+");
  ID  GC_VALUE::sub_id = rb_intern("-");
  ID  GC_VALUE::mul_id = rb_intern("*");
  ID  GC_VALUE::div_id = rb_intern("/");
  ID  GC_VALUE::mod_id = rb_intern("%");

  ID  GC_VALUE::and_id = rb_intern("&");
  ID  GC_VALUE::or_id  = rb_intern("|");
  ID  GC_VALUE::xor_id = rb_intern("^");

  ID  GC_VALUE::lshift_id = rb_intern("<<");
  ID  GC_VALUE::rshift_id = rb_intern(">>");

  SwigGCReferences SwigGCReferences::s_references;

  typedef GC_VALUE LANGUAGE_OBJ;

} // namespace swig



#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


#include <utility>


#include <iostream>


  #include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  /** 
   * Abstract base class used to represent all iterators of STL containers.
   */
  struct ConstIterator {
  public:
    typedef ConstIterator self_type;

  protected:
    GC_VALUE _seq;

  protected:
    ConstIterator(VALUE seq) : _seq(seq)
    {
    }

    // Random access iterator methods, but not required in Ruby
    virtual ptrdiff_t distance(const ConstIterator &x) const
    {
      throw std::invalid_argument("distance not supported");
    }

    virtual bool equal (const ConstIterator &x) const
    {
      throw std::invalid_argument("equal not supported");
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("advance not supported");
    }
      
  public:
    virtual ~ConstIterator() {}

    // Access iterator method, required by Ruby
    virtual VALUE value() const {
      throw std::invalid_argument("value not supported");
      return Qnil;
    };

    virtual VALUE setValue( const VALUE& v ) {
      throw std::invalid_argument("value= not supported");
      return Qnil;
    }

    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    virtual VALUE to_s() const {
      throw std::invalid_argument("to_s not supported");
      return Qnil;
    }

    virtual VALUE inspect() const {
      throw std::invalid_argument("inspect not supported");
      return Qnil;
    }
    
    virtual ConstIterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }

    //
    // C++ common/needed methods.  We emulate a bidirectional
    // operator, to be compatible with all the STL.
    // The iterator traits will then tell the STL what type of
    // iterator we really are.
    //
    ConstIterator() : _seq( Qnil )
    {
    }

    ConstIterator( const self_type& b ) : _seq( b._seq )
    {
    }

    self_type& operator=( const self_type& b )
    {
      _seq = b._seq;
      return *this;
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const ConstIterator& x) const
    {
      return ! operator==(x);
    }
      
    // Pre-decrement operator
    self_type& operator--()
    {
      return *previous();
    }

    // Pre-increment operator
    self_type& operator++()
    {
      return *next();
    }

    // Post-decrement operator
    self_type operator--(int)
    {
      self_type r = *this;
      previous();
      return r;
    }

    // Post-increment operator
    self_type operator++(int)
    {
      self_type r = *this;
      next();
      return r;
    }

    ConstIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    ConstIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }

    ConstIterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    ConstIterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const ConstIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::ConstIterator *");
	init = 1;
      }	
      return desc;
    }
  };


  /**
   * Abstract base class used to represent all non-const iterators of STL containers.
   * 
   */
  struct Iterator : public ConstIterator {
  public:
    typedef Iterator self_type;

  protected:
    Iterator(VALUE seq) : ConstIterator(seq)
    {
    }

    virtual self_type* advance(ptrdiff_t n)
    {
      throw std::invalid_argument("operation not supported");
    }

  public:
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::Iterator *");
	init = 1;
      }	
      return desc;
    }
    
    virtual Iterator *dup() const
    {
      throw std::invalid_argument("dup not supported");
      return NULL;
    }
      
    virtual self_type* next( size_t n = 1 )
    {
      return this->advance( n );
    }

    virtual self_type* previous( size_t n = 1 )
    {
      ptrdiff_t nn = n;
      return this->advance( -nn );
    }

    bool operator == (const ConstIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const Iterator& x) const
    {
      return ! operator==(x);
    }
      
    Iterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    Iterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    Iterator* operator + (ptrdiff_t n) const
    {
      return dup()->advance(n);
    }

    Iterator* operator - (ptrdiff_t n) const
    {
      return dup()->advance(-n);
    }
      
    ptrdiff_t operator - (const Iterator& x) const
    {
      return x.distance(*this);
    }
  };

}


SWIGINTERN VALUE
SWIG_ruby_failed(void)
{
  return Qnil;
} 


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2ULONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  unsigned long *res = (unsigned long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2ULONG(obj) : rb_big2ulong(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (VALUE obj, unsigned long *val) 
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    unsigned long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2ULONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (VALUE obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_bool  (bool value)
{
  return value ? Qtrue : Qfalse;
}


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2LONG(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  long *res = (long *)(args[1]);
  *res = type == T_FIXNUM ? NUM2LONG(obj) : rb_big2long(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_long (VALUE obj, long* val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FIXNUM) || (type == T_BIGNUM)) {
    long v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2LONG), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (VALUE obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  #define SWIG_From_long   LONG2NUM 


SWIGINTERNINLINE VALUE
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


#include <stdexcept>


#include <algorithm>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>


#include "network.h"
#include "dbhelper.h"
#include "isolver.h"
#include "mstree.h"
#include "sptree.h"
#include "odmatrix.h"
#include "mcflow.h"
#include "transportation.h"

/* Simple Solver Interface */

#include "sptree_simple.h"
#include "odmatrix_simple.h"
#include "mstree_simple.h"
#include "transp_simple.h"


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}



namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static VALUE from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static VALUE from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static VALUE from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static VALUE from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline VALUE from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline VALUE from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(VALUE obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(VALUE obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(VALUE obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(VALUE obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(VALUE obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	static Type *v_def = (Type*) malloc(sizeof(Type));
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(VALUE obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (throw_error) throw std::invalid_argument("bad type");
	VALUE lastErr = rb_gv_get("$!");
	if (lastErr == Qnil) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	return 0;
      }
    }
  };

  template <class Type>
  inline Type as(VALUE obj, bool te = false) {
    return traits_as< Type, typename traits< Type >::category >::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(VALUE obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(VALUE obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(VALUE obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


  namespace swig {
    template <>  struct traits<netxpert::InputArc > {
      typedef pointer_category category;
      static const char* type_name() { return"netxpert::InputArc"; }
    };
  }


#include <functional>


namespace swig {
  template < class T >
  struct yield : public std::unary_function< T, bool >
  {
    bool
    operator()( const T& v ) const
    { 
      return RTEST( rb_yield( swig::from< T >(v) ) );
    }
  };


  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {

  /** 
   * Templated base classes for all custom const_iterators.
   *
   */
  template<typename OutConstIterator>
  class ConstIterator_T :  public ConstIterator
  {
  public:
    typedef OutConstIterator const_iter;
    typedef typename std::iterator_traits<const_iter>::value_type value_type;    
    typedef ConstIterator_T<const_iter> self_type;

  protected:

    
    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:
    ConstIterator_T() : ConstIterator(Qnil)
    {
    }

    ConstIterator_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator(seq), current(curr)
    {
    }

    const const_iter& get_current() const
    {
      return current;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::const_iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    const_iter current;
  };


  /** 
   * Templated base classes for all custom non-const iterators.
   *
   */
  template<typename InOutIterator>
  class Iterator_T :  public Iterator
  {
  public:
    typedef InOutIterator nonconst_iter;

    // Make this class iterator STL compatible, by using iterator_traits
    typedef typename std::iterator_traits<nonconst_iter >::iterator_category iterator_category;
    typedef typename std::iterator_traits<nonconst_iter >::value_type        value_type;
    typedef typename std::iterator_traits<nonconst_iter >::difference_type   difference_type;
    typedef typename std::iterator_traits<nonconst_iter >::pointer           pointer;
    typedef typename std::iterator_traits<nonconst_iter >::reference         reference;

    typedef Iterator                         base;
    typedef Iterator_T< nonconst_iter > self_type;

  protected:

    virtual bool equal (const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    virtual ptrdiff_t distance(const ConstIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }

    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( current, n );
      return this;
    }

  public:

    Iterator_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator(seq), current(curr)
    {
    }

    const nonconst_iter& get_current() const
    {
      return current;
    }

    self_type& operator=( const self_type& b )
    {
      base::operator=( b );
      return *this;
    }
    
    self_type& operator=( const value_type& b )
    {
      *current = b;
      return *this;
    }

    const value_type& operator*() const
    {
      return *current;
    }

    value_type& operator*()
    {
      return *current;
    }
    
    virtual VALUE inspect() const
    {
      VALUE ret = rb_str_new2("#<");
      ret = rb_str_cat2( ret, rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_inspect(cur) );
      ret = rb_str_cat2( ret, ">" );
      return ret;
    }

    virtual VALUE to_s()    const
    {
      VALUE ret = rb_str_new2( rb_obj_classname(_seq) );
      ret = rb_str_cat2( ret, "::iterator " );
      VALUE cur = value();
      ret = rb_str_concat( ret, rb_obj_as_string(cur) );
      return ret;
    }

  protected:
    nonconst_iter current;
  };


  /**
   * Auxiliary functor to store the value of a ruby object inside
   * a reference of a compatible C++ type.  ie: Ruby -> C++
   * 
   */
  template <class ValueType>
  struct asval_oper 
  {
    typedef ValueType    value_type;
    typedef bool        result_type;
    bool operator()(VALUE obj, value_type& v) const
    {
      return ( swig::asval< value_type >(obj, &v) == SWIG_OK );
    }
  };

  /**
   * Auxiliary functor to return a ruby object from a C++ type. 
   * ie: C++ -> Ruby
   * 
   */
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef VALUE result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };


  /** 
   * ConstIterator class for a const_iterator with no end() boundaries.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorOpen_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;
    typedef ConstIteratorOpen_T<OutConstIterator, ValueType, FromOper> self_type;
    
    ConstIteratorOpen_T(const_iter curr, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * Iterator class for an iterator with no end() boundaries.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorOpen_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper  from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;

  public:
    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }
    
    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }

    virtual VALUE setValue( const VALUE& v )
    {
      value_type& dst = *base::current;
      if ( asval(v, dst) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
  };

  /** 
   * ConstIterator class for a const_iterator where begin() and end() boundaries are known.
   *
   */
  template<typename OutConstIterator, 
	   typename ValueType = typename std::iterator_traits<OutConstIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class ConstIteratorClosed_T :  public ConstIterator_T<OutConstIterator>
  {
  public:
    FromOper from;
    typedef OutConstIterator const_iter;
    typedef ValueType value_type;
    typedef ConstIterator_T<const_iter>  base;    
    typedef ConstIteratorClosed_T<OutConstIterator, ValueType, FromOper> self_type;
    
  protected:
    virtual ConstIterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    ConstIteratorClosed_T(const_iter curr, const_iter first, 
			  const_iter last, VALUE seq = Qnil)
      : ConstIterator_T<OutConstIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    ConstIterator *dup() const
    {
      return new self_type(*this);
    }


  private:
    const_iter begin;
    const_iter end;
  };

  /** 
   * Iterator class for a iterator where begin() and end() boundaries are known.
   *
   */
  template<typename InOutIterator, 
	   typename ValueType = typename std::iterator_traits<InOutIterator>::value_type,
	   typename FromOper = from_oper<ValueType>,
	   typename AsvalOper = asval_oper<ValueType> >
  class IteratorClosed_T :  public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef ValueType value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, ValueType, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    // Iterator setter method, required by Ruby
    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      value_type& dst = *base::current;
      if ( asval( v, dst ) ) return v;
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorOpen_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorOpen_T<InOutIterator, bool, FromOper, AsvalOper> self_type;

    IteratorOpen_T(nonconst_iter curr, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq)
    {
    }

    virtual VALUE value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    virtual VALUE setValue( const VALUE& v )
    {
      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }    
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }
    
  };

  /* Partial specialization for bools which don't allow de-referencing */
  template< typename InOutIterator, typename FromOper, typename AsvalOper >
  class IteratorClosed_T< InOutIterator, bool, FromOper, AsvalOper > : 
    public Iterator_T<InOutIterator>
  {
  public:
    FromOper   from;
    AsvalOper asval;
    typedef InOutIterator nonconst_iter;
    typedef bool value_type;
    typedef Iterator_T<nonconst_iter>  base;
    typedef IteratorClosed_T<InOutIterator, bool, FromOper, AsvalOper> self_type;
    
  protected:
    virtual Iterator* advance(ptrdiff_t n)
    {
      std::advance( base::current, n );
      if ( base::current == end )
	throw stop_iteration();
      return this;
    }

  public:
    IteratorClosed_T(nonconst_iter curr, nonconst_iter first, 
		     nonconst_iter last, VALUE seq = Qnil)
      : Iterator_T<InOutIterator>(curr, seq), begin(first), end(last)
    {
    }

    virtual VALUE value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }

    virtual VALUE setValue( const VALUE& v )
    {
      if (base::current == end)
	throw stop_iteration();

      bool tmp = *base::current;
      if ( asval( v, tmp ) )
	{
	  *base::current = tmp;
	  return v;
	}
      return Qnil;
    }
    
    Iterator *dup() const
    {
      return new self_type(*this);
    }

  private:
    nonconst_iter begin;
    nonconst_iter end;
  };


  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, const InOutIter& begin,
			 const InOutIter& end, VALUE seq = Qnil)
  {
    return new IteratorClosed_T<InOutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename InOutIter>
  inline Iterator*
  make_nonconst_iterator(const InOutIter& current, VALUE seq = Qnil)
  {
    return new IteratorOpen_T<InOutIter>(current, seq);
  }

  /** 
   * Helper function used to wrap a bounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, const OutIter& begin,
                       const OutIter& end, VALUE seq = Qnil)
  {
    return new ConstIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  /** 
   * Helper function used to wrap an unbounded const_iterator.  This is to be used in
   * a %typemap(out), for example.
   *
   */
  template<typename OutIter>
  inline ConstIterator*
  make_const_iterator(const OutIter& current, VALUE seq = Qnil)
  {
    return new ConstIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{

  /**
   * This class is a proxy class for references, used to return and set values
   * of an element of a Ruby Array of stuff.
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_Ref
  {
    RubySequence_Ref(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      VALUE item = rb_ary_entry(_seq, _index );
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	VALUE lastErr = rb_gv_get("$!");
	if ( lastErr == Qnil ) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	VALUE str = rb_str_new2(msg);
	str = rb_str_cat2( str, e.what() );
	SWIG_Ruby_ExceptionType( NULL, str );
	throw;
      }
    }

    RubySequence_Ref& operator=(const T& v)
    {
      rb_ary_set(_seq, _index, swig::from< T >(v));
      return *this;
    }

  private:
    VALUE  _seq;
    int _index;
  };


  /**
   * This class is a proxy to return a pointer to a class, usually
   * RubySequence_Ref. 
   * It can be used by RubySequence_InputIterator to make it work with STL
   * algorithms.
   * 
   */
  template <class T>
  struct RubySequence_ArrowProxy
  {
    RubySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };


  /**
   * Input Iterator.  This adapator class is a random access iterator that 
   * allows you to use STL algorithms with a Ruby class (a Ruby Array by default).
   * 
   */
  template <class T, class Reference = RubySequence_Ref< T > >
  struct RubySequence_InputIterator
  {
    typedef RubySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef ptrdiff_t difference_type;

    RubySequence_InputIterator()
    {
    }

    RubySequence_InputIterator(VALUE  seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    RubySequence_ArrowProxy<T>
    operator->() const {
      return RubySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    VALUE  _seq;
    difference_type _index;
  };


  /**
   * This adaptor class allows you to use a Ruby Array as if it was an STL
   * container, giving it begin(), end(), and iterators.
   * 
   */
  template <class T>
  struct RubySequence_Cont
  {
    typedef RubySequence_Ref<T> reference;
    typedef const RubySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef RubySequence_InputIterator<T, reference> iterator;
    typedef RubySequence_InputIterator<T, const_reference> const_iterator;

    RubySequence_Cont(VALUE  seq) : _seq(0)
    {
      if (!rb_obj_is_kind_of(seq, rb_cArray)) {
	throw std::invalid_argument("an Array is expected");
      }
      _seq = seq;
    }

    ~RubySequence_Cont()
    {
    }

    size_type size() const
    {
      return RARRAY_LEN(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = false) const
    {
      int s = (int) size();
      for (int i = 0; i < s; ++i) {
	VALUE item = rb_ary_entry(_seq, i );
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    VALUE  _seq;
  };

}


namespace swig {
  template <class RubySeq, class Seq>
  inline void
  assign(const RubySeq& rubyseq, Seq* seq) {
    // seq->assign(rubyseq.begin(), rubyseq.end()); // not used as not always implemented
    typedef typename RubySeq::value_type value_type;
    typename RubySeq::const_iterator it = rubyseq.begin();
    for (;it != rubyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  RubySequence_Cont<value_type> rubyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return rubyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  // Partial specialization for GC_VALUE's.  No need to typecheck each
  // element.
  template< class Seq >
  struct traits_asptr_stdseq< Seq, swig::GC_VALUE > {
    typedef Seq sequence;
    typedef swig::GC_VALUE value_type;

    static int asptr(VALUE obj, sequence **seq) {
      if (rb_obj_is_kind_of(obj, rb_cArray) == Qtrue) {
	try {
	  if (seq) {
	    RubySequence_Cont<value_type> rubyseq(obj);
	    sequence *pseq = new sequence();
	    assign(rubyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return true;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    VALUE lastErr = rb_gv_get("$!");
	    if (lastErr == Qnil) {
	      rb_raise(rb_eTypeError, "%s", e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static VALUE from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	VALUE obj = rb_ary_new2((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  rb_ary_push(obj, swig::from< value_type >(*it));
	}
	rb_obj_freeze(obj);  // treat as immutable result
	return obj;
      } else {
	rb_raise(rb_eRangeError,"sequence size not valid in ruby");
	return Qnil;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(VALUE obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static VALUE from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<netxpert::InputArc, std::allocator< netxpert::InputArc > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "netxpert::InputArc" "," "std::allocator< netxpert::InputArc >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *std_vector_Sl_netxpert_InputArc_Sg__dup(std::vector< netxpert::InputArc > *self){
      return new std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__inspect(std::vector< netxpert::InputArc > *self){
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator i = self->begin();
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__to_a(std::vector< netxpert::InputArc > *self){
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator i = self->begin();
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__to_s(std::vector< netxpert::InputArc > *self){
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::iterator i = self->begin();
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__slice(std::vector< netxpert::InputArc > *self,std::vector< netxpert::InputArc >::difference_type i,std::vector< netxpert::InputArc >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *std_vector_Sl_netxpert_InputArc_Sg__each(std::vector< netxpert::InputArc > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator i = self->begin();
	std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *std_vector_Sl_netxpert_InputArc_Sg__select(std::vector< netxpert::InputArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >* r = new std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >;
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator i = self->begin();
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__delete_at(std::vector< netxpert::InputArc > *self,std::vector< netxpert::InputArc >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg____delete2__(std::vector< netxpert::InputArc > *self,std::vector< netxpert::InputArc >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *std_vector_Sl_netxpert_InputArc_Sg__reject_bang(std::vector< netxpert::InputArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__pop(std::vector< netxpert::InputArc > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::InputArc >::value_type const std_vector_Sl_netxpert_InputArc_Sg__push(std::vector< netxpert::InputArc > *self,std::vector< netxpert::InputArc >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *std_vector_Sl_netxpert_InputArc_Sg__reject(std::vector< netxpert::InputArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >* r = new std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__at(std::vector< netxpert::InputArc > const *self,std::vector< netxpert::InputArc >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg____getitem____SWIG_0(std::vector< netxpert::InputArc > const *self,std::vector< netxpert::InputArc >::difference_type i,std::vector< netxpert::InputArc >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg____getitem____SWIG_1(std::vector< netxpert::InputArc > const *self,std::vector< netxpert::InputArc >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg____getitem____SWIG_2(std::vector< netxpert::InputArc > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg____setitem____SWIG_0(std::vector< netxpert::InputArc > *self,std::vector< netxpert::InputArc >::difference_type i,std::vector< netxpert::InputArc >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg____setitem____SWIG_1(std::vector< netxpert::InputArc > *self,std::vector< netxpert::InputArc >::difference_type i,std::vector< netxpert::InputArc >::difference_type j,std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputArc_Sg__shift(std::vector< netxpert::InputArc > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type >( x );
    }

SWIGINTERN int
SWIG_AsVal_int (VALUE obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *std_vector_Sl_netxpert_InputArc_Sg__insert__SWIG_0(std::vector< netxpert::InputArc > *self,std::vector< netxpert::InputArc >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type val = swig::as<std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *std_vector_Sl_netxpert_InputArc_Sg__unshift(std::vector< netxpert::InputArc > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type val = swig::as<std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return ULONG2NUM(value); 
}


SWIGINTERNINLINE VALUE
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


  namespace swig {
    template <>  struct traits<netxpert::InputNode > {
      typedef pointer_category category;
      static const char* type_name() { return"netxpert::InputNode"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<netxpert::InputNode, std::allocator< netxpert::InputNode > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "netxpert::InputNode" "," "std::allocator< netxpert::InputNode >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *std_vector_Sl_netxpert_InputNode_Sg__dup(std::vector< netxpert::InputNode > *self){
      return new std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__inspect(std::vector< netxpert::InputNode > *self){
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator i = self->begin();
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__to_a(std::vector< netxpert::InputNode > *self){
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator i = self->begin();
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__to_s(std::vector< netxpert::InputNode > *self){
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::iterator i = self->begin();
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__slice(std::vector< netxpert::InputNode > *self,std::vector< netxpert::InputNode >::difference_type i,std::vector< netxpert::InputNode >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *std_vector_Sl_netxpert_InputNode_Sg__each(std::vector< netxpert::InputNode > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator i = self->begin();
	std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *std_vector_Sl_netxpert_InputNode_Sg__select(std::vector< netxpert::InputNode > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >* r = new std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >;
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator i = self->begin();
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__delete_at(std::vector< netxpert::InputNode > *self,std::vector< netxpert::InputNode >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg____delete2__(std::vector< netxpert::InputNode > *self,std::vector< netxpert::InputNode >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *std_vector_Sl_netxpert_InputNode_Sg__reject_bang(std::vector< netxpert::InputNode > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__pop(std::vector< netxpert::InputNode > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::InputNode >::value_type const std_vector_Sl_netxpert_InputNode_Sg__push(std::vector< netxpert::InputNode > *self,std::vector< netxpert::InputNode >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *std_vector_Sl_netxpert_InputNode_Sg__reject(std::vector< netxpert::InputNode > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >* r = new std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__at(std::vector< netxpert::InputNode > const *self,std::vector< netxpert::InputNode >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg____getitem____SWIG_0(std::vector< netxpert::InputNode > const *self,std::vector< netxpert::InputNode >::difference_type i,std::vector< netxpert::InputNode >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg____getitem____SWIG_1(std::vector< netxpert::InputNode > const *self,std::vector< netxpert::InputNode >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg____getitem____SWIG_2(std::vector< netxpert::InputNode > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg____setitem____SWIG_0(std::vector< netxpert::InputNode > *self,std::vector< netxpert::InputNode >::difference_type i,std::vector< netxpert::InputNode >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg____setitem____SWIG_1(std::vector< netxpert::InputNode > *self,std::vector< netxpert::InputNode >::difference_type i,std::vector< netxpert::InputNode >::difference_type j,std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_InputNode_Sg__shift(std::vector< netxpert::InputNode > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *std_vector_Sl_netxpert_InputNode_Sg__insert__SWIG_0(std::vector< netxpert::InputNode > *self,std::vector< netxpert::InputNode >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type val = swig::as<std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *std_vector_Sl_netxpert_InputNode_Sg__unshift(std::vector< netxpert::InputNode > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type val = swig::as<std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

  namespace swig {
    template <>  struct traits<netxpert::NewNode > {
      typedef pointer_category category;
      static const char* type_name() { return"netxpert::NewNode"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<netxpert::NewNode, std::allocator< netxpert::NewNode > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "netxpert::NewNode" "," "std::allocator< netxpert::NewNode >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *std_vector_Sl_netxpert_NewNode_Sg__dup(std::vector< netxpert::NewNode > *self){
      return new std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__inspect(std::vector< netxpert::NewNode > *self){
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator i = self->begin();
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__to_a(std::vector< netxpert::NewNode > *self){
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator i = self->begin();
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__to_s(std::vector< netxpert::NewNode > *self){
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::iterator i = self->begin();
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__slice(std::vector< netxpert::NewNode > *self,std::vector< netxpert::NewNode >::difference_type i,std::vector< netxpert::NewNode >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *std_vector_Sl_netxpert_NewNode_Sg__each(std::vector< netxpert::NewNode > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator i = self->begin();
	std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *std_vector_Sl_netxpert_NewNode_Sg__select(std::vector< netxpert::NewNode > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >* r = new std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >;
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator i = self->begin();
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__delete_at(std::vector< netxpert::NewNode > *self,std::vector< netxpert::NewNode >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg____delete2__(std::vector< netxpert::NewNode > *self,std::vector< netxpert::NewNode >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *std_vector_Sl_netxpert_NewNode_Sg__reject_bang(std::vector< netxpert::NewNode > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__pop(std::vector< netxpert::NewNode > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::NewNode >::value_type const std_vector_Sl_netxpert_NewNode_Sg__push(std::vector< netxpert::NewNode > *self,std::vector< netxpert::NewNode >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *std_vector_Sl_netxpert_NewNode_Sg__reject(std::vector< netxpert::NewNode > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >* r = new std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__at(std::vector< netxpert::NewNode > const *self,std::vector< netxpert::NewNode >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg____getitem____SWIG_0(std::vector< netxpert::NewNode > const *self,std::vector< netxpert::NewNode >::difference_type i,std::vector< netxpert::NewNode >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg____getitem____SWIG_1(std::vector< netxpert::NewNode > const *self,std::vector< netxpert::NewNode >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg____getitem____SWIG_2(std::vector< netxpert::NewNode > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg____setitem____SWIG_0(std::vector< netxpert::NewNode > *self,std::vector< netxpert::NewNode >::difference_type i,std::vector< netxpert::NewNode >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg____setitem____SWIG_1(std::vector< netxpert::NewNode > *self,std::vector< netxpert::NewNode >::difference_type i,std::vector< netxpert::NewNode >::difference_type j,std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_NewNode_Sg__shift(std::vector< netxpert::NewNode > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *std_vector_Sl_netxpert_NewNode_Sg__insert__SWIG_0(std::vector< netxpert::NewNode > *self,std::vector< netxpert::NewNode >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type val = swig::as<std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *std_vector_Sl_netxpert_NewNode_Sg__unshift(std::vector< netxpert::NewNode > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type val = swig::as<std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

  namespace swig {
    template <>  struct traits<netxpert::ExtSPTreeArc > {
      typedef pointer_category category;
      static const char* type_name() { return"netxpert::ExtSPTreeArc"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<netxpert::ExtSPTreeArc, std::allocator< netxpert::ExtSPTreeArc > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "netxpert::ExtSPTreeArc" "," "std::allocator< netxpert::ExtSPTreeArc >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *std_vector_Sl_netxpert_ExtSPTreeArc_Sg__dup(std::vector< netxpert::ExtSPTreeArc > *self){
      return new std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__inspect(std::vector< netxpert::ExtSPTreeArc > *self){
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__to_a(std::vector< netxpert::ExtSPTreeArc > *self){
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__to_s(std::vector< netxpert::ExtSPTreeArc > *self){
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::iterator i = self->begin();
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__slice(std::vector< netxpert::ExtSPTreeArc > *self,std::vector< netxpert::ExtSPTreeArc >::difference_type i,std::vector< netxpert::ExtSPTreeArc >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *std_vector_Sl_netxpert_ExtSPTreeArc_Sg__each(std::vector< netxpert::ExtSPTreeArc > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator i = self->begin();
	std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *std_vector_Sl_netxpert_ExtSPTreeArc_Sg__select(std::vector< netxpert::ExtSPTreeArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >* r = new std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >;
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__delete_at(std::vector< netxpert::ExtSPTreeArc > *self,std::vector< netxpert::ExtSPTreeArc >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg____delete2__(std::vector< netxpert::ExtSPTreeArc > *self,std::vector< netxpert::ExtSPTreeArc >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *std_vector_Sl_netxpert_ExtSPTreeArc_Sg__reject_bang(std::vector< netxpert::ExtSPTreeArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__pop(std::vector< netxpert::ExtSPTreeArc > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::ExtSPTreeArc >::value_type const std_vector_Sl_netxpert_ExtSPTreeArc_Sg__push(std::vector< netxpert::ExtSPTreeArc > *self,std::vector< netxpert::ExtSPTreeArc >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *std_vector_Sl_netxpert_ExtSPTreeArc_Sg__reject(std::vector< netxpert::ExtSPTreeArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >* r = new std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__at(std::vector< netxpert::ExtSPTreeArc > const *self,std::vector< netxpert::ExtSPTreeArc >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg____getitem____SWIG_0(std::vector< netxpert::ExtSPTreeArc > const *self,std::vector< netxpert::ExtSPTreeArc >::difference_type i,std::vector< netxpert::ExtSPTreeArc >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg____getitem____SWIG_1(std::vector< netxpert::ExtSPTreeArc > const *self,std::vector< netxpert::ExtSPTreeArc >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg____getitem____SWIG_2(std::vector< netxpert::ExtSPTreeArc > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg____setitem____SWIG_0(std::vector< netxpert::ExtSPTreeArc > *self,std::vector< netxpert::ExtSPTreeArc >::difference_type i,std::vector< netxpert::ExtSPTreeArc >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg____setitem____SWIG_1(std::vector< netxpert::ExtSPTreeArc > *self,std::vector< netxpert::ExtSPTreeArc >::difference_type i,std::vector< netxpert::ExtSPTreeArc >::difference_type j,std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtSPTreeArc_Sg__shift(std::vector< netxpert::ExtSPTreeArc > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *std_vector_Sl_netxpert_ExtSPTreeArc_Sg__insert__SWIG_0(std::vector< netxpert::ExtSPTreeArc > *self,std::vector< netxpert::ExtSPTreeArc >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type val = swig::as<std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *std_vector_Sl_netxpert_ExtSPTreeArc_Sg__unshift(std::vector< netxpert::ExtSPTreeArc > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type val = swig::as<std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

  namespace swig {
    template <>  struct traits<netxpert::ExtNodeSupply > {
      typedef pointer_category category;
      static const char* type_name() { return"netxpert::ExtNodeSupply"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<netxpert::ExtNodeSupply, std::allocator< netxpert::ExtNodeSupply > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "netxpert::ExtNodeSupply" "," "std::allocator< netxpert::ExtNodeSupply >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *std_vector_Sl_netxpert_ExtNodeSupply_Sg__dup(std::vector< netxpert::ExtNodeSupply > *self){
      return new std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__inspect(std::vector< netxpert::ExtNodeSupply > *self){
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__to_a(std::vector< netxpert::ExtNodeSupply > *self){
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__to_s(std::vector< netxpert::ExtNodeSupply > *self){
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::iterator i = self->begin();
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__slice(std::vector< netxpert::ExtNodeSupply > *self,std::vector< netxpert::ExtNodeSupply >::difference_type i,std::vector< netxpert::ExtNodeSupply >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *std_vector_Sl_netxpert_ExtNodeSupply_Sg__each(std::vector< netxpert::ExtNodeSupply > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator i = self->begin();
	std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *std_vector_Sl_netxpert_ExtNodeSupply_Sg__select(std::vector< netxpert::ExtNodeSupply > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >* r = new std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >;
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__delete_at(std::vector< netxpert::ExtNodeSupply > *self,std::vector< netxpert::ExtNodeSupply >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg____delete2__(std::vector< netxpert::ExtNodeSupply > *self,std::vector< netxpert::ExtNodeSupply >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *std_vector_Sl_netxpert_ExtNodeSupply_Sg__reject_bang(std::vector< netxpert::ExtNodeSupply > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__pop(std::vector< netxpert::ExtNodeSupply > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::ExtNodeSupply >::value_type const std_vector_Sl_netxpert_ExtNodeSupply_Sg__push(std::vector< netxpert::ExtNodeSupply > *self,std::vector< netxpert::ExtNodeSupply >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *std_vector_Sl_netxpert_ExtNodeSupply_Sg__reject(std::vector< netxpert::ExtNodeSupply > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >* r = new std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__at(std::vector< netxpert::ExtNodeSupply > const *self,std::vector< netxpert::ExtNodeSupply >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg____getitem____SWIG_0(std::vector< netxpert::ExtNodeSupply > const *self,std::vector< netxpert::ExtNodeSupply >::difference_type i,std::vector< netxpert::ExtNodeSupply >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg____getitem____SWIG_1(std::vector< netxpert::ExtNodeSupply > const *self,std::vector< netxpert::ExtNodeSupply >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg____getitem____SWIG_2(std::vector< netxpert::ExtNodeSupply > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg____setitem____SWIG_0(std::vector< netxpert::ExtNodeSupply > *self,std::vector< netxpert::ExtNodeSupply >::difference_type i,std::vector< netxpert::ExtNodeSupply >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg____setitem____SWIG_1(std::vector< netxpert::ExtNodeSupply > *self,std::vector< netxpert::ExtNodeSupply >::difference_type i,std::vector< netxpert::ExtNodeSupply >::difference_type j,std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtNodeSupply_Sg__shift(std::vector< netxpert::ExtNodeSupply > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *std_vector_Sl_netxpert_ExtNodeSupply_Sg__insert__SWIG_0(std::vector< netxpert::ExtNodeSupply > *self,std::vector< netxpert::ExtNodeSupply >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type val = swig::as<std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *std_vector_Sl_netxpert_ExtNodeSupply_Sg__unshift(std::vector< netxpert::ExtNodeSupply > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type val = swig::as<std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

  namespace swig {
    template <>  struct traits<netxpert::ExtDistributionArc > {
      typedef pointer_category category;
      static const char* type_name() { return"netxpert::ExtDistributionArc"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<netxpert::ExtDistributionArc, std::allocator< netxpert::ExtDistributionArc > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "netxpert::ExtDistributionArc" "," "std::allocator< netxpert::ExtDistributionArc >" " >";
	  }
	};
      }
    
SWIGINTERN std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *std_vector_Sl_netxpert_ExtDistributionArc_Sg__dup(std::vector< netxpert::ExtDistributionArc > *self){
      return new std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >(*self);
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__inspect(std::vector< netxpert::ExtDistributionArc > *self){
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator e = self->end();
      const char *type_name = swig::type_name< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > >();
      VALUE str = rb_str_new2(type_name);
      str = rb_str_cat2( str, " [" );
      bool comma = false;
      VALUE tmp;
      for ( ; i != e; ++i, comma = true )
	{
	  if (comma) str = rb_str_cat2( str, "," );
	  tmp = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( *i );
	  tmp = rb_inspect( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      str = rb_str_cat2( str, "]" );
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__to_a(std::vector< netxpert::ExtDistributionArc > *self){
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator e = self->end();
      VALUE ary = rb_ary_new2( std::distance( i, e ) );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( *i );
	  rb_ary_push( ary, tmp );
	}
      return ary;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__to_s(std::vector< netxpert::ExtDistributionArc > *self){
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::iterator i = self->begin();
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::iterator e = self->end();
      VALUE str = rb_str_new2( "" );
      VALUE tmp;
      for ( ; i != e; ++i )
	{
	  tmp = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( *i );
	  tmp = rb_obj_as_string( tmp );
	  str = rb_str_buf_append( str, tmp );
	}
      return str;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__slice(std::vector< netxpert::ExtDistributionArc > *self,std::vector< netxpert::ExtDistributionArc >::difference_type i,std::vector< netxpert::ExtDistributionArc >::difference_type j){
	if ( j <= 0 ) return Qnil;
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	j += i;
	if ( static_cast<std::size_t>(j) >= len ) j = len-1;

	VALUE r = Qnil;
	try {
	  r = swig::from< const std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >* >( swig::getslice(self, i, j) );
	}
	catch( std::out_of_range )
	  {
	  }
	return r;
      }
SWIGINTERN std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *std_vector_Sl_netxpert_ExtDistributionArc_Sg__each(std::vector< netxpert::ExtDistributionArc > *self){
	if ( !rb_block_given_p() )
	  rb_raise( rb_eArgError, "no block given");

	VALUE r;
	std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator i = self->begin();
	std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator e = self->end();
	for ( ; i != e; ++i )
	  {
	    r = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >(*i);
	    rb_yield(r);
	  }
	
	return self;
      }
SWIGINTERN std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *std_vector_Sl_netxpert_ExtDistributionArc_Sg__select(std::vector< netxpert::ExtDistributionArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >* r = new std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >;
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator i = self->begin();
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::const_iterator e = self->end();
      for ( ; i != e; ++i )
	{
	  VALUE v = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >(*i);
	  if ( RTEST( rb_yield(v) ) )
	    self->insert( r->end(), *i);
	}
	
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__delete_at(std::vector< netxpert::ExtDistributionArc > *self,std::vector< netxpert::ExtDistributionArc >::difference_type i){
      VALUE r = Qnil;
      try {
	std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::iterator at = swig::getpos(self, i);
	r = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( *(at) );
	self->erase(at); 
      }
      catch (std::out_of_range)
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg____delete2__(std::vector< netxpert::ExtDistributionArc > *self,std::vector< netxpert::ExtDistributionArc >::value_type const &i){
      VALUE r = Qnil;
      return r;
    }
SWIGINTERN std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *std_vector_Sl_netxpert_ExtDistributionArc_Sg__reject_bang(std::vector< netxpert::ExtDistributionArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      self->erase( std::remove_if( self->begin(), self->end(),
            swig::yield< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >() ), self->end() );
      return self;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__pop(std::vector< netxpert::ExtDistributionArc > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type x = self->back();
      self->pop_back();
      return swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::ExtDistributionArc >::value_type const std_vector_Sl_netxpert_ExtDistributionArc_Sg__push(std::vector< netxpert::ExtDistributionArc > *self,std::vector< netxpert::ExtDistributionArc >::value_type const &e){
      self->push_back( e );
      return e;
    }
SWIGINTERN std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *std_vector_Sl_netxpert_ExtDistributionArc_Sg__reject(std::vector< netxpert::ExtDistributionArc > *self){
      if ( !rb_block_given_p() )
	rb_raise( rb_eArgError, "no block given" );

      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >* r = new std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >;
      std::remove_copy_if( self->begin(), self->end(),              
			   std::back_inserter(*r),
			   swig::yield< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >() );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__at(std::vector< netxpert::ExtDistributionArc > const *self,std::vector< netxpert::ExtDistributionArc >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg____getitem____SWIG_0(std::vector< netxpert::ExtDistributionArc > const *self,std::vector< netxpert::ExtDistributionArc >::difference_type i,std::vector< netxpert::ExtDistributionArc >::difference_type j){
      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; if ( static_cast<std::size_t>(j) >= len ) j = len-1;

      VALUE r = Qnil;
      try {
	r = swig::from< const std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >* >( swig::getslice(self, i, j) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg____getitem____SWIG_1(std::vector< netxpert::ExtDistributionArc > const *self,std::vector< netxpert::ExtDistributionArc >::difference_type i){
      VALUE r = Qnil;
      try {
	r = swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( *(swig::cgetpos(self, i)) );
      }
      catch( std::out_of_range )
	{
	}
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg____getitem____SWIG_2(std::vector< netxpert::ExtDistributionArc > const *self,VALUE i){
      if ( rb_obj_is_kind_of( i, rb_cRange ) == Qfalse )
	{
	  rb_raise( rb_eTypeError, "not a valid index or range" );
	}

      VALUE r = Qnil;
      static ID id_end   = rb_intern("end");
      static ID id_start = rb_intern("begin");
      static ID id_noend = rb_intern("exclude_end?");

      VALUE start = rb_funcall( i, id_start, 0 );
      VALUE end   = rb_funcall( i, id_end, 0 );
      bool  noend = ( rb_funcall( i, id_noend, 0 ) == Qtrue );

      int len = self->size();

      int s = NUM2INT( start );
      if ( s < 0 ) s = len + s;
      else if ( s >= len ) return Qnil;

      int e = NUM2INT( end );
      if ( e < 0 ) e = len + e;

      if ( e < s ) return Qnil; //std::swap( s, e );

      if ( noend ) e -= 1;
      if ( e >= len ) e = len - 1;

      return swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >* >( swig::getslice(self, s, e+1) );
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg____setitem____SWIG_0(std::vector< netxpert::ExtDistributionArc > *self,std::vector< netxpert::ExtDistributionArc >::difference_type i,std::vector< netxpert::ExtDistributionArc >::value_type const &x){
	std::size_t len = self->size();
	if ( i < 0 ) i = len - i;
	else if ( static_cast<std::size_t>(i) >= len )
	  self->resize( i+1, x );
	else
	  *(swig::getpos(self,i)) = x;

	return swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( x );
      }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg____setitem____SWIG_1(std::vector< netxpert::ExtDistributionArc > *self,std::vector< netxpert::ExtDistributionArc >::difference_type i,std::vector< netxpert::ExtDistributionArc >::difference_type j,std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > const &v){

      if ( j <= 0 ) return Qnil;
      std::size_t len = self->size();
      if ( i < 0 ) i = len - i;
      j += i; 
      if ( static_cast<std::size_t>(j) >= len ) {
	self->resize( j+1, *(v.begin()) );
	j = len-1;
      }

      VALUE r = Qnil;
      swig::setslice(self, i, j, v);
      r = swig::from< const std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >* >( &v );
      return r;
    }
SWIGINTERN VALUE std_vector_Sl_netxpert_ExtDistributionArc_Sg__shift(std::vector< netxpert::ExtDistributionArc > *self){
      if (self->empty()) return Qnil;
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type x = self->front();
      self->erase( self->begin() );
      return swig::from< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type >( x );
    }
SWIGINTERN std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *std_vector_Sl_netxpert_ExtDistributionArc_Sg__insert__SWIG_0(std::vector< netxpert::ExtDistributionArc > *self,std::vector< netxpert::ExtDistributionArc >::difference_type pos,int argc,VALUE *argv,...){
      std::size_t len = self->size();
      std::size_t   i = swig::check_index( pos, len, true );
      std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::iterator start;

      VALUE elem = argv[0];
      int idx = 0;
      try {
	std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type val = swig::as<std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type>( elem, true );
	if ( i >= len ) {
	  self->resize(i-1, val);
	  return self;
	}
	start = self->begin();
	std::advance( start, i );
	self->insert( start++, val );

	for ( ++idx; idx < argc; ++idx )
	  {
	    elem = argv[idx];
	    val = swig::as<std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type>( elem );
	    self->insert( start++, val );
	  }

      } 
      catch( std::invalid_argument )
	{
	  rb_raise( rb_eArgError, "%s",
		    Ruby_Format_TypeError( "", 
					   swig::type_name<std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type>(),
					   __FUNCTION__, idx+2, elem ));
	}


      return self;
    }
SWIGINTERN std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *std_vector_Sl_netxpert_ExtDistributionArc_Sg__unshift(std::vector< netxpert::ExtDistributionArc > *self,int argc,VALUE *argv,...){
      for ( int idx = argc-1; idx >= 0; --idx )
	{
	  std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::iterator start = self->begin();
	  VALUE elem = argv[idx];
	  try {
	    std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type val = swig::as<std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type>( elem, true );
	    self->insert( start, val );
	  }
	  catch( std::invalid_argument )
	    {
	      rb_raise( rb_eArgError, "%s",
			Ruby_Format_TypeError( "", 
					       swig::type_name<std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >::value_type>(),
					       __FUNCTION__, idx+2, elem ));
	    }
	}

      return self;
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE VALUE 
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > LONG_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : Qnil;
    } else {
      return rb_str_new(carray, static_cast< long >(size));
    }
  } else {
    return Qnil;
  }
}


SWIGINTERNINLINE VALUE
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(VALUE obj, char** cptr, size_t* psize, int *alloc)
{
  if (TYPE(obj) == T_STRING) {
    char *cstr = StringValuePtr(obj); 
    size_t size = RSTRING_LEN(obj) + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy((new char[size]), cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *)vptr;
	if (psize) *psize = vptr ? (strlen((char*)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (VALUE obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


/*@SWIG:/usr/share/swig2.0/ruby/rubyprimtypes.swg,19,%ruby_aux_method@*/
SWIGINTERN VALUE SWIG_AUX_NUM2DBL(VALUE *args)
{
  VALUE obj = args[0];
  VALUE type = TYPE(obj);
  double *res = (double *)(args[1]);
  *res = NUM2DBL(obj);
  return obj;
}
/*@SWIG@*/

SWIGINTERN int
SWIG_AsVal_double (VALUE obj, double *val)
{
  VALUE type = TYPE(obj);
  if ((type == T_FLOAT) || (type == T_FIXNUM) || (type == T_BIGNUM)) {
    double v;
    VALUE a[2];
    a[0] = obj;
    a[1] = (VALUE)(&v);
    if (rb_rescue(RUBY_METHOD_FUNC(SWIG_AUX_NUM2DBL), (VALUE)a, RUBY_METHOD_FUNC(SWIG_ruby_failed), 0) != Qnil) {
      if (val) *val = v;
      return SWIG_OK;
    }
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   rb_float_new 

SWIGINTERN char *netxpert_InputNode___str__(netxpert::InputNode *self){
       static char tmp [1024];
       sprintf(tmp,"InputNode('%s',%g)", self->extNodeID.c_str(), self->nodeSupply);
       return tmp;
   }

SWIGINTERNINLINE VALUE 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char *netxpert_InputArc___str__(netxpert::InputArc *self){
       static char tmp [1024];
       sprintf(tmp,"InputArc('%s',%s,%s,%g,%g,'%s')", self->extArcID.c_str(), self->extFromNode.c_str(),
                                        self->extToNode.c_str(), self->cost, self->capacity,
                                        self->oneway.c_str());
       return tmp;
   }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (VALUE obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE VALUE
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE VALUE
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (VALUE obj, bool *val)
{
  if (obj == Qtrue) {
    if (val) *val = true;
    return SWIG_OK;
  } else if (obj == Qfalse) {
    if (val) *val = false;
    return SWIG_OK;
  } else {
    int res = 0;
    if (SWIG_AsVal_int (obj, &res) == SWIG_OK) {    
      if (val) *val = res ? true : false;
      return SWIG_OK;
    }
  }  
  return SWIG_TypeError;
}

static swig_class SwigClassGC_VALUE;


/*
  Document-method: Rbnetxpert::GC_VALUE.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_inspect(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::GC_VALUE.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_GC_VALUE_to_s(int argc, VALUE *argv, VALUE self) {
  swig::GC_VALUE *arg1 = (swig::GC_VALUE *) 0 ;
  swig::GC_VALUE r1 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  r1 = self; arg1 = &r1;
  result = (VALUE)((swig::GC_VALUE const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassConstIterator;

SWIGINTERN void
free_swig_ConstIterator(swig::ConstIterator *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ConstIterator_value(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","value", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (VALUE)((swig::ConstIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ConstIterator.dup

  call-seq:
    dup -> ConstIterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ConstIterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ConstIterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ConstIterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  result = (VALUE)((swig::ConstIterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.next", 
    "    swig::ConstIterator * ConstIterator.next(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::ConstIterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  try {
    result = (swig::ConstIterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_ConstIterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ConstIterator.previous", 
    "    swig::ConstIterator * ConstIterator.previous(size_t n)\n"
    "    swig::ConstIterator * ConstIterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ConstIterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = (bool)((swig::ConstIterator const *)arg1)->operator ==((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ConstIterator.+

  call-seq:
    +(n) -> ConstIterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ConstIterator.-

  call-seq:
    -(n) -> ConstIterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::ConstIterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::ConstIterator *)((swig::ConstIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__ConstIterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ConstIterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::ConstIterator *arg1 = (swig::ConstIterator *) 0 ;
  swig::ConstIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__ConstIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::ConstIterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::ConstIterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__ConstIterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::ConstIterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::ConstIterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::ConstIterator * >(argp2);
  result = ((swig::ConstIterator const *)arg1)->operator -((swig::ConstIterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ConstIterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__ConstIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstIterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::ConstIterator const &x)\n");
  
  return Qnil;
}


static swig_class SwigClassIterator;

SWIGINTERN VALUE
_wrap_Iterator_valuee___(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  VALUE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE temp2 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","setValue", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  temp2 = static_cast< VALUE >(argv[0]);
  arg2 = &temp2;
  result = (VALUE)(arg1)->setValue((VALUE const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::Iterator.dup

  call-seq:
    dup -> Iterator

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_Iterator_dup(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (swig::Iterator *)((swig::Iterator const *)arg1)->dup();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","next", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->next(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_next__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","next", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_next(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_next__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_next__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.next", 
    "    swig::Iterator * Iterator.next(size_t n)\n"
    "    swig::Iterator * Iterator.next()\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "size_t","previous", 2, argv[0] ));
  } 
  arg2 = static_cast< size_t >(val2);
  result = (swig::Iterator *)(arg1)->previous(arg2);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator_previous__SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator *","previous", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  try {
    result = (swig::Iterator *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator_previous(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Iterator_previous__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator_previous__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "Iterator.previous", 
    "    swig::Iterator * Iterator.previous(size_t n)\n"
    "    swig::Iterator * Iterator.previous()\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::Iterator.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_Iterator_inspect(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->inspect();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::Iterator.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_Iterator_to_s(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  result = (VALUE)((swig::Iterator const *)arg1)->to_s();
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::Iterator.==

  call-seq:
    ==(x) -> bool

Equality comparison operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___eq__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator ==", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator ==", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator ==", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = (bool)((swig::Iterator const *)arg1)->operator ==((swig::Iterator const &)*arg2);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::Iterator.+

  call-seq:
    +(n) -> Iterator

Add operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___add__(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator +", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator +", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::Iterator.-

  call-seq:
    -(n) -> Iterator
    -(x) -> ptrdiff_t

Substraction operator.
*/
SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_0(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::Iterator *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "ptrdiff_t","operator -", 2, argv[0] ));
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::Iterator *)((swig::Iterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_Ruby_ExceptionType(NULL, Qnil);
      SWIG_fail;
    }
  }
  
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__Iterator, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Iterator___sub____SWIG_1(int argc, VALUE *argv, VALUE self) {
  swig::Iterator *arg1 = (swig::Iterator *) 0 ;
  swig::Iterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  ptrdiff_t result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__Iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "swig::Iterator const *","operator -", 1, self )); 
  }
  arg1 = reinterpret_cast< swig::Iterator * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_swig__Iterator,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "swig::Iterator const &","operator -", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "swig::Iterator const &","operator -", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< swig::Iterator * >(argp2);
  result = ((swig::Iterator const *)arg1)->operator -((swig::Iterator const &)*arg2);
  vresult = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_Iterator___sub__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_swig__Iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Iterator___sub____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__Iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Iterator___sub____SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "__sub__.new", 
    "    __sub__.new(ptrdiff_t n)\n"
    "    __sub__.new(swig::Iterator const &x)\n");
  
  return Qnil;
}


SWIGINTERN void
free_swig_Iterator(swig::Iterator *arg1) {
    delete arg1;
}

static swig_class SwigClassInputArcs;


/*
  Document-method: Rbnetxpert::InputArcs.dup

  call-seq:
    dup -> InputArcs

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_InputArcs_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *)std_vector_Sl_netxpert_InputArc_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_InputArcs_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.to_a

  call-seq:
    to_a -> VALUE

Convert InputArcs to an Array.
*/
SWIGINTERN VALUE
_wrap_InputArcs_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_InputArcs_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  std::vector< netxpert::InputArc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.each

  call-seq:
    each -> InputArcs

Iterate thru each element in the InputArcs.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_InputArcs_each(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *)std_vector_Sl_netxpert_InputArc_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.select

  call-seq:
    select -> InputArcs

Iterate thru each element in the InputArcs and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_InputArcs_select(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *)std_vector_Sl_netxpert_InputArc_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_InputArcs_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg____delete2__(arg1,(netxpert::InputArc const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.reject!

  call-seq:
    reject! -> InputArcs

Iterate thru each element in the InputArcs and reject those that fail a condition.  A block must be provided.  InputArcs is modified in place.
*/
SWIGINTERN VALUE
_wrap_InputArcs_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *)std_vector_Sl_netxpert_InputArc_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.push

  call-seq:
    push(e) -> InputArc

Add an element at the end of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_push(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::InputArc >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp2);
  result = std_vector_Sl_netxpert_InputArc_Sg__push(arg1,(netxpert::InputArc const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InputArc >::value_type(static_cast< const std::vector< netxpert::InputArc >::value_type& >(result))), SWIGTYPE_p_netxpert__InputArc, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.reject

  call-seq:
    reject -> InputArcs

Iterate thru each element in the InputArcs and reject those that fail a condition returning a new InputArcs.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_InputArcs_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *)std_vector_Sl_netxpert_InputArc_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_InputArcs_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__at((std::vector< netxpert::InputArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_InputArcs___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  std::vector< netxpert::InputArc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg____getitem____SWIG_0((std::vector< netxpert::InputArc > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg____getitem____SWIG_1((std::vector< netxpert::InputArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg____getitem____SWIG_2((std::vector< netxpert::InputArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputArcs___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InputArcs___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_InputArcs___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InputArcs___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< netxpert::InputArc >::difference_type i, std::vector< netxpert::InputArc >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< netxpert::InputArc >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_InputArcs___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  std::vector< netxpert::InputArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg____setitem____SWIG_0(arg1,arg2,(netxpert::InputArc const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  std::vector< netxpert::InputArc >::difference_type arg3 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val3);
  {
    std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > *ptr = (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputArcs___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__InputArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InputArcs___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InputArcs___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< netxpert::InputArc >::difference_type i, std::vector< netxpert::InputArc >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< netxpert::InputArc >::difference_type i, std::vector< netxpert::InputArc >::difference_type j, std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputArc_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.insert

  call-seq:
    insert(pos, argc) -> InputArcs
    insert(pos, x) -> std::vector< netxpert::InputArc >::iterator
    insert(pos, n, x)

Insert one or more new elements in the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *)std_vector_Sl_netxpert_InputArc_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.unshift

  call-seq:
    unshift(argc) -> InputArcs

Add one or more elements at the beginning of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *)std_vector_Sl_netxpert_InputArc_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InputArcs__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< netxpert::InputArc > *)new std::vector< netxpert::InputArc >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InputArcs__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< netxpert::InputArc > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > *ptr = (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const &","vector<(netxpert::InputArc)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc > const &","vector<(netxpert::InputArc)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< netxpert::InputArc > *)new std::vector< netxpert::InputArc >((std::vector< netxpert::InputArc > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.empty?

  call-seq:
    empty? -> bool

Check if the InputArcs is empty or not.
*/
SWIGINTERN VALUE
_wrap_InputArcs_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (bool)((std::vector< netxpert::InputArc > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.size

  call-seq:
    size -> std::vector< netxpert::InputArc >::size_type

Size or Length of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_size(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = ((std::vector< netxpert::InputArc > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.clear

  call-seq:
    clear

Clear InputArcs contents.
*/
SWIGINTERN VALUE
_wrap_InputArcs_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< netxpert::InputArc > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = ((std::vector< netxpert::InputArc > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InputArc >::allocator_type(static_cast< const std::vector< netxpert::InputArc >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_netxpert__InputArc_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.begin

  call-seq:
    begin -> std::vector< netxpert::InputArc >::iterator

Return an iterator to the beginning of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.end

  call-seq:
    end -> std::vector< netxpert::InputArc >::iterator

Return an iterator to past the end of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_end(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.rbegin

  call-seq:
    rbegin -> std::vector< netxpert::InputArc >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputArc >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.rend

  call-seq:
    rend -> std::vector< netxpert::InputArc >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputArc >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InputArcs__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< netxpert::InputArc > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::size_type","vector<(netxpert::InputArc)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::InputArc >::size_type >(val1);
  result = (std::vector< netxpert::InputArc > *)new std::vector< netxpert::InputArc >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.erase

  call-seq:
    erase(pos) -> std::vector< netxpert::InputArc >::iterator
    erase(first, last) -> std::vector< netxpert::InputArc >::iterator

Delete a portion of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< netxpert::InputArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::iterator arg2 ;
  std::vector< netxpert::InputArc >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< netxpert::InputArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputArcs_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_InputArcs_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_InputArcs_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "InputArcs.erase", 
    "    std::vector< netxpert::InputArc >::iterator InputArcs.erase(std::vector< netxpert::InputArc >::iterator pos)\n"
    "    std::vector< netxpert::InputArc >::iterator InputArcs.erase(std::vector< netxpert::InputArc >::iterator first, std::vector< netxpert::InputArc >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_InputArcs_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_InputArcs_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_InputArcs__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc >::size_type arg1 ;
  std::vector< netxpert::InputArc >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::InputArc > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::size_type","vector<(netxpert::InputArc)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::InputArc >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","vector<(netxpert::InputArc)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","vector<(netxpert::InputArc)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp2);
  result = (std::vector< netxpert::InputArc > *)new std::vector< netxpert::InputArc >(arg1,(std::vector< netxpert::InputArc >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_InputArcs(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_InputArcs__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InputArcs__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InputArcs__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__InputArc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InputArcs__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "InputArcs.new", 
    "    InputArcs.new()\n"
    "    InputArcs.new(std::vector< netxpert::InputArc > const &)\n"
    "    InputArcs.new(std::vector< netxpert::InputArc >::size_type size)\n"
    "    InputArcs.new(std::vector< netxpert::InputArc >::size_type size, std::vector< netxpert::InputArc >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.front

  call-seq:
    front -> InputArc

Return the first element in InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_front(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (std::vector< netxpert::InputArc >::value_type *) &((std::vector< netxpert::InputArc > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.back

  call-seq:
    back -> InputArc

Return the last element in InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_back(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = (std::vector< netxpert::InputArc >::value_type *) &((std::vector< netxpert::InputArc > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.assign

  call-seq:
    assign(n, x)

Assign a new InputArcs or portion of it.
*/
SWIGINTERN VALUE
_wrap_InputArcs_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::size_type arg2 ;
  std::vector< netxpert::InputArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< netxpert::InputArc >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::size_type arg2 ;
  std::vector< netxpert::InputArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< netxpert::InputArc >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputArcs_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InputArcs_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__InputArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InputArcs_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "InputArcs.resize", 
    "    void InputArcs.resize(std::vector< netxpert::InputArc >::size_type new_size)\n"
    "    void InputArcs.resize(std::vector< netxpert::InputArc >::size_type new_size, std::vector< netxpert::InputArc >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.insert

  call-seq:
    insert(pos, argc) -> InputArcs
    insert(pos, x) -> std::vector< netxpert::InputArc >::iterator
    insert(pos, n, x)

Insert one or more new elements in the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::iterator arg2 ;
  std::vector< netxpert::InputArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< netxpert::InputArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< netxpert::InputArc >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArcs_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::iterator arg2 ;
  std::vector< netxpert::InputArc >::size_type arg3 ;
  std::vector< netxpert::InputArc >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputArc >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_netxpert__InputArc,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputArc >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< netxpert::InputArc >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< netxpert::InputArc >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputArcs_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__InputArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InputArcs_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_InputArcs_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_InputArcs_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputArc >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_netxpert__InputArc, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InputArcs_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< netxpert::InputArc >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< netxpert::InputArc >::iterator pos, std::vector< netxpert::InputArc >::value_type const &x)\n"
    "    void insert(std::vector< netxpert::InputArc >::iterator pos, std::vector< netxpert::InputArc >::size_type n, std::vector< netxpert::InputArc >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.reserve

  call-seq:
    reserve(n)

Reserve memory in the InputArcs for a number of elements.
*/
SWIGINTERN VALUE
_wrap_InputArcs_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  std::vector< netxpert::InputArc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputArc >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArcs.capacity

  call-seq:
    capacity -> std::vector< netxpert::InputArc >::size_type

Reserved capacity of the InputArcs.
*/
SWIGINTERN VALUE
_wrap_InputArcs_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputArc > *arg1 = (std::vector< netxpert::InputArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputArc >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputArc > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputArc > * >(argp1);
  result = ((std::vector< netxpert::InputArc > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_netxpert_InputArc_Sg_(std::vector< netxpert::InputArc > *arg1) {
    delete arg1;
}

static swig_class SwigClassInputNodes;


/*
  Document-method: Rbnetxpert::InputNodes.dup

  call-seq:
    dup -> InputNodes

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_InputNodes_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *)std_vector_Sl_netxpert_InputNode_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_InputNodes_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.to_a

  call-seq:
    to_a -> VALUE

Convert InputNodes to an Array.
*/
SWIGINTERN VALUE
_wrap_InputNodes_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_InputNodes_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  std::vector< netxpert::InputNode >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.each

  call-seq:
    each -> InputNodes

Iterate thru each element in the InputNodes.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_InputNodes_each(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *)std_vector_Sl_netxpert_InputNode_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.select

  call-seq:
    select -> InputNodes

Iterate thru each element in the InputNodes and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_InputNodes_select(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *)std_vector_Sl_netxpert_InputNode_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_InputNodes_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg____delete2__(arg1,(netxpert::InputNode const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.reject!

  call-seq:
    reject! -> InputNodes

Iterate thru each element in the InputNodes and reject those that fail a condition.  A block must be provided.  InputNodes is modified in place.
*/
SWIGINTERN VALUE
_wrap_InputNodes_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *)std_vector_Sl_netxpert_InputNode_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.push

  call-seq:
    push(e) -> InputNode

Add an element at the end of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_push(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::InputNode >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp2);
  result = std_vector_Sl_netxpert_InputNode_Sg__push(arg1,(netxpert::InputNode const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InputNode >::value_type(static_cast< const std::vector< netxpert::InputNode >::value_type& >(result))), SWIGTYPE_p_netxpert__InputNode, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.reject

  call-seq:
    reject -> InputNodes

Iterate thru each element in the InputNodes and reject those that fail a condition returning a new InputNodes.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_InputNodes_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *)std_vector_Sl_netxpert_InputNode_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_InputNodes_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__at((std::vector< netxpert::InputNode > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_InputNodes___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  std::vector< netxpert::InputNode >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg____getitem____SWIG_0((std::vector< netxpert::InputNode > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg____getitem____SWIG_1((std::vector< netxpert::InputNode > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg____getitem____SWIG_2((std::vector< netxpert::InputNode > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputNodes___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InputNodes___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_InputNodes___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_InputNodes___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< netxpert::InputNode >::difference_type i, std::vector< netxpert::InputNode >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< netxpert::InputNode >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_InputNodes___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  std::vector< netxpert::InputNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg____setitem____SWIG_0(arg1,arg2,(netxpert::InputNode const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  std::vector< netxpert::InputNode >::difference_type arg3 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val3);
  {
    std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > > *ptr = (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputNodes___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__InputNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InputNodes___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InputNodes___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< netxpert::InputNode >::difference_type i, std::vector< netxpert::InputNode >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< netxpert::InputNode >::difference_type i, std::vector< netxpert::InputNode >::difference_type j, std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_InputNode_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.insert

  call-seq:
    insert(pos, argc) -> InputNodes
    insert(pos, x) -> std::vector< netxpert::InputNode >::iterator
    insert(pos, n, x)

Insert one or more new elements in the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *)std_vector_Sl_netxpert_InputNode_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.unshift

  call-seq:
    unshift(argc) -> InputNodes

Add one or more elements at the beginning of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *)std_vector_Sl_netxpert_InputNode_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InputNodes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< netxpert::InputNode > *)new std::vector< netxpert::InputNode >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InputNodes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< netxpert::InputNode > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > > *ptr = (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const &","vector<(netxpert::InputNode)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode > const &","vector<(netxpert::InputNode)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< netxpert::InputNode > *)new std::vector< netxpert::InputNode >((std::vector< netxpert::InputNode > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.empty?

  call-seq:
    empty? -> bool

Check if the InputNodes is empty or not.
*/
SWIGINTERN VALUE
_wrap_InputNodes_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (bool)((std::vector< netxpert::InputNode > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.size

  call-seq:
    size -> std::vector< netxpert::InputNode >::size_type

Size or Length of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_size(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = ((std::vector< netxpert::InputNode > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.clear

  call-seq:
    clear

Clear InputNodes contents.
*/
SWIGINTERN VALUE
_wrap_InputNodes_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< netxpert::InputNode > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = ((std::vector< netxpert::InputNode > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InputNode >::allocator_type(static_cast< const std::vector< netxpert::InputNode >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_netxpert__InputNode_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.begin

  call-seq:
    begin -> std::vector< netxpert::InputNode >::iterator

Return an iterator to the beginning of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.end

  call-seq:
    end -> std::vector< netxpert::InputNode >::iterator

Return an iterator to past the end of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_end(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.rbegin

  call-seq:
    rbegin -> std::vector< netxpert::InputNode >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputNode >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.rend

  call-seq:
    rend -> std::vector< netxpert::InputNode >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputNode >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_InputNodes__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< netxpert::InputNode > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::size_type","vector<(netxpert::InputNode)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::InputNode >::size_type >(val1);
  result = (std::vector< netxpert::InputNode > *)new std::vector< netxpert::InputNode >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.erase

  call-seq:
    erase(pos) -> std::vector< netxpert::InputNode >::iterator
    erase(first, last) -> std::vector< netxpert::InputNode >::iterator

Delete a portion of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< netxpert::InputNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::iterator arg2 ;
  std::vector< netxpert::InputNode >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< netxpert::InputNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputNodes_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_InputNodes_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_InputNodes_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "InputNodes.erase", 
    "    std::vector< netxpert::InputNode >::iterator InputNodes.erase(std::vector< netxpert::InputNode >::iterator pos)\n"
    "    std::vector< netxpert::InputNode >::iterator InputNodes.erase(std::vector< netxpert::InputNode >::iterator first, std::vector< netxpert::InputNode >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_InputNodes_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_InputNodes_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_InputNodes__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode >::size_type arg1 ;
  std::vector< netxpert::InputNode >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::InputNode > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::size_type","vector<(netxpert::InputNode)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::InputNode >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","vector<(netxpert::InputNode)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","vector<(netxpert::InputNode)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp2);
  result = (std::vector< netxpert::InputNode > *)new std::vector< netxpert::InputNode >(arg1,(std::vector< netxpert::InputNode >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_InputNodes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_InputNodes__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_InputNodes__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_InputNodes__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__InputNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_InputNodes__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "InputNodes.new", 
    "    InputNodes.new()\n"
    "    InputNodes.new(std::vector< netxpert::InputNode > const &)\n"
    "    InputNodes.new(std::vector< netxpert::InputNode >::size_type size)\n"
    "    InputNodes.new(std::vector< netxpert::InputNode >::size_type size, std::vector< netxpert::InputNode >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.front

  call-seq:
    front -> InputNode

Return the first element in InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_front(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (std::vector< netxpert::InputNode >::value_type *) &((std::vector< netxpert::InputNode > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__InputNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.back

  call-seq:
    back -> InputNode

Return the last element in InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_back(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = (std::vector< netxpert::InputNode >::value_type *) &((std::vector< netxpert::InputNode > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__InputNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.assign

  call-seq:
    assign(n, x)

Assign a new InputNodes or portion of it.
*/
SWIGINTERN VALUE
_wrap_InputNodes_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::size_type arg2 ;
  std::vector< netxpert::InputNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< netxpert::InputNode >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::size_type arg2 ;
  std::vector< netxpert::InputNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< netxpert::InputNode >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputNodes_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InputNodes_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__InputNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InputNodes_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "InputNodes.resize", 
    "    void InputNodes.resize(std::vector< netxpert::InputNode >::size_type new_size)\n"
    "    void InputNodes.resize(std::vector< netxpert::InputNode >::size_type new_size, std::vector< netxpert::InputNode >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.insert

  call-seq:
    insert(pos, argc) -> InputNodes
    insert(pos, x) -> std::vector< netxpert::InputNode >::iterator
    insert(pos, n, x)

Insert one or more new elements in the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::iterator arg2 ;
  std::vector< netxpert::InputNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< netxpert::InputNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< netxpert::InputNode >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::InputNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNodes_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::iterator arg2 ;
  std::vector< netxpert::InputNode >::size_type arg3 ;
  std::vector< netxpert::InputNode >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::InputNode >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_netxpert__InputNode,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::InputNode >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< netxpert::InputNode >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< netxpert::InputNode >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_InputNodes_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__InputNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InputNodes_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_InputNodes_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_InputNodes_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::InputNode,std::allocator< netxpert::InputNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::InputNode >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_netxpert__InputNode, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_InputNodes_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< netxpert::InputNode >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< netxpert::InputNode >::iterator pos, std::vector< netxpert::InputNode >::value_type const &x)\n"
    "    void insert(std::vector< netxpert::InputNode >::iterator pos, std::vector< netxpert::InputNode >::size_type n, std::vector< netxpert::InputNode >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.reserve

  call-seq:
    reserve(n)

Reserve memory in the InputNodes for a number of elements.
*/
SWIGINTERN VALUE
_wrap_InputNodes_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  std::vector< netxpert::InputNode >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::InputNode >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputNodes.capacity

  call-seq:
    capacity -> std::vector< netxpert::InputNode >::size_type

Reserved capacity of the InputNodes.
*/
SWIGINTERN VALUE
_wrap_InputNodes_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::InputNode > *arg1 = (std::vector< netxpert::InputNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::InputNode >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::InputNode > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::InputNode > * >(argp1);
  result = ((std::vector< netxpert::InputNode > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_netxpert_InputNode_Sg_(std::vector< netxpert::InputNode > *arg1) {
    delete arg1;
}

static swig_class SwigClassNewNodes;


/*
  Document-method: Rbnetxpert::NewNodes.dup

  call-seq:
    dup -> NewNodes

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_NewNodes_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *)std_vector_Sl_netxpert_NewNode_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_NewNodes_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.to_a

  call-seq:
    to_a -> VALUE

Convert NewNodes to an Array.
*/
SWIGINTERN VALUE
_wrap_NewNodes_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_NewNodes_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  std::vector< netxpert::NewNode >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.each

  call-seq:
    each -> NewNodes

Iterate thru each element in the NewNodes.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_NewNodes_each(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *)std_vector_Sl_netxpert_NewNode_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.select

  call-seq:
    select -> NewNodes

Iterate thru each element in the NewNodes and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_NewNodes_select(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *)std_vector_Sl_netxpert_NewNode_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_NewNodes_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg____delete2__(arg1,(netxpert::NewNode const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.reject!

  call-seq:
    reject! -> NewNodes

Iterate thru each element in the NewNodes and reject those that fail a condition.  A block must be provided.  NewNodes is modified in place.
*/
SWIGINTERN VALUE
_wrap_NewNodes_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *)std_vector_Sl_netxpert_NewNode_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.push

  call-seq:
    push(e) -> NewNode

Add an element at the end of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_push(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::NewNode >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp2);
  result = std_vector_Sl_netxpert_NewNode_Sg__push(arg1,(netxpert::NewNode const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::NewNode >::value_type(static_cast< const std::vector< netxpert::NewNode >::value_type& >(result))), SWIGTYPE_p_netxpert__NewNode, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.reject

  call-seq:
    reject -> NewNodes

Iterate thru each element in the NewNodes and reject those that fail a condition returning a new NewNodes.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_NewNodes_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *)std_vector_Sl_netxpert_NewNode_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_NewNodes_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__at((std::vector< netxpert::NewNode > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_NewNodes___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  std::vector< netxpert::NewNode >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg____getitem____SWIG_0((std::vector< netxpert::NewNode > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg____getitem____SWIG_1((std::vector< netxpert::NewNode > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg____getitem____SWIG_2((std::vector< netxpert::NewNode > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NewNodes___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NewNodes___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_NewNodes___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NewNodes___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< netxpert::NewNode >::difference_type i, std::vector< netxpert::NewNode >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< netxpert::NewNode >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_NewNodes___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  std::vector< netxpert::NewNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg____setitem____SWIG_0(arg1,arg2,(netxpert::NewNode const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  std::vector< netxpert::NewNode >::difference_type arg3 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val3);
  {
    std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *ptr = (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_NewNodes___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__NewNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NewNodes___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NewNodes___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< netxpert::NewNode >::difference_type i, std::vector< netxpert::NewNode >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< netxpert::NewNode >::difference_type i, std::vector< netxpert::NewNode >::difference_type j, std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_NewNode_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.insert

  call-seq:
    insert(pos, argc) -> NewNodes
    insert(pos, x) -> std::vector< netxpert::NewNode >::iterator
    insert(pos, n, x)

Insert one or more new elements in the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *)std_vector_Sl_netxpert_NewNode_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.unshift

  call-seq:
    unshift(argc) -> NewNodes

Add one or more elements at the beginning of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *)std_vector_Sl_netxpert_NewNode_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_NewNodes__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< netxpert::NewNode > *)new std::vector< netxpert::NewNode >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_NewNodes__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< netxpert::NewNode > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *ptr = (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const &","vector<(netxpert::NewNode)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode > const &","vector<(netxpert::NewNode)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< netxpert::NewNode > *)new std::vector< netxpert::NewNode >((std::vector< netxpert::NewNode > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.empty?

  call-seq:
    empty? -> bool

Check if the NewNodes is empty or not.
*/
SWIGINTERN VALUE
_wrap_NewNodes_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (bool)((std::vector< netxpert::NewNode > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.size

  call-seq:
    size -> std::vector< netxpert::NewNode >::size_type

Size or Length of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_size(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = ((std::vector< netxpert::NewNode > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.clear

  call-seq:
    clear

Clear NewNodes contents.
*/
SWIGINTERN VALUE
_wrap_NewNodes_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< netxpert::NewNode > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = ((std::vector< netxpert::NewNode > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::NewNode >::allocator_type(static_cast< const std::vector< netxpert::NewNode >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_netxpert__NewNode_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.begin

  call-seq:
    begin -> std::vector< netxpert::NewNode >::iterator

Return an iterator to the beginning of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::NewNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.end

  call-seq:
    end -> std::vector< netxpert::NewNode >::iterator

Return an iterator to past the end of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_end(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::NewNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.rbegin

  call-seq:
    rbegin -> std::vector< netxpert::NewNode >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::NewNode >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.rend

  call-seq:
    rend -> std::vector< netxpert::NewNode >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::NewNode >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_NewNodes__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< netxpert::NewNode > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::size_type","vector<(netxpert::NewNode)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::NewNode >::size_type >(val1);
  result = (std::vector< netxpert::NewNode > *)new std::vector< netxpert::NewNode >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.erase

  call-seq:
    erase(pos) -> std::vector< netxpert::NewNode >::iterator
    erase(first, last) -> std::vector< netxpert::NewNode >::iterator

Delete a portion of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< netxpert::NewNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::NewNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::iterator arg2 ;
  std::vector< netxpert::NewNode >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< netxpert::NewNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::NewNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NewNodes_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_NewNodes_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_NewNodes_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "NewNodes.erase", 
    "    std::vector< netxpert::NewNode >::iterator NewNodes.erase(std::vector< netxpert::NewNode >::iterator pos)\n"
    "    std::vector< netxpert::NewNode >::iterator NewNodes.erase(std::vector< netxpert::NewNode >::iterator first, std::vector< netxpert::NewNode >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NewNodes_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NewNodes_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NewNodes__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode >::size_type arg1 ;
  std::vector< netxpert::NewNode >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::NewNode > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::size_type","vector<(netxpert::NewNode)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::NewNode >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","vector<(netxpert::NewNode)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","vector<(netxpert::NewNode)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp2);
  result = (std::vector< netxpert::NewNode > *)new std::vector< netxpert::NewNode >(arg1,(std::vector< netxpert::NewNode >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_NewNodes(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_NewNodes__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NewNodes__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NewNodes__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__NewNode, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NewNodes__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "NewNodes.new", 
    "    NewNodes.new()\n"
    "    NewNodes.new(std::vector< netxpert::NewNode > const &)\n"
    "    NewNodes.new(std::vector< netxpert::NewNode >::size_type size)\n"
    "    NewNodes.new(std::vector< netxpert::NewNode >::size_type size, std::vector< netxpert::NewNode >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.front

  call-seq:
    front -> NewNode

Return the first element in NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_front(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (std::vector< netxpert::NewNode >::value_type *) &((std::vector< netxpert::NewNode > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.back

  call-seq:
    back -> NewNode

Return the last element in NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_back(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = (std::vector< netxpert::NewNode >::value_type *) &((std::vector< netxpert::NewNode > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.assign

  call-seq:
    assign(n, x)

Assign a new NewNodes or portion of it.
*/
SWIGINTERN VALUE
_wrap_NewNodes_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::size_type arg2 ;
  std::vector< netxpert::NewNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< netxpert::NewNode >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::size_type arg2 ;
  std::vector< netxpert::NewNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< netxpert::NewNode >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NewNodes_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NewNodes_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__NewNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NewNodes_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "NewNodes.resize", 
    "    void NewNodes.resize(std::vector< netxpert::NewNode >::size_type new_size)\n"
    "    void NewNodes.resize(std::vector< netxpert::NewNode >::size_type new_size, std::vector< netxpert::NewNode >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.insert

  call-seq:
    insert(pos, argc) -> NewNodes
    insert(pos, x) -> std::vector< netxpert::NewNode >::iterator
    insert(pos, n, x)

Insert one or more new elements in the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::iterator arg2 ;
  std::vector< netxpert::NewNode >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< netxpert::NewNode >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< netxpert::NewNode >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::NewNode >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNodes_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::iterator arg2 ;
  std::vector< netxpert::NewNode >::size_type arg3 ;
  std::vector< netxpert::NewNode >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::NewNode >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_netxpert__NewNode,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< netxpert::NewNode >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< netxpert::NewNode >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_NewNodes_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__NewNode, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NewNodes_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_NewNodes_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_NewNodes_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::NewNode >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_netxpert__NewNode, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NewNodes_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< netxpert::NewNode >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< netxpert::NewNode >::iterator pos, std::vector< netxpert::NewNode >::value_type const &x)\n"
    "    void insert(std::vector< netxpert::NewNode >::iterator pos, std::vector< netxpert::NewNode >::size_type n, std::vector< netxpert::NewNode >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.reserve

  call-seq:
    reserve(n)

Reserve memory in the NewNodes for a number of elements.
*/
SWIGINTERN VALUE
_wrap_NewNodes_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  std::vector< netxpert::NewNode >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::NewNode >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::NewNodes.capacity

  call-seq:
    capacity -> std::vector< netxpert::NewNode >::size_type

Reserved capacity of the NewNodes.
*/
SWIGINTERN VALUE
_wrap_NewNodes_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::NewNode > *arg1 = (std::vector< netxpert::NewNode > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::NewNode >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::NewNode > * >(argp1);
  result = ((std::vector< netxpert::NewNode > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_netxpert_NewNode_Sg_(std::vector< netxpert::NewNode > *arg1) {
    delete arg1;
}

static swig_class SwigClassExtSPTArcs;


/*
  Document-method: Rbnetxpert::ExtSPTArcs.dup

  call-seq:
    dup -> ExtSPTArcs

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.to_a

  call-seq:
    to_a -> VALUE

Convert ExtSPTArcs to an Array.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.each

  call-seq:
    each -> ExtSPTArcs

Iterate thru each element in the ExtSPTArcs.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_each(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.select

  call-seq:
    select -> ExtSPTArcs

Iterate thru each element in the ExtSPTArcs and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_select(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg____delete2__(arg1,(netxpert::ExtSPTreeArc const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.reject!

  call-seq:
    reject! -> ExtSPTArcs

Iterate thru each element in the ExtSPTArcs and reject those that fail a condition.  A block must be provided.  ExtSPTArcs is modified in place.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.push

  call-seq:
    push(e) -> ExtSPTreeArc

Add an element at the end of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_push(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp2);
  result = std_vector_Sl_netxpert_ExtSPTreeArc_Sg__push(arg1,(netxpert::ExtSPTreeArc const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::ExtSPTreeArc >::value_type(static_cast< const std::vector< netxpert::ExtSPTreeArc >::value_type& >(result))), SWIGTYPE_p_netxpert__ExtSPTreeArc, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.reject

  call-seq:
    reject -> ExtSPTArcs

Iterate thru each element in the ExtSPTArcs and reject those that fail a condition returning a new ExtSPTArcs.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__at((std::vector< netxpert::ExtSPTreeArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg____getitem____SWIG_0((std::vector< netxpert::ExtSPTreeArc > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg____getitem____SWIG_1((std::vector< netxpert::ExtSPTreeArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg____getitem____SWIG_2((std::vector< netxpert::ExtSPTreeArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtSPTArcs___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtSPTArcs___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_ExtSPTArcs___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ExtSPTArcs___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< netxpert::ExtSPTreeArc >::difference_type i, std::vector< netxpert::ExtSPTreeArc >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< netxpert::ExtSPTreeArc >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg____setitem____SWIG_0(arg1,arg2,(netxpert::ExtSPTreeArc const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg3 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val3);
  {
    std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *ptr = (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtSPTArcs___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtSPTreeArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtSPTArcs___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ExtSPTArcs___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< netxpert::ExtSPTreeArc >::difference_type i, std::vector< netxpert::ExtSPTreeArc >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< netxpert::ExtSPTreeArc >::difference_type i, std::vector< netxpert::ExtSPTreeArc >::difference_type j, std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.insert

  call-seq:
    insert(pos, argc) -> ExtSPTArcs
    insert(pos, x) -> std::vector< netxpert::ExtSPTreeArc >::iterator
    insert(pos, n, x)

Insert one or more new elements in the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.unshift

  call-seq:
    unshift(argc) -> ExtSPTArcs

Add one or more elements at the beginning of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)std_vector_Sl_netxpert_ExtSPTreeArc_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtSPTArcs__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< netxpert::ExtSPTreeArc > *)new std::vector< netxpert::ExtSPTreeArc >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtSPTArcs__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< netxpert::ExtSPTreeArc > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *ptr = (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const &","vector<(netxpert::ExtSPTreeArc)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc > const &","vector<(netxpert::ExtSPTreeArc)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< netxpert::ExtSPTreeArc > *)new std::vector< netxpert::ExtSPTreeArc >((std::vector< netxpert::ExtSPTreeArc > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.empty?

  call-seq:
    empty? -> bool

Check if the ExtSPTArcs is empty or not.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (bool)((std::vector< netxpert::ExtSPTreeArc > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.size

  call-seq:
    size -> std::vector< netxpert::ExtSPTreeArc >::size_type

Size or Length of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_size(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = ((std::vector< netxpert::ExtSPTreeArc > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.clear

  call-seq:
    clear

Clear ExtSPTArcs contents.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< netxpert::ExtSPTreeArc > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = ((std::vector< netxpert::ExtSPTreeArc > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::ExtSPTreeArc >::allocator_type(static_cast< const std::vector< netxpert::ExtSPTreeArc >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_netxpert__ExtSPTreeArc_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.begin

  call-seq:
    begin -> std::vector< netxpert::ExtSPTreeArc >::iterator

Return an iterator to the beginning of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtSPTreeArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.end

  call-seq:
    end -> std::vector< netxpert::ExtSPTreeArc >::iterator

Return an iterator to past the end of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_end(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtSPTreeArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.rbegin

  call-seq:
    rbegin -> std::vector< netxpert::ExtSPTreeArc >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtSPTreeArc >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.rend

  call-seq:
    rend -> std::vector< netxpert::ExtSPTreeArc >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtSPTreeArc >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtSPTArcs__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::size_type","vector<(netxpert::ExtSPTreeArc)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::ExtSPTreeArc >::size_type >(val1);
  result = (std::vector< netxpert::ExtSPTreeArc > *)new std::vector< netxpert::ExtSPTreeArc >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.erase

  call-seq:
    erase(pos) -> std::vector< netxpert::ExtSPTreeArc >::iterator
    erase(first, last) -> std::vector< netxpert::ExtSPTreeArc >::iterator

Delete a portion of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtSPTreeArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtSPTreeArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtSPTArcs_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ExtSPTArcs_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ExtSPTArcs_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ExtSPTArcs.erase", 
    "    std::vector< netxpert::ExtSPTreeArc >::iterator ExtSPTArcs.erase(std::vector< netxpert::ExtSPTreeArc >::iterator pos)\n"
    "    std::vector< netxpert::ExtSPTreeArc >::iterator ExtSPTArcs.erase(std::vector< netxpert::ExtSPTreeArc >::iterator first, std::vector< netxpert::ExtSPTreeArc >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExtSPTArcs_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExtSPTArcs_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExtSPTArcs__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc >::size_type arg1 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::ExtSPTreeArc > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::size_type","vector<(netxpert::ExtSPTreeArc)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::ExtSPTreeArc >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","vector<(netxpert::ExtSPTreeArc)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","vector<(netxpert::ExtSPTreeArc)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp2);
  result = (std::vector< netxpert::ExtSPTreeArc > *)new std::vector< netxpert::ExtSPTreeArc >(arg1,(std::vector< netxpert::ExtSPTreeArc >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ExtSPTArcs(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ExtSPTArcs__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ExtSPTArcs__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ExtSPTArcs__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__ExtSPTreeArc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ExtSPTArcs__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ExtSPTArcs.new", 
    "    ExtSPTArcs.new()\n"
    "    ExtSPTArcs.new(std::vector< netxpert::ExtSPTreeArc > const &)\n"
    "    ExtSPTArcs.new(std::vector< netxpert::ExtSPTreeArc >::size_type size)\n"
    "    ExtSPTArcs.new(std::vector< netxpert::ExtSPTreeArc >::size_type size, std::vector< netxpert::ExtSPTreeArc >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.front

  call-seq:
    front -> ExtSPTreeArc

Return the first element in ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_front(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (std::vector< netxpert::ExtSPTreeArc >::value_type *) &((std::vector< netxpert::ExtSPTreeArc > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.back

  call-seq:
    back -> ExtSPTreeArc

Return the last element in ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_back(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = (std::vector< netxpert::ExtSPTreeArc >::value_type *) &((std::vector< netxpert::ExtSPTreeArc > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.assign

  call-seq:
    assign(n, x)

Assign a new ExtSPTArcs or portion of it.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::size_type arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< netxpert::ExtSPTreeArc >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::size_type arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< netxpert::ExtSPTreeArc >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtSPTArcs_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtSPTArcs_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtSPTreeArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtSPTArcs_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ExtSPTArcs.resize", 
    "    void ExtSPTArcs.resize(std::vector< netxpert::ExtSPTreeArc >::size_type new_size)\n"
    "    void ExtSPTArcs.resize(std::vector< netxpert::ExtSPTreeArc >::size_type new_size, std::vector< netxpert::ExtSPTreeArc >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.insert

  call-seq:
    insert(pos, argc) -> ExtSPTArcs
    insert(pos, x) -> std::vector< netxpert::ExtSPTreeArc >::iterator
    insert(pos, n, x)

Insert one or more new elements in the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< netxpert::ExtSPTreeArc >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtSPTreeArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTArcs_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::iterator arg2 ;
  std::vector< netxpert::ExtSPTreeArc >::size_type arg3 ;
  std::vector< netxpert::ExtSPTreeArc >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtSPTreeArc >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_netxpert__ExtSPTreeArc,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtSPTreeArc >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< netxpert::ExtSPTreeArc >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtSPTArcs_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtSPTreeArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtSPTArcs_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_ExtSPTArcs_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_ExtSPTArcs_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtSPTreeArc >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_netxpert__ExtSPTreeArc, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ExtSPTArcs_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< netxpert::ExtSPTreeArc >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< netxpert::ExtSPTreeArc >::iterator pos, std::vector< netxpert::ExtSPTreeArc >::value_type const &x)\n"
    "    void insert(std::vector< netxpert::ExtSPTreeArc >::iterator pos, std::vector< netxpert::ExtSPTreeArc >::size_type n, std::vector< netxpert::ExtSPTreeArc >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.reserve

  call-seq:
    reserve(n)

Reserve memory in the ExtSPTArcs for a number of elements.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  std::vector< netxpert::ExtSPTreeArc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtSPTreeArc >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtSPTArcs.capacity

  call-seq:
    capacity -> std::vector< netxpert::ExtSPTreeArc >::size_type

Reserved capacity of the ExtSPTArcs.
*/
SWIGINTERN VALUE
_wrap_ExtSPTArcs_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtSPTreeArc > *arg1 = (std::vector< netxpert::ExtSPTreeArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtSPTreeArc >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtSPTreeArc > * >(argp1);
  result = ((std::vector< netxpert::ExtSPTreeArc > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_netxpert_ExtSPTreeArc_Sg_(std::vector< netxpert::ExtSPTreeArc > *arg1) {
    delete arg1;
}

static swig_class SwigClassExtNodeSupplies;


/*
  Document-method: Rbnetxpert::ExtNodeSupplies.dup

  call-seq:
    dup -> ExtNodeSupplies

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)std_vector_Sl_netxpert_ExtNodeSupply_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.to_a

  call-seq:
    to_a -> VALUE

Convert ExtNodeSupplies to an Array.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.each

  call-seq:
    each -> ExtNodeSupplies

Iterate thru each element in the ExtNodeSupplies.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_each(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)std_vector_Sl_netxpert_ExtNodeSupply_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.select

  call-seq:
    select -> ExtNodeSupplies

Iterate thru each element in the ExtNodeSupplies and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_select(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)std_vector_Sl_netxpert_ExtNodeSupply_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg____delete2__(arg1,(netxpert::ExtNodeSupply const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.reject!

  call-seq:
    reject! -> ExtNodeSupplies

Iterate thru each element in the ExtNodeSupplies and reject those that fail a condition.  A block must be provided.  ExtNodeSupplies is modified in place.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)std_vector_Sl_netxpert_ExtNodeSupply_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.push

  call-seq:
    push(e) -> ExtNodeSupply

Add an element at the end of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_push(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp2);
  result = std_vector_Sl_netxpert_ExtNodeSupply_Sg__push(arg1,(netxpert::ExtNodeSupply const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::ExtNodeSupply >::value_type(static_cast< const std::vector< netxpert::ExtNodeSupply >::value_type& >(result))), SWIGTYPE_p_netxpert__ExtNodeSupply, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.reject

  call-seq:
    reject -> ExtNodeSupplies

Iterate thru each element in the ExtNodeSupplies and reject those that fail a condition returning a new ExtNodeSupplies.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)std_vector_Sl_netxpert_ExtNodeSupply_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__at((std::vector< netxpert::ExtNodeSupply > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg____getitem____SWIG_0((std::vector< netxpert::ExtNodeSupply > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg____getitem____SWIG_1((std::vector< netxpert::ExtNodeSupply > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg____getitem____SWIG_2((std::vector< netxpert::ExtNodeSupply > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtNodeSupplies___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtNodeSupplies___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_ExtNodeSupplies___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ExtNodeSupplies___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< netxpert::ExtNodeSupply >::difference_type i, std::vector< netxpert::ExtNodeSupply >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< netxpert::ExtNodeSupply >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg____setitem____SWIG_0(arg1,arg2,(netxpert::ExtNodeSupply const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg3 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val3);
  {
    std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *ptr = (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtNodeSupplies___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtNodeSupply, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtNodeSupplies___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ExtNodeSupplies___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< netxpert::ExtNodeSupply >::difference_type i, std::vector< netxpert::ExtNodeSupply >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< netxpert::ExtNodeSupply >::difference_type i, std::vector< netxpert::ExtNodeSupply >::difference_type j, std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtNodeSupply_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.insert

  call-seq:
    insert(pos, argc) -> ExtNodeSupplies
    insert(pos, x) -> std::vector< netxpert::ExtNodeSupply >::iterator
    insert(pos, n, x)

Insert one or more new elements in the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)std_vector_Sl_netxpert_ExtNodeSupply_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.unshift

  call-seq:
    unshift(argc) -> ExtNodeSupplies

Add one or more elements at the beginning of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)std_vector_Sl_netxpert_ExtNodeSupply_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtNodeSupplies__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< netxpert::ExtNodeSupply > *)new std::vector< netxpert::ExtNodeSupply >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtNodeSupplies__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< netxpert::ExtNodeSupply > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *ptr = (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const &","vector<(netxpert::ExtNodeSupply)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply > const &","vector<(netxpert::ExtNodeSupply)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< netxpert::ExtNodeSupply > *)new std::vector< netxpert::ExtNodeSupply >((std::vector< netxpert::ExtNodeSupply > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.empty?

  call-seq:
    empty? -> bool

Check if the ExtNodeSupplies is empty or not.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (bool)((std::vector< netxpert::ExtNodeSupply > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.size

  call-seq:
    size -> std::vector< netxpert::ExtNodeSupply >::size_type

Size or Length of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_size(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = ((std::vector< netxpert::ExtNodeSupply > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.clear

  call-seq:
    clear

Clear ExtNodeSupplies contents.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< netxpert::ExtNodeSupply > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = ((std::vector< netxpert::ExtNodeSupply > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::ExtNodeSupply >::allocator_type(static_cast< const std::vector< netxpert::ExtNodeSupply >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_netxpert__ExtNodeSupply_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.begin

  call-seq:
    begin -> std::vector< netxpert::ExtNodeSupply >::iterator

Return an iterator to the beginning of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtNodeSupply >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.end

  call-seq:
    end -> std::vector< netxpert::ExtNodeSupply >::iterator

Return an iterator to past the end of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_end(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtNodeSupply >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.rbegin

  call-seq:
    rbegin -> std::vector< netxpert::ExtNodeSupply >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtNodeSupply >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.rend

  call-seq:
    rend -> std::vector< netxpert::ExtNodeSupply >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtNodeSupply >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtNodeSupplies__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< netxpert::ExtNodeSupply > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::size_type","vector<(netxpert::ExtNodeSupply)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::ExtNodeSupply >::size_type >(val1);
  result = (std::vector< netxpert::ExtNodeSupply > *)new std::vector< netxpert::ExtNodeSupply >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.erase

  call-seq:
    erase(pos) -> std::vector< netxpert::ExtNodeSupply >::iterator
    erase(first, last) -> std::vector< netxpert::ExtNodeSupply >::iterator

Delete a portion of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< netxpert::ExtNodeSupply >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtNodeSupply >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::iterator arg2 ;
  std::vector< netxpert::ExtNodeSupply >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< netxpert::ExtNodeSupply >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtNodeSupply >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtNodeSupplies_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ExtNodeSupplies_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ExtNodeSupplies_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ExtNodeSupplies.erase", 
    "    std::vector< netxpert::ExtNodeSupply >::iterator ExtNodeSupplies.erase(std::vector< netxpert::ExtNodeSupply >::iterator pos)\n"
    "    std::vector< netxpert::ExtNodeSupply >::iterator ExtNodeSupplies.erase(std::vector< netxpert::ExtNodeSupply >::iterator first, std::vector< netxpert::ExtNodeSupply >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExtNodeSupplies_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExtNodeSupplies__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply >::size_type arg1 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::ExtNodeSupply > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::size_type","vector<(netxpert::ExtNodeSupply)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::ExtNodeSupply >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","vector<(netxpert::ExtNodeSupply)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","vector<(netxpert::ExtNodeSupply)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp2);
  result = (std::vector< netxpert::ExtNodeSupply > *)new std::vector< netxpert::ExtNodeSupply >(arg1,(std::vector< netxpert::ExtNodeSupply >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ExtNodeSupplies(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ExtNodeSupplies__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ExtNodeSupplies__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ExtNodeSupplies__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__ExtNodeSupply, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ExtNodeSupplies__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ExtNodeSupplies.new", 
    "    ExtNodeSupplies.new()\n"
    "    ExtNodeSupplies.new(std::vector< netxpert::ExtNodeSupply > const &)\n"
    "    ExtNodeSupplies.new(std::vector< netxpert::ExtNodeSupply >::size_type size)\n"
    "    ExtNodeSupplies.new(std::vector< netxpert::ExtNodeSupply >::size_type size, std::vector< netxpert::ExtNodeSupply >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.front

  call-seq:
    front -> ExtNodeSupply

Return the first element in ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_front(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (std::vector< netxpert::ExtNodeSupply >::value_type *) &((std::vector< netxpert::ExtNodeSupply > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExtNodeSupply, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.back

  call-seq:
    back -> ExtNodeSupply

Return the last element in ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_back(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = (std::vector< netxpert::ExtNodeSupply >::value_type *) &((std::vector< netxpert::ExtNodeSupply > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExtNodeSupply, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.assign

  call-seq:
    assign(n, x)

Assign a new ExtNodeSupplies or portion of it.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::size_type arg2 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< netxpert::ExtNodeSupply >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::size_type arg2 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< netxpert::ExtNodeSupply >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtNodeSupplies_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtNodeSupplies_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtNodeSupply, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtNodeSupplies_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ExtNodeSupplies.resize", 
    "    void ExtNodeSupplies.resize(std::vector< netxpert::ExtNodeSupply >::size_type new_size)\n"
    "    void ExtNodeSupplies.resize(std::vector< netxpert::ExtNodeSupply >::size_type new_size, std::vector< netxpert::ExtNodeSupply >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.insert

  call-seq:
    insert(pos, argc) -> ExtNodeSupplies
    insert(pos, x) -> std::vector< netxpert::ExtNodeSupply >::iterator
    insert(pos, n, x)

Insert one or more new elements in the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::iterator arg2 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< netxpert::ExtNodeSupply >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtNodeSupply >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupplies_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::iterator arg2 ;
  std::vector< netxpert::ExtNodeSupply >::size_type arg3 ;
  std::vector< netxpert::ExtNodeSupply >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtNodeSupply >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_netxpert__ExtNodeSupply,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtNodeSupply >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< netxpert::ExtNodeSupply >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtNodeSupplies_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtNodeSupply, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtNodeSupplies_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_ExtNodeSupplies_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_ExtNodeSupplies_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtNodeSupply >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_netxpert__ExtNodeSupply, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ExtNodeSupplies_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< netxpert::ExtNodeSupply >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< netxpert::ExtNodeSupply >::iterator pos, std::vector< netxpert::ExtNodeSupply >::value_type const &x)\n"
    "    void insert(std::vector< netxpert::ExtNodeSupply >::iterator pos, std::vector< netxpert::ExtNodeSupply >::size_type n, std::vector< netxpert::ExtNodeSupply >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.reserve

  call-seq:
    reserve(n)

Reserve memory in the ExtNodeSupplies for a number of elements.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  std::vector< netxpert::ExtNodeSupply >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtNodeSupply >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtNodeSupplies.capacity

  call-seq:
    capacity -> std::vector< netxpert::ExtNodeSupply >::size_type

Reserved capacity of the ExtNodeSupplies.
*/
SWIGINTERN VALUE
_wrap_ExtNodeSupplies_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtNodeSupply > *arg1 = (std::vector< netxpert::ExtNodeSupply > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtNodeSupply >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtNodeSupply > * >(argp1);
  result = ((std::vector< netxpert::ExtNodeSupply > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_netxpert_ExtNodeSupply_Sg_(std::vector< netxpert::ExtNodeSupply > *arg1) {
    delete arg1;
}

static swig_class SwigClassExtDistribution;


/*
  Document-method: Rbnetxpert::ExtDistribution.dup

  call-seq:
    dup -> ExtDistribution

Create a duplicate of the class and unfreeze it if needed.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_dup(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","dup", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)std_vector_Sl_netxpert_ExtDistributionArc_Sg__dup(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.inspect

  call-seq:
    inspect -> VALUE

Inspect class and its contents.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_inspect(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","inspect", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__inspect(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.to_a

  call-seq:
    to_a -> VALUE

Convert ExtDistribution to an Array.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_to_a(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","to_a", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__to_a(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.to_s

  call-seq:
    to_s -> VALUE

Convert class to a String representation.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_to_s(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","to_s", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__to_s(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.slice

  call-seq:
    slice(i, j) -> VALUE

Return a slice (portion of) the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_slice(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","slice", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","slice", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","slice", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__slice(arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.each

  call-seq:
    each -> ExtDistribution

Iterate thru each element in the ExtDistribution.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_each(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","each", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)std_vector_Sl_netxpert_ExtDistributionArc_Sg__each(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.select

  call-seq:
    select -> ExtDistribution

Iterate thru each element in the ExtDistribution and select those that match a condition.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_select(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","select", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)std_vector_Sl_netxpert_ExtDistributionArc_Sg__select(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.delete_at

  call-seq:
    delete_at(i) -> VALUE

Delete an element at a certain index.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_delete_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","delete_at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","delete_at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__delete_at(arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution___delete2__(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","__delete2__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","__delete2__", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","__delete2__", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp2);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg____delete2__(arg1,(netxpert::ExtDistributionArc const &)*arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.reject!

  call-seq:
    reject! -> ExtDistribution

Iterate thru each element in the ExtDistribution and reject those that fail a condition.  A block must be provided.  ExtDistribution is modified in place.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_rejectN___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","reject_bang", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)std_vector_Sl_netxpert_ExtDistributionArc_Sg__reject_bang(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.pop

  call-seq:
    pop -> VALUE

Remove and return element at the end of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_pop(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","pop", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__pop(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.push

  call-seq:
    push(e) -> ExtDistributionArc

Add an element at the end of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_push(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::value_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","push", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","push", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","push", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp2);
  result = std_vector_Sl_netxpert_ExtDistributionArc_Sg__push(arg1,(netxpert::ExtDistributionArc const &)*arg2);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::ExtDistributionArc >::value_type(static_cast< const std::vector< netxpert::ExtDistributionArc >::value_type& >(result))), SWIGTYPE_p_netxpert__ExtDistributionArc, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.reject

  call-seq:
    reject -> ExtDistribution

Iterate thru each element in the ExtDistribution and reject those that fail a condition returning a new ExtDistribution.  A block must be provided.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_reject(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","reject", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)std_vector_Sl_netxpert_ExtDistributionArc_Sg__reject(arg1);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.at

  call-seq:
    at(i) -> VALUE

Return element at a certain index.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_at(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","at", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","at", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__at((std::vector< netxpert::ExtDistributionArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.[]

  call-seq:
    [](i, j) -> VALUE
    [](i) -> VALUE
    [](i) -> VALUE

Element accessor/slicing.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution___getitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","__getitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val3);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg____getitem____SWIG_0((std::vector< netxpert::ExtDistributionArc > const *)arg1,arg2,arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution___getitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","__getitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg____getitem____SWIG_1((std::vector< netxpert::ExtDistributionArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution___getitem____SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  VALUE arg2 = (VALUE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","__getitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  arg2 = argv[0];
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg____getitem____SWIG_2((std::vector< netxpert::ExtDistributionArc > const *)arg1,arg2);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtDistribution___getitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtDistribution___getitem____SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        return _wrap_ExtDistribution___getitem____SWIG_2(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ExtDistribution___getitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "__getitem__", 
    "    VALUE __getitem__(std::vector< netxpert::ExtDistributionArc >::difference_type i, std::vector< netxpert::ExtDistributionArc >::difference_type j)\n"
    "    VALUE __getitem__(std::vector< netxpert::ExtDistributionArc >::difference_type i)\n"
    "    VALUE __getitem__(VALUE i)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.[]=

  call-seq:
    []=(i, x) -> VALUE
    []=(i, j, v) -> VALUE

Element setter/slicing.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution___setitem____SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","__setitem__", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","__setitem__", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp3);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg____setitem____SWIG_0(arg1,arg2,(netxpert::ExtDistributionArc const &)*arg3);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution___setitem____SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg3 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","__setitem__", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","__setitem__", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","__setitem__", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val3);
  {
    std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *ptr = (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)0;
    res4 = swig::asptr(argv[2], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > const &","__setitem__", 4, argv[2] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > const &","__setitem__", 4, argv[2])); 
    }
    arg4 = ptr;
  }
  try {
    result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg____setitem____SWIG_1(arg1,arg2,arg3,(std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > const &)*arg4);
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  vresult = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return vresult;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtDistribution___setitem__(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtDistributionArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtDistribution___setitem____SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ExtDistribution___setitem____SWIG_1(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "__setitem__", 
    "    VALUE __setitem__(std::vector< netxpert::ExtDistributionArc >::difference_type i, std::vector< netxpert::ExtDistributionArc >::value_type const &x)\n"
    "    VALUE __setitem__(std::vector< netxpert::ExtDistributionArc >::difference_type i, std::vector< netxpert::ExtDistributionArc >::difference_type j, std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > const &v)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.shift

  call-seq:
    shift -> VALUE

Remove and return element at the beginning of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_shift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  VALUE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","shift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (VALUE)std_vector_Sl_netxpert_ExtDistributionArc_Sg__shift(arg1);
  vresult = result;
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.insert

  call-seq:
    insert(pos, argc) -> ExtDistribution
    insert(pos, x) -> std::vector< netxpert::ExtDistributionArc >::iterator
    insert(pos, n, x)

Insert one or more new elements in the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_insert__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::difference_type arg2 ;
  int arg3 ;
  VALUE *arg4 = (VALUE *) 0 ;
  void *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 2) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::difference_type","insert", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::difference_type >(val2);
  {
    arg3 = argc - 1;
    arg4 = argv + 1;
  }
  result = (std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)std_vector_Sl_netxpert_ExtDistributionArc_Sg__insert__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.unshift

  call-seq:
    unshift(argc) -> ExtDistribution

Add one or more elements at the beginning of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_unshift(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  int arg2 ;
  VALUE *arg3 = (VALUE *) 0 ;
  void *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *result = 0 ;
  VALUE vresult = Qnil;
  
  if (argc < 1) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","unshift", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  {
    arg2 = argc;
    arg3 = argv;
  }
  result = (std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)std_vector_Sl_netxpert_ExtDistributionArc_Sg__unshift(arg1,arg2,arg3,arg4);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtDistribution__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (std::vector< netxpert::ExtDistributionArc > *)new std::vector< netxpert::ExtDistributionArc >();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtDistribution__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< netxpert::ExtDistributionArc > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *ptr = (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *)0;
    res1 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const &","vector<(netxpert::ExtDistributionArc)>", 1, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc > const &","vector<(netxpert::ExtDistributionArc)>", 1, argv[0])); 
    }
    arg1 = ptr;
  }
  result = (std::vector< netxpert::ExtDistributionArc > *)new std::vector< netxpert::ExtDistributionArc >((std::vector< netxpert::ExtDistributionArc > const &)*arg1);
  DATA_PTR(self) = result;
  if (SWIG_IsNewObj(res1)) delete arg1;
  return self;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.empty?

  call-seq:
    empty? -> bool

Check if the ExtDistribution is empty or not.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_emptyq___(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","empty", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (bool)((std::vector< netxpert::ExtDistributionArc > const *)arg1)->empty();
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.size

  call-seq:
    size -> std::vector< netxpert::ExtDistributionArc >::size_type

Size or Length of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_size(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","size", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = ((std::vector< netxpert::ExtDistributionArc > const *)arg1)->size();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.clear

  call-seq:
    clear

Clear ExtDistribution contents.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_clear(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","clear", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  (arg1)->clear();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution_swap(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","swap", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > &","swap", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc > &","swap", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp2);
  (arg1)->swap(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution_get_allocator(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< netxpert::ExtDistributionArc > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","get_allocator", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = ((std::vector< netxpert::ExtDistributionArc > const *)arg1)->get_allocator();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::ExtDistributionArc >::allocator_type(static_cast< const std::vector< netxpert::ExtDistributionArc >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_netxpert__ExtDistributionArc_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.begin

  call-seq:
    begin -> std::vector< netxpert::ExtDistributionArc >::iterator

Return an iterator to the beginning of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_begin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","begin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (arg1)->begin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtDistributionArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.end

  call-seq:
    end -> std::vector< netxpert::ExtDistributionArc >::iterator

Return an iterator to past the end of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_end(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","end", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (arg1)->end();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtDistributionArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.rbegin

  call-seq:
    rbegin -> std::vector< netxpert::ExtDistributionArc >::reverse_iterator

Return a reverse iterator to the beginning (the end) of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_rbegin(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","rbegin", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (arg1)->rbegin();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtDistributionArc >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.rend

  call-seq:
    rend -> std::vector< netxpert::ExtDistributionArc >::reverse_iterator

Return a reverse iterator to past the end (past the beginning) of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_rend(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::reverse_iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","rend", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (arg1)->rend();
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtDistributionArc >::reverse_iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_new_ExtDistribution__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< netxpert::ExtDistributionArc > *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::size_type","vector<(netxpert::ExtDistributionArc)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::ExtDistributionArc >::size_type >(val1);
  result = (std::vector< netxpert::ExtDistributionArc > *)new std::vector< netxpert::ExtDistributionArc >(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_resize__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::size_type >(val2);
  (arg1)->resize(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.erase

  call-seq:
    erase(pos) -> std::vector< netxpert::ExtDistributionArc >::iterator
    erase(first, last) -> std::vector< netxpert::ExtDistributionArc >::iterator

Delete a portion of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_erase__SWIG_0(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  std::vector< netxpert::ExtDistributionArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","erase", 2, argv[0] ));
    }
  }
  result = (arg1)->erase(arg2);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtDistributionArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution_erase__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::iterator arg2 ;
  std::vector< netxpert::ExtDistributionArc >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  swig::Iterator *iter3 = 0 ;
  int res3 ;
  std::vector< netxpert::ExtDistributionArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","erase", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","erase", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","erase", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter3), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","erase", 3, argv[1] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","erase", 3, argv[1] ));
    }
  }
  result = (arg1)->erase(arg2,arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtDistributionArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtDistribution_erase(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ExtDistribution_erase__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter) != 0));
      if (_v) {
        swig::ConstIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), 
          swig::Iterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ExtDistribution_erase__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ExtDistribution.erase", 
    "    std::vector< netxpert::ExtDistributionArc >::iterator ExtDistribution.erase(std::vector< netxpert::ExtDistributionArc >::iterator pos)\n"
    "    std::vector< netxpert::ExtDistributionArc >::iterator ExtDistribution.erase(std::vector< netxpert::ExtDistributionArc >::iterator first, std::vector< netxpert::ExtDistributionArc >::iterator last)\n");
  
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExtDistribution_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExtDistribution_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExtDistribution__SWIG_3(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc >::size_type arg1 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< netxpert::ExtDistributionArc > *result = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  ecode1 = SWIG_AsVal_size_t(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::size_type","vector<(netxpert::ExtDistributionArc)>", 1, argv[0] ));
  } 
  arg1 = static_cast< std::vector< netxpert::ExtDistributionArc >::size_type >(val1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","vector<(netxpert::ExtDistributionArc)>", 2, argv[1] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","vector<(netxpert::ExtDistributionArc)>", 2, argv[1])); 
  }
  arg2 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp2);
  result = (std::vector< netxpert::ExtDistributionArc > *)new std::vector< netxpert::ExtDistributionArc >(arg1,(std::vector< netxpert::ExtDistributionArc >::value_type const &)*arg2);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_new_ExtDistribution(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[2];
  int ii;
  
  argc = nargs;
  if (argc > 2) SWIG_fail;
  for (ii = 0; (ii < argc); ++ii) {
    argv[ii] = args[ii];
  }
  if (argc == 0) {
    return _wrap_new_ExtDistribution__SWIG_0(nargs, args, self);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ExtDistribution__SWIG_2(nargs, args, self);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ExtDistribution__SWIG_1(nargs, args, self);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__ExtDistributionArc, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ExtDistribution__SWIG_3(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 2, "ExtDistribution.new", 
    "    ExtDistribution.new()\n"
    "    ExtDistribution.new(std::vector< netxpert::ExtDistributionArc > const &)\n"
    "    ExtDistribution.new(std::vector< netxpert::ExtDistributionArc >::size_type size)\n"
    "    ExtDistribution.new(std::vector< netxpert::ExtDistributionArc >::size_type size, std::vector< netxpert::ExtDistributionArc >::value_type const &value)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.front

  call-seq:
    front -> ExtDistributionArc

Return the first element in ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_front(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","front", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (std::vector< netxpert::ExtDistributionArc >::value_type *) &((std::vector< netxpert::ExtDistributionArc > const *)arg1)->front();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.back

  call-seq:
    back -> ExtDistributionArc

Return the last element in ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_back(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","back", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = (std::vector< netxpert::ExtDistributionArc >::value_type *) &((std::vector< netxpert::ExtDistributionArc > const *)arg1)->back();
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.assign

  call-seq:
    assign(n, x)

Assign a new ExtDistribution or portion of it.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_assign(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::size_type arg2 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","assign", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::size_type","assign", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","assign", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","assign", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< netxpert::ExtDistributionArc >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.resize

  call-seq:
    resize(new_size)
    resize(new_size, x)

Resize the size of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_resize__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::size_type arg2 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","resize", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::size_type","resize", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::size_type >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","resize", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","resize", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< netxpert::ExtDistributionArc >::value_type const &)*arg3);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtDistribution_resize(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[4];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 4) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ExtDistribution_resize__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtDistributionArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtDistribution_resize__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 4, "ExtDistribution.resize", 
    "    void ExtDistribution.resize(std::vector< netxpert::ExtDistributionArc >::size_type new_size)\n"
    "    void ExtDistribution.resize(std::vector< netxpert::ExtDistributionArc >::size_type new_size, std::vector< netxpert::ExtDistributionArc >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.insert

  call-seq:
    insert(pos, argc) -> ExtDistribution
    insert(pos, x) -> std::vector< netxpert::ExtDistributionArc >::iterator
    insert(pos, n, x)

Insert one or more new elements in the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_insert__SWIG_1(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::iterator arg2 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::iterator result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","insert", 2, argv[0] ));
    }
  }
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","insert", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","insert", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< netxpert::ExtDistributionArc >::value_type const &)*arg3);
  vresult = SWIG_NewPointerObj(swig::make_nonconst_iterator(static_cast< const std::vector< netxpert::ExtDistributionArc >::iterator & >(result),
      self),
    swig::Iterator::descriptor(),SWIG_POINTER_OWN);
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistribution_insert__SWIG_2(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::iterator arg2 ;
  std::vector< netxpert::ExtDistributionArc >::size_type arg3 ;
  std::vector< netxpert::ExtDistributionArc >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::Iterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","insert", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], SWIG_as_voidptrptr(&iter2), swig::Iterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","insert", 2, argv[0] ));
  } else {
    swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *iter_t = dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::iterator","insert", 2, argv[0] ));
    }
  }
  ecode3 = SWIG_AsVal_size_t(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::size_type","insert", 3, argv[1] ));
  } 
  arg3 = static_cast< std::vector< netxpert::ExtDistributionArc >::size_type >(val3);
  res4 = SWIG_ConvertPtr(argv[2], &argp4, SWIGTYPE_p_netxpert__ExtDistributionArc,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::value_type const &","insert", 4, argv[2] )); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::ExtDistributionArc >::value_type const &","insert", 4, argv[2])); 
  }
  arg4 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< netxpert::ExtDistributionArc >::value_type const &)*arg4);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ExtDistribution_insert(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[5];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 5) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter) != 0));
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_netxpert__ExtDistributionArc, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ExtDistribution_insert__SWIG_1(nargs, args, self);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_ExtDistribution_insert__SWIG_0(nargs, args, self);
          }
          return _wrap_ExtDistribution_insert__SWIG_0(nargs, args, self);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::ConstIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), 
        swig::Iterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::Iterator_T<std::vector< netxpert::ExtDistributionArc >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_netxpert__ExtDistributionArc, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ExtDistribution_insert__SWIG_2(nargs, args, self);
          }
        }
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 5, "insert", 
    "    void insert(std::vector< netxpert::ExtDistributionArc >::difference_type pos, int argc, VALUE *argv, ...)\n"
    "    void insert(std::vector< netxpert::ExtDistributionArc >::iterator pos, std::vector< netxpert::ExtDistributionArc >::value_type const &x)\n"
    "    void insert(std::vector< netxpert::ExtDistributionArc >::iterator pos, std::vector< netxpert::ExtDistributionArc >::size_type n, std::vector< netxpert::ExtDistributionArc >::value_type const &x)\n");
  
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.reserve

  call-seq:
    reserve(n)

Reserve memory in the ExtDistribution for a number of elements.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_reserve(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  std::vector< netxpert::ExtDistributionArc >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > *","reserve", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc >::size_type","reserve", 2, argv[0] ));
  } 
  arg2 = static_cast< std::vector< netxpert::ExtDistributionArc >::size_type >(val2);
  (arg1)->reserve(arg2);
  return Qnil;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::ExtDistribution.capacity

  call-seq:
    capacity -> std::vector< netxpert::ExtDistributionArc >::size_type

Reserved capacity of the ExtDistribution.
*/
SWIGINTERN VALUE
_wrap_ExtDistribution_capacity(int argc, VALUE *argv, VALUE self) {
  std::vector< netxpert::ExtDistributionArc > *arg1 = (std::vector< netxpert::ExtDistributionArc > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc >::size_type result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtDistributionArc > const *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< std::vector< netxpert::ExtDistributionArc > * >(argp1);
  result = ((std::vector< netxpert::ExtDistributionArc > const *)arg1)->capacity();
  vresult = SWIG_From_size_t(static_cast< size_t >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_std_vector_Sl_netxpert_ExtDistributionArc_Sg_(std::vector< netxpert::ExtDistributionArc > *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Version(int argc, VALUE *argv, VALUE self) {
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = netxpert::Version();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassColumnMap;

SWIGINTERN VALUE
_wrap_ColumnMap_arcIDColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","arcIDColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","arcIDColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","arcIDColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->arcIDColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_arcIDColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","arcIDColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->arcIDColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_fromColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","fromColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","fromColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","fromColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->fromColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_fromColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","fromColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->fromColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_toColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","toColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","toColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","toColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->toColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_toColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","toColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->toColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_costColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","costColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","costColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","costColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->costColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_costColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","costColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->costColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_capColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","capColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","capColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","capColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->capColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_capColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","capColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->capColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_onewayColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","onewayColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","onewayColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","onewayColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->onewayColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_onewayColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","onewayColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->onewayColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_nodeIDColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","nodeIDColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","nodeIDColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","nodeIDColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->nodeIDColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_nodeIDColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","nodeIDColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->nodeIDColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_supplyColName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","supplyColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","supplyColName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","supplyColName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->supplyColName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ColumnMap_supplyColName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *arg1 = (netxpert::ColumnMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ColumnMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ColumnMap *","supplyColName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ColumnMap * >(argp1);
  result = (std::string *) & ((arg1)->supplyColName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ColumnMap_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ColumnMap_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ColumnMap);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ColumnMap(int argc, VALUE *argv, VALUE self) {
  netxpert::ColumnMap *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::ColumnMap *)new netxpert::ColumnMap();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ColumnMap(netxpert::ColumnMap *arg1) {
    delete arg1;
}

static swig_class SwigClassInputNode;

SWIGINTERN VALUE
_wrap_InputNode_extNodeID_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputNode *arg1 = (netxpert::InputNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputNode *","extNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","extNodeID", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","extNodeID", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extNodeID = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNode_extNodeID_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputNode *arg1 = (netxpert::InputNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputNode *","extNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputNode * >(argp1);
  result = (std::string *) & ((arg1)->extNodeID);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNode_nodeSupply_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputNode *arg1 = (netxpert::InputNode *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputNode *","nodeSupply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputNode * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","nodeSupply", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->nodeSupply = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNode_nodeSupply_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputNode *arg1 = (netxpert::InputNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputNode *","nodeSupply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputNode * >(argp1);
  result = (double) ((arg1)->nodeSupply);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputNode___str__(int argc, VALUE *argv, VALUE self) {
  netxpert::InputNode *arg1 = (netxpert::InputNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputNode *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputNode * >(argp1);
  result = (char *)netxpert_InputNode___str__(arg1);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_InputNode_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_InputNode_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__InputNode);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_InputNode(int argc, VALUE *argv, VALUE self) {
  netxpert::InputNode *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::InputNode *)new netxpert::InputNode();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_InputNode(netxpert::InputNode *arg1) {
    delete arg1;
}

static swig_class SwigClassInputArc;

SWIGINTERN VALUE
_wrap_InputArc_extArcID_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","extArcID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","extArcID", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","extArcID", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extArcID = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_extArcID_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","extArcID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  result = (std::string *) & ((arg1)->extArcID);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_extFromNode_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","extFromNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","extFromNode", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","extFromNode", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extFromNode = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_extFromNode_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","extFromNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  result = (std::string *) & ((arg1)->extFromNode);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_extToNode_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","extToNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","extToNode", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","extToNode", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extToNode = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_extToNode_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","extToNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  result = (std::string *) & ((arg1)->extToNode);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_cost_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cost", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->cost = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_cost_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  result = (double) ((arg1)->cost);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}



/*
  Document-method: Rbnetxpert::InputArc.capacity

  call-seq:
    capacity -> double

Reserved capacity of the InputArc.
*/

/*
  Document-method: Rbnetxpert::InputArc.capacity=

  call-seq:
    capacity=(x) -> double

Reserved capacity of the InputArc.
*/
SWIGINTERN VALUE
_wrap_InputArc_capacity_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","capacity", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->capacity = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_capacity_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","capacity", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  result = (double) ((arg1)->capacity);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_oneway_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","oneway", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","oneway", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","oneway", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->oneway = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc_oneway_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","oneway", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  result = (std::string *) & ((arg1)->oneway);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InputArc___str__(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *arg1 = (netxpert::InputArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InputArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InputArc *","__str__", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InputArc * >(argp1);
  result = (char *)netxpert_InputArc___str__(arg1);
  vresult = SWIG_FromCharPtr((const char *)result);
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_InputArc_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_InputArc_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__InputArc);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_InputArc(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArc *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::InputArc *)new netxpert::InputArc();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_InputArc(netxpert::InputArc *arg1) {
    delete arg1;
}

static swig_class SwigClassNewNode;

SWIGINTERN VALUE
_wrap_NewNode_extNodeID_set(int argc, VALUE *argv, VALUE self) {
  netxpert::NewNode *arg1 = (netxpert::NewNode *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::NewNode *","extNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::NewNode * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","extNodeID", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","extNodeID", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extNodeID = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNode_extNodeID_get(int argc, VALUE *argv, VALUE self) {
  netxpert::NewNode *arg1 = (netxpert::NewNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::NewNode *","extNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::NewNode * >(argp1);
  result = (std::string *) & ((arg1)->extNodeID);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNode_coord_set(int argc, VALUE *argv, VALUE self) {
  netxpert::NewNode *arg1 = (netxpert::NewNode *) 0 ;
  Coordinate arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::NewNode *","coord", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::NewNode * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_Coordinate,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "Coordinate","coord", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "Coordinate","coord", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< Coordinate * >(argp2));
    }
  }
  if (arg1) (arg1)->coord = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNode_coord_get(int argc, VALUE *argv, VALUE self) {
  netxpert::NewNode *arg1 = (netxpert::NewNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Coordinate result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::NewNode *","coord", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::NewNode * >(argp1);
  result =  ((arg1)->coord);
  vresult = SWIG_NewPointerObj((new Coordinate(static_cast< const Coordinate& >(result))), SWIGTYPE_p_Coordinate, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNode_supply_set(int argc, VALUE *argv, VALUE self) {
  netxpert::NewNode *arg1 = (netxpert::NewNode *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::NewNode *","supply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::NewNode * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","supply", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->supply = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_NewNode_supply_get(int argc, VALUE *argv, VALUE self) {
  netxpert::NewNode *arg1 = (netxpert::NewNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__NewNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::NewNode *","supply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::NewNode * >(argp1);
  result = (double) ((arg1)->supply);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_NewNode_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_NewNode_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__NewNode);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_NewNode(int argc, VALUE *argv, VALUE self) {
  netxpert::NewNode *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::NewNode *)new netxpert::NewNode();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_NewNode(netxpert::NewNode *arg1) {
    delete arg1;
}

static swig_class SwigClassODPair;

SWIGINTERN VALUE
_wrap_ODPair_origin_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ODPair *arg1 = (netxpert::ODPair *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ODPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ODPair *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ODPair * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","origin", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->origin = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODPair_origin_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ODPair *arg1 = (netxpert::ODPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ODPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ODPair *","origin", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ODPair * >(argp1);
  result = (unsigned int) ((arg1)->origin);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODPair_dest_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ODPair *arg1 = (netxpert::ODPair *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ODPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ODPair *","dest", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ODPair * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","dest", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->dest = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ODPair_dest_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ODPair *arg1 = (netxpert::ODPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ODPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ODPair *","dest", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ODPair * >(argp1);
  result = (unsigned int) ((arg1)->dest);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ODPair_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ODPair_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ODPair);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ODPair(int argc, VALUE *argv, VALUE self) {
  netxpert::ODPair *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::ODPair *)new netxpert::ODPair();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ODPair(netxpert::ODPair *arg1) {
    delete arg1;
}

static swig_class SwigClassInternalArc;

SWIGINTERN VALUE
_wrap_InternalArc_fromNode_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InternalArc *arg1 = (netxpert::InternalArc *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InternalArc *","fromNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InternalArc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","fromNode", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->fromNode = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InternalArc_fromNode_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InternalArc *arg1 = (netxpert::InternalArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InternalArc *","fromNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InternalArc * >(argp1);
  result = (unsigned int) ((arg1)->fromNode);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InternalArc_toNode_set(int argc, VALUE *argv, VALUE self) {
  netxpert::InternalArc *arg1 = (netxpert::InternalArc *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InternalArc *","toNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InternalArc * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","toNode", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->toNode = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_InternalArc_toNode_get(int argc, VALUE *argv, VALUE self) {
  netxpert::InternalArc *arg1 = (netxpert::InternalArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__InternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::InternalArc *","toNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::InternalArc * >(argp1);
  result = (unsigned int) ((arg1)->toNode);
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_InternalArc_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_InternalArc_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__InternalArc);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_InternalArc(int argc, VALUE *argv, VALUE self) {
  netxpert::InternalArc *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::InternalArc *)new netxpert::InternalArc();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_InternalArc(netxpert::InternalArc *arg1) {
    delete arg1;
}

static swig_class SwigClassFlowCost;

SWIGINTERN VALUE
_wrap_FlowCost_intArc_set(int argc, VALUE *argv, VALUE self) {
  netxpert::FlowCost *arg1 = (netxpert::FlowCost *) 0 ;
  netxpert::InternalArc *arg2 = (netxpert::InternalArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__FlowCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::FlowCost *","intArc", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::FlowCost * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_netxpert__InternalArc, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::InternalArc *","intArc", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< netxpert::InternalArc * >(argp2);
  if (arg1) (arg1)->intArc = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FlowCost_intArc_get(int argc, VALUE *argv, VALUE self) {
  netxpert::FlowCost *arg1 = (netxpert::FlowCost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::InternalArc *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__FlowCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::FlowCost *","intArc", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::FlowCost * >(argp1);
  result = (netxpert::InternalArc *)& ((arg1)->intArc);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__InternalArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FlowCost_flow_set(int argc, VALUE *argv, VALUE self) {
  netxpert::FlowCost *arg1 = (netxpert::FlowCost *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__FlowCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::FlowCost *","flow", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::FlowCost * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","flow", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->flow = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FlowCost_flow_get(int argc, VALUE *argv, VALUE self) {
  netxpert::FlowCost *arg1 = (netxpert::FlowCost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__FlowCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::FlowCost *","flow", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::FlowCost * >(argp1);
  result = (double) ((arg1)->flow);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FlowCost_cost_set(int argc, VALUE *argv, VALUE self) {
  netxpert::FlowCost *arg1 = (netxpert::FlowCost *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__FlowCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::FlowCost *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::FlowCost * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cost", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->cost = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_FlowCost_cost_get(int argc, VALUE *argv, VALUE self) {
  netxpert::FlowCost *arg1 = (netxpert::FlowCost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__FlowCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::FlowCost *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::FlowCost * >(argp1);
  result = (double) ((arg1)->cost);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_FlowCost_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_FlowCost_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__FlowCost);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_FlowCost(int argc, VALUE *argv, VALUE self) {
  netxpert::FlowCost *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::FlowCost *)new netxpert::FlowCost();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_FlowCost(netxpert::FlowCost *arg1) {
    delete arg1;
}

static swig_class SwigClassExtNodeSupply;

SWIGINTERN VALUE
_wrap_ExtNodeSupply_extNodeID_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtNodeSupply *arg1 = (netxpert::ExtNodeSupply *) 0 ;
  netxpert::ExtNodeID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtNodeSupply, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtNodeSupply *","extNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtNodeSupply * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ExtNodeID const &","extNodeID", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ExtNodeID const &","extNodeID", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extNodeID = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupply_extNodeID_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtNodeSupply *arg1 = (netxpert::ExtNodeSupply *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExtNodeID *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtNodeSupply, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtNodeSupply *","extNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtNodeSupply * >(argp1);
  result = (netxpert::ExtNodeID *) & ((arg1)->extNodeID);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupply_supply_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtNodeSupply *arg1 = (netxpert::ExtNodeSupply *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtNodeSupply, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtNodeSupply *","supply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtNodeSupply * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","supply", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->supply = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtNodeSupply_supply_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtNodeSupply *arg1 = (netxpert::ExtNodeSupply *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtNodeSupply, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtNodeSupply *","supply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtNodeSupply * >(argp1);
  result = (double) ((arg1)->supply);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExtNodeSupply_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExtNodeSupply_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ExtNodeSupply);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExtNodeSupply(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtNodeSupply *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::ExtNodeSupply *)new netxpert::ExtNodeSupply();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ExtNodeSupply(netxpert::ExtNodeSupply *arg1) {
    delete arg1;
}

static swig_class SwigClassExternalArc;

SWIGINTERN VALUE
_wrap_ExternalArc_extFromNode_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExternalArc *arg1 = (netxpert::ExternalArc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExternalArc *","extFromNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExternalArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","extFromNode", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","extFromNode", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extFromNode = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExternalArc_extFromNode_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExternalArc *arg1 = (netxpert::ExternalArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExternalArc *","extFromNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExternalArc * >(argp1);
  result = (std::string *) & ((arg1)->extFromNode);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExternalArc_extToNode_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExternalArc *arg1 = (netxpert::ExternalArc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExternalArc *","extToNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExternalArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","extToNode", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","extToNode", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extToNode = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExternalArc_extToNode_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExternalArc *arg1 = (netxpert::ExternalArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExternalArc *","extToNode", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExternalArc * >(argp1);
  result = (std::string *) & ((arg1)->extToNode);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExternalArc_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExternalArc_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ExternalArc);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExternalArc(int argc, VALUE *argv, VALUE self) {
  netxpert::ExternalArc *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::ExternalArc *)new netxpert::ExternalArc();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ExternalArc(netxpert::ExternalArc *arg1) {
    delete arg1;
}

static swig_class SwigClassExtSPTreeArc;

SWIGINTERN VALUE
_wrap_ExtSPTreeArc_extArcID_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtSPTreeArc *arg1 = (netxpert::ExtSPTreeArc *) 0 ;
  netxpert::ExtArcID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtSPTreeArc *","extArcID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtSPTreeArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ExtArcID const &","extArcID", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ExtArcID const &","extArcID", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->extArcID = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTreeArc_extArcID_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtSPTreeArc *arg1 = (netxpert::ExtSPTreeArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExtArcID *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtSPTreeArc *","extArcID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtSPTreeArc * >(argp1);
  result = (netxpert::ExtArcID *) & ((arg1)->extArcID);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTreeArc_extArc_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtSPTreeArc *arg1 = (netxpert::ExtSPTreeArc *) 0 ;
  netxpert::ExternalArc *arg2 = (netxpert::ExternalArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtSPTreeArc *","extArc", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtSPTreeArc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ExternalArc *","extArc", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< netxpert::ExternalArc * >(argp2);
  if (arg1) (arg1)->extArc = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTreeArc_extArc_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtSPTreeArc *arg1 = (netxpert::ExtSPTreeArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExternalArc *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtSPTreeArc *","extArc", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtSPTreeArc * >(argp1);
  result = (netxpert::ExternalArc *)& ((arg1)->extArc);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTreeArc_cost_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtSPTreeArc *arg1 = (netxpert::ExtSPTreeArc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtSPTreeArc *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtSPTreeArc * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cost", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->cost = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtSPTreeArc_cost_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtSPTreeArc *arg1 = (netxpert::ExtSPTreeArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtSPTreeArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtSPTreeArc *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtSPTreeArc * >(argp1);
  result = (double) ((arg1)->cost);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExtSPTreeArc_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExtSPTreeArc_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ExtSPTreeArc);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExtSPTreeArc(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtSPTreeArc *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::ExtSPTreeArc *)new netxpert::ExtSPTreeArc();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ExtSPTreeArc(netxpert::ExtSPTreeArc *arg1) {
    delete arg1;
}

static swig_class SwigClassExtTransportationData;

SWIGINTERN VALUE
_wrap_ExtTransportationData_odm_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtTransportationData *arg1 = (netxpert::ExtTransportationData *) 0 ;
  netxpert::ExtSPTArcs *arg2 = (netxpert::ExtSPTArcs *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtTransportationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtTransportationData *","odm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtTransportationData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ExtSPTArcs *","odm", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< netxpert::ExtSPTArcs * >(argp2);
  if (arg1) (arg1)->odm = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtTransportationData_odm_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtTransportationData *arg1 = (netxpert::ExtTransportationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExtSPTArcs *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtTransportationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtTransportationData *","odm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtTransportationData * >(argp1);
  result = (netxpert::ExtSPTArcs *)& ((arg1)->odm);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtTransportationData_supply_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtTransportationData *arg1 = (netxpert::ExtTransportationData *) 0 ;
  netxpert::ExtNodeSupplies *arg2 = (netxpert::ExtNodeSupplies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtTransportationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtTransportationData *","supply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtTransportationData * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ExtNodeSupplies *","supply", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< netxpert::ExtNodeSupplies * >(argp2);
  if (arg1) (arg1)->supply = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtTransportationData_supply_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtTransportationData *arg1 = (netxpert::ExtTransportationData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExtNodeSupplies *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtTransportationData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtTransportationData *","supply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtTransportationData * >(argp1);
  result = (netxpert::ExtNodeSupplies *)& ((arg1)->supply);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExtTransportationData_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExtTransportationData_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ExtTransportationData);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExtTransportationData(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtTransportationData *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::ExtTransportationData *)new netxpert::ExtTransportationData();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ExtTransportationData(netxpert::ExtTransportationData *arg1) {
    delete arg1;
}

static swig_class SwigClassExtDistributionArc;

SWIGINTERN VALUE
_wrap_ExtDistributionArc_arcid_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  netxpert::ExtArcID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","arcid", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ExtArcID const &","arcid", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ExtArcID const &","arcid", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->arcid = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistributionArc_arcid_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExtArcID *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","arcid", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  result = (netxpert::ExtArcID *) & ((arg1)->arcid);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistributionArc_extArc_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  netxpert::ExternalArc *arg2 = (netxpert::ExternalArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","extArc", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2,SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ExternalArc *","extArc", 2, argv[0] )); 
  }
  arg2 = reinterpret_cast< netxpert::ExternalArc * >(argp2);
  if (arg1) (arg1)->extArc = *arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistributionArc_extArc_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExternalArc *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","extArc", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  result = (netxpert::ExternalArc *)& ((arg1)->extArc);
  vresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_netxpert__ExternalArc, 0 |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistributionArc_cost_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","cost", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->cost = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistributionArc_cost_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","cost", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  result = (double) ((arg1)->cost);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistributionArc_flow_set(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","flow", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "double","flow", 2, argv[0] ));
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->flow = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ExtDistributionArc_flow_get(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *arg1 = (netxpert::ExtDistributionArc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ExtDistributionArc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ExtDistributionArc *","flow", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ExtDistributionArc * >(argp1);
  result = (double) ((arg1)->flow);
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ExtDistributionArc_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ExtDistributionArc_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ExtDistributionArc);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ExtDistributionArc(int argc, VALUE *argv, VALUE self) {
  netxpert::ExtDistributionArc *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::ExtDistributionArc *)new netxpert::ExtDistributionArc();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ExtDistributionArc(netxpert::ExtDistributionArc *arg1) {
    delete arg1;
}

static swig_class SwigClassConfig;

SWIGINTERN VALUE
_wrap_Config_NetXDBPath_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NetXDBPath", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","NetXDBPath", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","NetXDBPath", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->NetXDBPath = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NetXDBPath_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NetXDBPath", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->NetXDBPath);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ResultDBPath_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ResultDBPath", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","ResultDBPath", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ResultDBPath", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ResultDBPath = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ResultDBPath_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ResultDBPath", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->ResultDBPath);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ResultDBType_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  netxpert::RESULT_DB_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ResultDBType", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::RESULT_DB_TYPE","ResultDBType", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::RESULT_DB_TYPE >(val2);
  if (arg1) (arg1)->ResultDBType = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ResultDBType_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::RESULT_DB_TYPE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ResultDBType", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::RESULT_DB_TYPE) ((arg1)->ResultDBType);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ResultTableName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ResultTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","ResultTableName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ResultTableName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ResultTableName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ResultTableName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ResultTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->ResultTableName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SPTAllDests_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SPTAllDests", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","SPTAllDests", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->SPTAllDests = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SPTAllDests_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SPTAllDests", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (bool) ((arg1)->SPTAllDests);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SPTHeapCard_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SPTHeapCard", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SPTHeapCard", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->SPTHeapCard = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SPTHeapCard_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SPTHeapCard", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (int) ((arg1)->SPTHeapCard);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SptAlgorithm_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  netxpert::SPTAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SptAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::SPTAlgorithm","SptAlgorithm", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::SPTAlgorithm >(val2);
  if (arg1) (arg1)->SptAlgorithm = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SptAlgorithm_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::SPTAlgorithm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SptAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::SPTAlgorithm) ((arg1)->SptAlgorithm);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_McfAlgorithm_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  netxpert::MCFAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","McfAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::MCFAlgorithm","McfAlgorithm", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::MCFAlgorithm >(val2);
  if (arg1) (arg1)->McfAlgorithm = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_McfAlgorithm_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::MCFAlgorithm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","McfAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::MCFAlgorithm) ((arg1)->McfAlgorithm);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_MstAlgorithm_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  netxpert::MSTAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","MstAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::MSTAlgorithm","MstAlgorithm", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::MSTAlgorithm >(val2);
  if (arg1) (arg1)->MstAlgorithm = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_MstAlgorithm_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::MSTAlgorithm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","MstAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::MSTAlgorithm) ((arg1)->MstAlgorithm);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_IsDirected_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","IsDirected", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","IsDirected", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->IsDirected = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_IsDirected_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","IsDirected", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (bool) ((arg1)->IsDirected);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ArcsTableName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ArcsTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","ArcsTableName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ArcsTableName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArcsTableName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ArcsTableName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ArcsTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->ArcsTableName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ArcsGeomColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ArcsGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","ArcsGeomColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ArcsGeomColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArcsGeomColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ArcsGeomColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ArcsGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->ArcsGeomColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ArcIDColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ArcIDColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","ArcIDColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ArcIDColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArcIDColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ArcIDColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ArcIDColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->ArcIDColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_FromNodeColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","FromNodeColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","FromNodeColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","FromNodeColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->FromNodeColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_FromNodeColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","FromNodeColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->FromNodeColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ToNodeColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ToNodeColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","ToNodeColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","ToNodeColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ToNodeColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_ToNodeColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","ToNodeColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->ToNodeColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_CostColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","CostColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","CostColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","CostColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CostColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_CostColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","CostColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->CostColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_CapColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","CapColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","CapColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","CapColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->CapColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_CapColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","CapColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->CapColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodesTableName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodesTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","NodesTableName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","NodesTableName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->NodesTableName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodesTableName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodesTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->NodesTableName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodesGeomColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodesGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","NodesGeomColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","NodesGeomColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->NodesGeomColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodesGeomColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodesGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->NodesGeomColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodeIDColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodeIDColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","NodeIDColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","NodeIDColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->NodeIDColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodeIDColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodeIDColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->NodeIDColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodeSupplyColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodeSupplyColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","NodeSupplyColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","NodeSupplyColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->NodeSupplyColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NodeSupplyColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NodeSupplyColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->NodeSupplyColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPolyTableName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPolyTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","BarrierPolyTableName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","BarrierPolyTableName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BarrierPolyTableName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPolyTableName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPolyTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->BarrierPolyTableName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPolyGeomColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPolyGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","BarrierPolyGeomColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","BarrierPolyGeomColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BarrierPolyGeomColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPolyGeomColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPolyGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->BarrierPolyGeomColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierLineTableName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierLineTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","BarrierLineTableName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","BarrierLineTableName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BarrierLineTableName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierLineTableName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierLineTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->BarrierLineTableName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierLineGeomColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierLineGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","BarrierLineGeomColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","BarrierLineGeomColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BarrierLineGeomColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierLineGeomColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierLineGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->BarrierLineGeomColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPointTableName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPointTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","BarrierPointTableName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","BarrierPointTableName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BarrierPointTableName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPointTableName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPointTableName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->BarrierPointTableName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPointGeomColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPointGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","BarrierPointGeomColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","BarrierPointGeomColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BarrierPointGeomColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_BarrierPointGeomColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","BarrierPointGeomColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->BarrierPointGeomColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_Treshold_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","Treshold", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","Treshold", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->Treshold = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_Treshold_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","Treshold", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (int) ((arg1)->Treshold);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_UseSpatialIndex_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","UseSpatialIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","UseSpatialIndex", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->UseSpatialIndex = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_UseSpatialIndex_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","UseSpatialIndex", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (bool) ((arg1)->UseSpatialIndex);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_LoadDBIntoMemory_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","LoadDBIntoMemory", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","LoadDBIntoMemory", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->LoadDBIntoMemory = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_LoadDBIntoMemory_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","LoadDBIntoMemory", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (bool) ((arg1)->LoadDBIntoMemory);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NumberOfTests_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NumberOfTests", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","NumberOfTests", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->NumberOfTests = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_NumberOfTests_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","NumberOfTests", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (int) ((arg1)->NumberOfTests);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SpatiaLiteHome_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SpatiaLiteHome", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","SpatiaLiteHome", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","SpatiaLiteHome", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->SpatiaLiteHome = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SpatiaLiteHome_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SpatiaLiteHome", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->SpatiaLiteHome);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SpatiaLiteCoreName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SpatiaLiteCoreName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","SpatiaLiteCoreName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","SpatiaLiteCoreName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->SpatiaLiteCoreName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_SpatiaLiteCoreName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","SpatiaLiteCoreName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->SpatiaLiteCoreName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_GeometryHandling_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  netxpert::GEOMETRY_HANDLING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","GeometryHandling", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::GEOMETRY_HANDLING","GeometryHandling", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::GEOMETRY_HANDLING >(val2);
  if (arg1) (arg1)->GeometryHandling = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_GeometryHandling_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::GEOMETRY_HANDLING result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","GeometryHandling", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::GEOMETRY_HANDLING) ((arg1)->GeometryHandling);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_OnewayColumnName_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","OnewayColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","OnewayColumnName", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","OnewayColumnName", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->OnewayColumnName = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_OnewayColumnName_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","OnewayColumnName", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->OnewayColumnName);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_TestCase_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  netxpert::TESTCASE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","TestCase", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::TESTCASE","TestCase", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::TESTCASE >(val2);
  if (arg1) (arg1)->TestCase = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_TestCase_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::TESTCASE result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","TestCase", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::TESTCASE) ((arg1)->TestCase);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_CleanNetwork_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","CleanNetwork", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","CleanNetwork", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->CleanNetwork = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_CleanNetwork_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","CleanNetwork", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (bool) ((arg1)->CleanNetwork);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_LogLevel_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  netxpert::LOG_LEVEL arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","LogLevel", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::LOG_LEVEL","LogLevel", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::LOG_LEVEL >(val2);
  if (arg1) (arg1)->LogLevel = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_LogLevel_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::LOG_LEVEL result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","LogLevel", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::LOG_LEVEL) ((arg1)->LogLevel);
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_LogFileFullPath_set(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","LogFileFullPath", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::string const &","LogFileFullPath", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::string const &","LogFileFullPath", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->LogFileFullPath = *arg2;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Config_LogFileFullPath_get(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = (netxpert::Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config *","LogFileFullPath", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (std::string *) & ((arg1)->LogFileFullPath);
  vresult = SWIG_From_std_string(static_cast< std::string >(*result));
  return vresult;
fail:
  return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Config_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Config_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__Config);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Config(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *result = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  result = (netxpert::Config *)new netxpert::Config();
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_Config(netxpert::Config *arg1) {
    delete arg1;
}

static swig_class SwigClassNetwork;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Network_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Network_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__Network);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Network(int argc, VALUE *argv, VALUE self) {
  netxpert::InputArcs arg1 ;
  netxpert::ColumnMap arg2 ;
  netxpert::Config *arg3 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  netxpert::Network *result = 0 ;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > *ptr = (std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > *)0;
    int res = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "netxpert::InputArcs","Network", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__ColumnMap,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ColumnMap","Network", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ColumnMap","Network", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< netxpert::ColumnMap * >(argp2));
    }
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_netxpert__Config,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "netxpert::Config &","Network", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Config &","Network", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< netxpert::Config * >(argp3);
  result = (netxpert::Network *)new netxpert::Network(arg1,arg2,*arg3);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Network_ConvertInputNetwork(int argc, VALUE *argv, VALUE self) {
  netxpert::Network *arg1 = (netxpert::Network *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Network, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Network *","ConvertInputNetwork", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Network * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","ConvertInputNetwork", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->ConvertInputNetwork(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Network_LoadStartNodes(int argc, VALUE *argv, VALUE self) {
  netxpert::Network *arg1 = (netxpert::Network *) 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *arg2 = 0 ;
  int arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  netxpert::ColumnMap *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  SwigValueWrapper< std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Network, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Network *","LoadStartNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Network * >(argp1);
  {
    std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *ptr = (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &","LoadStartNodes", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &","LoadStartNodes", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","LoadStartNodes", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","LoadStartNodes", 4, argv[2] )); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","LoadStartNodes", 5, argv[3] )); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_netxpert__ColumnMap,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "netxpert::ColumnMap &","LoadStartNodes", 6, argv[4] )); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ColumnMap &","LoadStartNodes", 6, argv[4])); 
  }
  arg6 = reinterpret_cast< netxpert::ColumnMap * >(argp6);
  ecode7 = SWIG_AsVal_bool(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "bool","LoadStartNodes", 7, argv[5] ));
  } 
  arg7 = static_cast< bool >(val7);
  result = (arg1)->LoadStartNodes((std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &)*arg2,arg3,arg4,arg5,*arg6,arg7);
  vresult = SWIG_NewPointerObj((new std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > >(static_cast< const std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > >& >(result))), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Network_LoadEndNodes(int argc, VALUE *argv, VALUE self) {
  netxpert::Network *arg1 = (netxpert::Network *) 0 ;
  std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *arg2 = 0 ;
  int arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  netxpert::ColumnMap *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  SwigValueWrapper< std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 6) || (argc > 6)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 6)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Network, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Network *","LoadEndNodes", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Network * >(argp1);
  {
    std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *ptr = (std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > *)0;
    res2 = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &","LoadEndNodes", 2, argv[0] )); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &","LoadEndNodes", 2, argv[0])); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(argv[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), Ruby_Format_TypeError( "", "int","LoadEndNodes", 3, argv[1] ));
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","LoadEndNodes", 4, argv[2] )); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","LoadEndNodes", 5, argv[3] )); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res6 = SWIG_ConvertPtr(argv[4], &argp6, SWIGTYPE_p_netxpert__ColumnMap,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), Ruby_Format_TypeError( "", "netxpert::ColumnMap &","LoadEndNodes", 6, argv[4] )); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ColumnMap &","LoadEndNodes", 6, argv[4])); 
  }
  arg6 = reinterpret_cast< netxpert::ColumnMap * >(argp6);
  ecode7 = SWIG_AsVal_bool(argv[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), Ruby_Format_TypeError( "", "bool","LoadEndNodes", 7, argv[5] ));
  } 
  arg7 = static_cast< bool >(val7);
  result = (arg1)->LoadEndNodes((std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > const &)*arg2,arg3,arg4,arg5,*arg6,arg7);
  vresult = SWIG_NewPointerObj((new std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > >(static_cast< const std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > >& >(result))), SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return vresult;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Network_GetOriginalNodeID(int argc, VALUE *argv, VALUE self) {
  netxpert::Network *arg1 = (netxpert::Network *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Network, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Network *","GetOriginalNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Network * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","GetOriginalNodeID", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->GetOriginalNodeID(arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Network_GetOriginalStartOrEndNodeID(int argc, VALUE *argv, VALUE self) {
  netxpert::Network *arg1 = (netxpert::Network *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Network, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Network *","GetOriginalStartOrEndNodeID", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Network * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","GetOriginalStartOrEndNodeID", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->GetOriginalStartOrEndNodeID(arg2);
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_Network(netxpert::Network *arg1) {
    delete arg1;
}

static swig_class SwigClassLOGGER;

SWIGINTERN void
free_netxpert_LOGGER(netxpert::LOGGER *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_LOGGER_Initialize(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_netxpert__Config,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config &","netxpert::LOGGER::Initialize", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Config &","netxpert::LOGGER::Initialize", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  netxpert::LOGGER::Initialize(*arg1);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_LOGGER_IsInitialized_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_bool(static_cast< bool >(netxpert::LOGGER::IsInitialized));
  return _val;
}


SWIGINTERN VALUE
_wrap_LOGGER_IsInitialized_set(VALUE self, VALUE _val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""netxpert::LOGGER::IsInitialized""' of type '""bool""'");
    }
    netxpert::LOGGER::IsInitialized = static_cast< bool >(val);
  }
  return _val;
fail:
  return Qnil;
}


static swig_class SwigClassDBHELPER;

SWIGINTERN VALUE
_wrap_DBHELPER_Initialize(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_netxpert__Config,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config &","netxpert::DBHELPER::Initialize", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Config &","netxpert::DBHELPER::Initialize", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  netxpert::DBHELPER::Initialize(*arg1);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DBHELPER_IsInitialized_get(VALUE self) {
  VALUE _val;
  
  _val = SWIG_From_bool(static_cast< bool >(netxpert::DBHELPER::IsInitialized));
  return _val;
}


SWIGINTERN VALUE
_wrap_DBHELPER_IsInitialized_set(VALUE self, VALUE _val) {
  {
    bool val;
    int res = SWIG_AsVal_bool(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""netxpert::DBHELPER::IsInitialized""' of type '""bool""'");
    }
    netxpert::DBHELPER::IsInitialized = static_cast< bool >(val);
  }
  return _val;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DBHELPER_CommitCurrentTransaction(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  netxpert::DBHELPER::CommitCurrentTransaction();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DBHELPER_OpenNewTransaction(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  netxpert::DBHELPER::OpenNewTransaction();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DBHELPER_LoadNetworkFromDB(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  netxpert::ColumnMap arg2 ;
  void *argp2 ;
  int res2 = 0 ;
  netxpert::InputArcs result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","netxpert::DBHELPER::LoadNetworkFromDB", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_netxpert__ColumnMap,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::ColumnMap","netxpert::DBHELPER::LoadNetworkFromDB", 2, argv[1] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ColumnMap","netxpert::DBHELPER::LoadNetworkFromDB", 2, argv[1]));
    } else {
      arg2 = *(reinterpret_cast< netxpert::ColumnMap * >(argp2));
    }
  }
  result = netxpert::DBHELPER::LoadNetworkFromDB(arg1,arg2);
  vresult = swig::from(static_cast< std::vector<netxpert::InputArc,std::allocator< netxpert::InputArc > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DBHELPER_LoadNodesFromDB(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  std::string arg2 ;
  netxpert::ColumnMap *arg3 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  netxpert::NewNodes result;
  VALUE vresult = Qnil;
  
  if ((argc < 3) || (argc > 3)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","netxpert::DBHELPER::LoadNodesFromDB", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","netxpert::DBHELPER::LoadNodesFromDB", 2, argv[1] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_netxpert__ColumnMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "netxpert::ColumnMap const &","netxpert::DBHELPER::LoadNodesFromDB", 3, argv[2] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::ColumnMap const &","netxpert::DBHELPER::LoadNodesFromDB", 3, argv[2])); 
  }
  arg3 = reinterpret_cast< netxpert::ColumnMap * >(argp3);
  result = netxpert::DBHELPER::LoadNodesFromDB(arg1,arg2,(netxpert::ColumnMap const &)*arg3);
  vresult = swig::from(static_cast< std::vector<netxpert::NewNode,std::allocator< netxpert::NewNode > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_DBHELPER_CloseConnection(int argc, VALUE *argv, VALUE self) {
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  netxpert::DBHELPER::CloseConnection();
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_DBHELPER(netxpert::DBHELPER *arg1) {
    delete arg1;
}

static swig_class SwigClassISolver;

SWIGINTERN void
free_netxpert_ISolver(netxpert::ISolver *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ISolver_Solve__SWIG_0(int argc, VALUE *argv, VALUE self) {
  netxpert::ISolver *arg1 = (netxpert::ISolver *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ISolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ISolver *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ISolver * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Solve", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->Solve(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ISolver_Solve__SWIG_1(int argc, VALUE *argv, VALUE self) {
  netxpert::ISolver *arg1 = (netxpert::ISolver *) 0 ;
  netxpert::Network *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ISolver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ISolver *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ISolver * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__Network,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::Network &","Solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Network &","Solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< netxpert::Network * >(argp2);
  (arg1)->Solve(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ISolver_Solve(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__ISolver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__Network, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ISolver_Solve__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__ISolver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ISolver_Solve__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ISolver.Solve", 
    "    void ISolver.Solve(std::string net)\n"
    "    void ISolver.Solve(netxpert::Network &net)\n");
  
  return Qnil;
}


static swig_class SwigClassMinimumSpanningTree;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MinimumSpanningTree_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MinimumSpanningTree_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__MinimumSpanningTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MinimumSpanningTree(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::MinimumSpanningTree *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_netxpert__Config,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config &","MinimumSpanningTree", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Config &","MinimumSpanningTree", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::MinimumSpanningTree *)new netxpert::MinimumSpanningTree(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_MinimumSpanningTree(netxpert::MinimumSpanningTree *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_MinimumSpanningTree_Solve__SWIG_0(int argc, VALUE *argv, VALUE self) {
  netxpert::MinimumSpanningTree *arg1 = (netxpert::MinimumSpanningTree *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinimumSpanningTree *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinimumSpanningTree * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Solve", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->Solve(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinimumSpanningTree_Solve__SWIG_1(int argc, VALUE *argv, VALUE self) {
  netxpert::MinimumSpanningTree *arg1 = (netxpert::MinimumSpanningTree *) 0 ;
  netxpert::Network *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinimumSpanningTree *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinimumSpanningTree * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__Network,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::Network &","Solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Network &","Solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< netxpert::Network * >(argp2);
  (arg1)->Solve(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MinimumSpanningTree_Solve(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__MinimumSpanningTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__Network, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinimumSpanningTree_Solve__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__MinimumSpanningTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinimumSpanningTree_Solve__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MinimumSpanningTree.Solve", 
    "    void MinimumSpanningTree.Solve(std::string net)\n"
    "    void MinimumSpanningTree.Solve(netxpert::Network &net)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinimumSpanningTree_GetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::MinimumSpanningTree *arg1 = (netxpert::MinimumSpanningTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::MSTAlgorithm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinimumSpanningTree *","GetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinimumSpanningTree * >(argp1);
  result = (netxpert::MSTAlgorithm)(arg1)->GetAlgorithm();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinimumSpanningTree_SetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::MinimumSpanningTree *arg1 = (netxpert::MinimumSpanningTree *) 0 ;
  netxpert::MSTAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinimumSpanningTree *","SetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinimumSpanningTree * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::MSTAlgorithm","SetAlgorithm", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::MSTAlgorithm >(val2);
  (arg1)->SetAlgorithm(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinimumSpanningTree_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::MinimumSpanningTree *arg1 = (netxpert::MinimumSpanningTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinimumSpanningTree *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinimumSpanningTree * >(argp1);
  result = (double)(arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinimumSpanningTree_GetMinimumSpanningTree(int argc, VALUE *argv, VALUE self) {
  netxpert::MinimumSpanningTree *arg1 = (netxpert::MinimumSpanningTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinimumSpanningTree const *","GetMinimumSpanningTree", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinimumSpanningTree * >(argp1);
  result = ((netxpert::MinimumSpanningTree const *)arg1)->GetMinimumSpanningTree();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >(static_cast< const std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >& >(result))), SWIGTYPE_p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassOriginDestinationMatrix;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OriginDestinationMatrix_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__OriginDestinationMatrix);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_OriginDestinationMatrix(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::OriginDestinationMatrix *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_netxpert__Config,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config &","OriginDestinationMatrix", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Config &","OriginDestinationMatrix", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::OriginDestinationMatrix *)new netxpert::OriginDestinationMatrix(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_OriginDestinationMatrix(netxpert::OriginDestinationMatrix *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_Solve__SWIG_0(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Solve", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->Solve(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_Solve__SWIG_1(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  netxpert::Network *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__Network,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::Network &","Solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Network &","Solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< netxpert::Network * >(argp2);
  (arg1)->Solve(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_OriginDestinationMatrix_Solve(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__Network, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OriginDestinationMatrix_Solve__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_OriginDestinationMatrix_Solve__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "OriginDestinationMatrix.Solve", 
    "    void OriginDestinationMatrix.Solve(std::string net)\n"
    "    void OriginDestinationMatrix.Solve(netxpert::Network &net)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::SPTAlgorithm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = (netxpert::SPTAlgorithm)((netxpert::OriginDestinationMatrix const *)arg1)->GetAlgorithm();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_SetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  netxpert::SPTAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix *","SetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::SPTAlgorithm","SetAlgorithm", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::SPTAlgorithm >(val2);
  (arg1)->SetAlgorithm(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetSPTHeapCard(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetSPTHeapCard", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = (int)((netxpert::OriginDestinationMatrix const *)arg1)->GetSPTHeapCard();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_SetSPTHeapCard(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix *","SetSPTHeapCard", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetSPTHeapCard", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetSPTHeapCard(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetGeometryHandling(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::GEOMETRY_HANDLING result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetGeometryHandling", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = (netxpert::GEOMETRY_HANDLING)((netxpert::OriginDestinationMatrix const *)arg1)->GetGeometryHandling();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_SetGeometryHandling(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  netxpert::GEOMETRY_HANDLING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix *","SetGeometryHandling", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::GEOMETRY_HANDLING","SetGeometryHandling", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::GEOMETRY_HANDLING >(val2);
  (arg1)->SetGeometryHandling(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetOrigins(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetOrigins", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = ((netxpert::OriginDestinationMatrix const *)arg1)->GetOrigins();
  vresult = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_SetOrigins(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix *","SetOrigins", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > &","SetOrigins", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > &","SetOrigins", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > * >(argp2);
  (arg1)->SetOrigins(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetDestinations(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetDestinations", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = ((netxpert::OriginDestinationMatrix const *)arg1)->GetDestinations();
  vresult = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_SetDestinations(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix *","SetDestinations", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > &","SetDestinations", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > &","SetDestinations", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > * >(argp2);
  (arg1)->SetDestinations(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetReachedDests(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetReachedDests", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = ((netxpert::OriginDestinationMatrix const *)arg1)->GetReachedDests();
  vresult = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetShortestPaths(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unordered_map< netxpert::ODPair,netxpert::CompressedPath > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetShortestPaths", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = ((netxpert::OriginDestinationMatrix const *)arg1)->GetShortestPaths();
  vresult = SWIG_NewPointerObj((new std::unordered_map< netxpert::ODPair,netxpert::CompressedPath >(static_cast< const std::unordered_map< netxpert::ODPair,netxpert::CompressedPath >& >(result))), SWIGTYPE_p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetODMatrix(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unordered_map< netxpert::ODPair,double > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetODMatrix", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = ((netxpert::OriginDestinationMatrix const *)arg1)->GetODMatrix();
  vresult = SWIG_NewPointerObj((new std::unordered_map< netxpert::ODPair,double >(static_cast< const std::unordered_map< netxpert::ODPair,double >& >(result))), SWIGTYPE_p_std__unordered_mapT_netxpert__ODPair_double_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  result = (double)((netxpert::OriginDestinationMatrix const *)arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrix_UncompressRoute(int argc, VALUE *argv, VALUE self) {
  netxpert::OriginDestinationMatrix *arg1 = (netxpert::OriginDestinationMatrix *) 0 ;
  unsigned int arg2 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::OriginDestinationMatrix const *","UncompressRoute", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::OriginDestinationMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","UncompressRoute", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< unsigned int,std::allocator< unsigned int > > &","UncompressRoute", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< unsigned int,std::allocator< unsigned int > > &","UncompressRoute", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp3);
  result = ((netxpert::OriginDestinationMatrix const *)arg1)->UncompressRoute(arg2,*arg3);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >(static_cast< const std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >& >(result))), SWIGTYPE_p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassShortestPathTree;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ShortestPathTree_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ShortestPathTree_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__ShortestPathTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ShortestPathTree(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ShortestPathTree *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_netxpert__Config,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config &","ShortestPathTree", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Config &","ShortestPathTree", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::ShortestPathTree *)new netxpert::ShortestPathTree(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_ShortestPathTree(netxpert::ShortestPathTree *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_ShortestPathTree_Solve__SWIG_0(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Solve", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->Solve(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_Solve__SWIG_1(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  netxpert::Network *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__Network,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::Network &","Solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Network &","Solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< netxpert::Network * >(argp2);
  (arg1)->Solve(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_ShortestPathTree_Solve(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__ShortestPathTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__Network, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ShortestPathTree_Solve__SWIG_1(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__ShortestPathTree, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ShortestPathTree_Solve__SWIG_0(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "ShortestPathTree.Solve", 
    "    void ShortestPathTree.Solve(std::string net)\n"
    "    void ShortestPathTree.Solve(netxpert::Network &net)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::SPTAlgorithm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = (netxpert::SPTAlgorithm)((netxpert::ShortestPathTree const *)arg1)->GetAlgorithm();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_SetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  netxpert::SPTAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree *","SetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::SPTAlgorithm","SetAlgorithm", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::SPTAlgorithm >(val2);
  (arg1)->SetAlgorithm(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetSPTHeapCard(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetSPTHeapCard", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = (int)((netxpert::ShortestPathTree const *)arg1)->GetSPTHeapCard();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_SetSPTHeapCard(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree *","SetSPTHeapCard", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "int","SetSPTHeapCard", 2, argv[0] ));
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetSPTHeapCard(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetGeometryHandling(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::GEOMETRY_HANDLING result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetGeometryHandling", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = (netxpert::GEOMETRY_HANDLING)((netxpert::ShortestPathTree const *)arg1)->GetGeometryHandling();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_SetGeometryHandling(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  netxpert::GEOMETRY_HANDLING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree *","SetGeometryHandling", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::GEOMETRY_HANDLING","SetGeometryHandling", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::GEOMETRY_HANDLING >(val2);
  (arg1)->SetGeometryHandling(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetOrigin(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetOrigin", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = (unsigned int)((netxpert::ShortestPathTree const *)arg1)->GetOrigin();
  vresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_SetOrigin(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree *","SetOrigin", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","SetOrigin", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->SetOrigin(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetDestinations(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetDestinations", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = ((netxpert::ShortestPathTree const *)arg1)->GetDestinations();
  vresult = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_SetDestinations(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree *","SetDestinations", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< unsigned int,std::allocator< unsigned int > > &","SetDestinations", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< unsigned int,std::allocator< unsigned int > > &","SetDestinations", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp2);
  (arg1)->SetDestinations(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetReachedDests(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetReachedDests", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = ((netxpert::ShortestPathTree const *)arg1)->GetReachedDests();
  vresult = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetShortestPaths(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::unordered_map< netxpert::ODPair,netxpert::CompressedPath > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetShortestPaths", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = ((netxpert::ShortestPathTree const *)arg1)->GetShortestPaths();
  vresult = SWIG_NewPointerObj((new std::unordered_map< netxpert::ODPair,netxpert::CompressedPath >(static_cast< const std::unordered_map< netxpert::ODPair,netxpert::CompressedPath >& >(result))), SWIGTYPE_p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  result = (double)((netxpert::ShortestPathTree const *)arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTree_UncompressRoute(int argc, VALUE *argv, VALUE self) {
  netxpert::ShortestPathTree *arg1 = (netxpert::ShortestPathTree *) 0 ;
  unsigned int arg2 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::ShortestPathTree const *","UncompressRoute", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::ShortestPathTree * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","UncompressRoute", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< unsigned int,std::allocator< unsigned int > > &","UncompressRoute", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< unsigned int,std::allocator< unsigned int > > &","UncompressRoute", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp3);
  result = ((netxpert::ShortestPathTree const *)arg1)->UncompressRoute(arg2,*arg3);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >(static_cast< const std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >& >(result))), SWIGTYPE_p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassMinCostFlow;

SWIGINTERN void
free_netxpert_MinCostFlow(netxpert::MinCostFlow *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_MinCostFlow_Solve__SWIG_0(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_string,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "string","Solve", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "string","Solve", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< string * >(argp2));
    }
  }
  (arg1)->Solve(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinCostFlow_Solve__SWIG_1(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  netxpert::Network *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_netxpert__Network,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "netxpert::Network &","Solve", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Network &","Solve", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< netxpert::Network * >(argp2);
  (arg1)->Solve(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE _wrap_MinCostFlow_Solve(int nargs, VALUE *args, VALUE self) {
  int argc;
  VALUE argv[3];
  int ii;
  
  argc = nargs + 1;
  argv[0] = self;
  if (argc > 3) SWIG_fail;
  for (ii = 1; (ii < argc); ++ii) {
    argv[ii] = args[ii-1];
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__MinCostFlow, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_string, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinCostFlow_Solve__SWIG_0(nargs, args, self);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_netxpert__MinCostFlow, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_netxpert__Network, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MinCostFlow_Solve__SWIG_1(nargs, args, self);
      }
    }
  }
  
fail:
  Ruby_Format_OverloadedError( argc, 3, "MinCostFlow.Solve", 
    "    void MinCostFlow.Solve(string net)\n"
    "    void MinCostFlow.Solve(netxpert::Network &net)\n");
  
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinCostFlow_IsDirected_set(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow *","IsDirected", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  ecode2 = SWIG_AsVal_bool(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "bool","IsDirected", 2, argv[0] ));
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->IsDirected = arg2;
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinCostFlow_IsDirected_get(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow *","IsDirected", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  result = (bool) ((arg1)->IsDirected);
  vresult = SWIG_From_bool(static_cast< bool >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinCostFlow_GetMinCostFlow(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< netxpert::FlowCost,std::allocator< netxpert::FlowCost > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow const *","GetMinCostFlow", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  result = ((netxpert::MinCostFlow const *)arg1)->GetMinCostFlow();
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::FlowCost,std::allocator< netxpert::FlowCost > >(static_cast< const std::vector< netxpert::FlowCost,std::allocator< netxpert::FlowCost > >& >(result))), SWIGTYPE_p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinCostFlow_GetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::MCFAlgorithm result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow const *","GetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  result = (netxpert::MCFAlgorithm)((netxpert::MinCostFlow const *)arg1)->GetAlgorithm();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinCostFlow_SetAlgorithm(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  netxpert::MCFAlgorithm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow *","SetAlgorithm", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "netxpert::MCFAlgorithm","SetAlgorithm", 2, argv[0] ));
  } 
  arg2 = static_cast< netxpert::MCFAlgorithm >(val2);
  (arg1)->SetAlgorithm(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinCostFlow_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::MinCostFlow *arg1 = (netxpert::MinCostFlow *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__MinCostFlow, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::MinCostFlow const *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::MinCostFlow * >(argp1);
  result = (double)((netxpert::MinCostFlow const *)arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


static swig_class SwigClassTransportation;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_Transportation_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_Transportation_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__Transportation);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_Transportation(int argc, VALUE *argv, VALUE self) {
  netxpert::Config *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::Transportation *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_netxpert__Config,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Config &","Transportation", 1, argv[0] )); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "netxpert::Config &","Transportation", 1, argv[0])); 
  }
  arg1 = reinterpret_cast< netxpert::Config * >(argp1);
  result = (netxpert::Transportation *)new netxpert::Transportation(*arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_Transportation(netxpert::Transportation *arg1) {
    delete arg1;
}

SWIGINTERN VALUE
_wrap_Transportation_GetOrigins(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation const *","GetOrigins", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  result = ((netxpert::Transportation const *)arg1)->GetOrigins();
  vresult = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_SetOrigins(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation *","SetOrigins", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  {
    res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< unsigned int,std::allocator< unsigned int > >","SetOrigins", 2, argv[0] )); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< unsigned int,std::allocator< unsigned int > >","SetOrigins", 2, argv[0]));
    } else {
      arg2 = *(reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp2));
    }
  }
  (arg1)->SetOrigins(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_GetDestinations(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation const *","GetDestinations", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  result = ((netxpert::Transportation const *)arg1)->GetDestinations();
  vresult = SWIG_NewPointerObj((new std::vector< unsigned int,std::allocator< unsigned int > >(static_cast< const std::vector< unsigned int,std::allocator< unsigned int > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_SetDestinations(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation *","SetDestinations", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[0], &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), Ruby_Format_TypeError( "", "std::vector< unsigned int,std::allocator< unsigned int > > &","SetDestinations", 2, argv[0] )); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< unsigned int,std::allocator< unsigned int > > &","SetDestinations", 2, argv[0])); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp2);
  (arg1)->SetDestinations(*arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_SetExtODMatrix(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation *","SetExtODMatrix", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  {
    std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *ptr = (std::vector<netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *)0;
    int res = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > >","SetExtODMatrix", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->SetExtODMatrix(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_SetExtNodeSupply(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation *","SetExtNodeSupply", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  {
    std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *ptr = (std::vector<netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *)0;
    int res = swig::asptr(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > >","SetExtNodeSupply", 2, argv[0] )); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->SetExtNodeSupply(arg2);
  return Qnil;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_GetExtDistribution(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  netxpert::ExtDistribution result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation const *","GetExtDistribution", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  result = ((netxpert::Transportation const *)arg1)->GetExtDistribution();
  vresult = swig::from(static_cast< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_GetJSONExtDistribution(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation const *","GetJSONExtDistribution", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  result = ((netxpert::Transportation const *)arg1)->GetJSONExtDistribution();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_GetSolverJSONResult(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation const *","GetSolverJSONResult", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  result = ((netxpert::Transportation const *)arg1)->GetSolverJSONResult();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_UncompressRoute(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  unsigned int arg2 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 2) || (argc > 2)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation const *","UncompressRoute", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), Ruby_Format_TypeError( "", "unsigned int","UncompressRoute", 2, argv[0] ));
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(argv[1], &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), Ruby_Format_TypeError( "", "std::vector< unsigned int,std::allocator< unsigned int > > &","UncompressRoute", 3, argv[1] )); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, Ruby_Format_TypeError("invalid null reference ", "std::vector< unsigned int,std::allocator< unsigned int > > &","UncompressRoute", 3, argv[1])); 
  }
  arg3 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp3);
  result = ((netxpert::Transportation const *)arg1)->UncompressRoute(arg2,*arg3);
  vresult = SWIG_NewPointerObj((new std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >(static_cast< const std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > >& >(result))), SWIGTYPE_p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t, SWIG_POINTER_OWN |  0 );
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_Transportation_Solve(int argc, VALUE *argv, VALUE self) {
  netxpert::Transportation *arg1 = (netxpert::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::Transportation *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::Transportation * >(argp1);
  (arg1)->Solve();
  return Qnil;
fail:
  return Qnil;
}


static swig_class SwigClassShortestPathTreeSimple;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_ShortestPathTreeSimple_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_ShortestPathTreeSimple_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__simple__ShortestPathTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_ShortestPathTreeSimple(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  netxpert::simple::ShortestPathTree *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","ShortestPathTree", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (netxpert::simple::ShortestPathTree *)new netxpert::simple::ShortestPathTree(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTreeSimple_Solve(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::ShortestPathTree *arg1 = (netxpert::simple::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::ShortestPathTree *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::ShortestPathTree * >(argp1);
  result = (int)(arg1)->Solve();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_ShortestPathTreeSimple_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::ShortestPathTree *arg1 = (netxpert::simple::ShortestPathTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__ShortestPathTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::ShortestPathTree *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::ShortestPathTree * >(argp1);
  result = (double)(arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_simple_ShortestPathTree(netxpert::simple::ShortestPathTree *arg1) {
    delete arg1;
}

static swig_class SwigClassOriginDestinationMatrixSimple;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_OriginDestinationMatrixSimple_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_OriginDestinationMatrixSimple_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__simple__OriginDestinationMatrix);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_OriginDestinationMatrixSimple(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  netxpert::simple::OriginDestinationMatrix *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","OriginDestinationMatrix", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (netxpert::simple::OriginDestinationMatrix *)new netxpert::simple::OriginDestinationMatrix(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrixSimple_Solve(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::OriginDestinationMatrix *arg1 = (netxpert::simple::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::OriginDestinationMatrix *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::OriginDestinationMatrix * >(argp1);
  result = (int)(arg1)->Solve();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_OriginDestinationMatrixSimple_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::OriginDestinationMatrix *arg1 = (netxpert::simple::OriginDestinationMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__OriginDestinationMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::OriginDestinationMatrix *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::OriginDestinationMatrix * >(argp1);
  result = (double)(arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_simple_OriginDestinationMatrix(netxpert::simple::OriginDestinationMatrix *arg1) {
    delete arg1;
}

static swig_class SwigClassMinimumSpanningTreeSimple;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_MinimumSpanningTreeSimple_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_MinimumSpanningTreeSimple_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__simple__MinimumSpanningTree);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_MinimumSpanningTreeSimple(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  netxpert::simple::MinimumSpanningTree *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","MinimumSpanningTree", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (netxpert::simple::MinimumSpanningTree *)new netxpert::simple::MinimumSpanningTree(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinimumSpanningTreeSimple_Solve(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::MinimumSpanningTree *arg1 = (netxpert::simple::MinimumSpanningTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::MinimumSpanningTree *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::MinimumSpanningTree * >(argp1);
  result = (int)(arg1)->Solve();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_MinimumSpanningTreeSimple_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::MinimumSpanningTree *arg1 = (netxpert::simple::MinimumSpanningTree *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__MinimumSpanningTree, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::MinimumSpanningTree *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::MinimumSpanningTree * >(argp1);
  result = (double)(arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_simple_MinimumSpanningTree(netxpert::simple::MinimumSpanningTree *arg1) {
    delete arg1;
}

static swig_class SwigClassTransportationSimple;

#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
SWIGINTERN VALUE
_wrap_TransportationSimple_allocate(VALUE self) {
#else
  SWIGINTERN VALUE
  _wrap_TransportationSimple_allocate(int argc, VALUE *argv, VALUE self) {
#endif
    
    
    VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_netxpert__simple__Transportation);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
    rb_obj_call_init(vresult, argc, argv);
#endif
    return vresult;
  }
  

SWIGINTERN VALUE
_wrap_new_TransportationSimple(int argc, VALUE *argv, VALUE self) {
  std::string arg1 ;
  netxpert::simple::Transportation *result = 0 ;
  
  if ((argc < 1) || (argc > 1)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc); SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(argv[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), Ruby_Format_TypeError( "", "std::string","Transportation", 1, argv[0] )); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (netxpert::simple::Transportation *)new netxpert::simple::Transportation(arg1);
  DATA_PTR(self) = result;
  return self;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TransportationSimple_Solve(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::Transportation *arg1 = (netxpert::simple::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::Transportation *","Solve", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::Transportation * >(argp1);
  result = (int)(arg1)->Solve();
  vresult = SWIG_From_int(static_cast< int >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TransportationSimple_GetOptimum(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::Transportation *arg1 = (netxpert::simple::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::Transportation *","GetOptimum", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::Transportation * >(argp1);
  result = (double)(arg1)->GetOptimum();
  vresult = SWIG_From_double(static_cast< double >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TransportationSimple_GetDistributionAsJSON(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::Transportation *arg1 = (netxpert::simple::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::Transportation *","GetDistributionAsJSON", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::Transportation * >(argp1);
  result = (arg1)->GetDistributionAsJSON();
  vresult = SWIG_From_std_string(static_cast< std::string >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN VALUE
_wrap_TransportationSimple_GetDistribution(int argc, VALUE *argv, VALUE self) {
  netxpert::simple::Transportation *arg1 = (netxpert::simple::Transportation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > result;
  VALUE vresult = Qnil;
  
  if ((argc < 0) || (argc > 0)) {
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc); SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_netxpert__simple__Transportation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), Ruby_Format_TypeError( "", "netxpert::simple::Transportation *","GetDistribution", 1, self )); 
  }
  arg1 = reinterpret_cast< netxpert::simple::Transportation * >(argp1);
  result = (arg1)->GetDistribution();
  vresult = swig::from(static_cast< std::vector<netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > >(result));
  return vresult;
fail:
  return Qnil;
}


SWIGINTERN void
free_netxpert_simple_Transportation(netxpert::simple::Transportation *arg1) {
    delete arg1;
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_swig__IteratorTo_p_swig__ConstIterator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((swig::ConstIterator *)  ((swig::Iterator *) x));
}
static void *_p_netxpert__MinCostFlowTo_p_netxpert__ISolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((netxpert::ISolver *)  ((netxpert::MinCostFlow *) x));
}
static void *_p_netxpert__TransportationTo_p_netxpert__ISolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((netxpert::ISolver *) (netxpert::MinCostFlow *) ((netxpert::Transportation *) x));
}
static void *_p_netxpert__OriginDestinationMatrixTo_p_netxpert__ISolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((netxpert::ISolver *)  ((netxpert::OriginDestinationMatrix *) x));
}
static void *_p_netxpert__MinimumSpanningTreeTo_p_netxpert__ISolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((netxpert::ISolver *)  ((netxpert::MinimumSpanningTree *) x));
}
static void *_p_netxpert__ShortestPathTreeTo_p_netxpert__ISolver(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((netxpert::ISolver *)  ((netxpert::ShortestPathTree *) x));
}
static void *_p_netxpert__TransportationTo_p_netxpert__MinCostFlow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((netxpert::MinCostFlow *)  ((netxpert::Transportation *) x));
}
static swig_type_info _swigt__p_Coordinate = {"_p_Coordinate", "Coordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ColumnMap = {"_p_netxpert__ColumnMap", "netxpert::ColumnMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__Config = {"_p_netxpert__Config", "netxpert::Config *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__DBHELPER = {"_p_netxpert__DBHELPER", "netxpert::DBHELPER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ExtDistributionArc = {"_p_netxpert__ExtDistributionArc", "netxpert::ExtDistributionArc *|std::vector< netxpert::ExtDistributionArc >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ExtNodeSupply = {"_p_netxpert__ExtNodeSupply", "std::vector< netxpert::ExtNodeSupply >::value_type *|netxpert::ExtNodeSupply *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ExtSPTreeArc = {"_p_netxpert__ExtSPTreeArc", "netxpert::ExtSPTreeArc *|std::vector< netxpert::ExtSPTreeArc >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ExtTransportationData = {"_p_netxpert__ExtTransportationData", "netxpert::ExtTransportationData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ExternalArc = {"_p_netxpert__ExternalArc", "netxpert::ExternalArc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__FlowCost = {"_p_netxpert__FlowCost", "netxpert::FlowCost *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ISolver = {"_p_netxpert__ISolver", "netxpert::ISolver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__InputArc = {"_p_netxpert__InputArc", "std::vector< netxpert::InputArc >::value_type *|netxpert::InputArc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__InputNode = {"_p_netxpert__InputNode", "std::vector< netxpert::InputNode >::value_type *|netxpert::InputNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__InternalArc = {"_p_netxpert__InternalArc", "netxpert::InternalArc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__LOGGER = {"_p_netxpert__LOGGER", "netxpert::LOGGER *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__MinCostFlow = {"_p_netxpert__MinCostFlow", "netxpert::MinCostFlow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__MinimumSpanningTree = {"_p_netxpert__MinimumSpanningTree", "netxpert::MinimumSpanningTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__Network = {"_p_netxpert__Network", "netxpert::Network *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__NewNode = {"_p_netxpert__NewNode", "netxpert::NewNode *|std::vector< netxpert::NewNode >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ODPair = {"_p_netxpert__ODPair", "netxpert::ODPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__OriginDestinationMatrix = {"_p_netxpert__OriginDestinationMatrix", "netxpert::OriginDestinationMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__ShortestPathTree = {"_p_netxpert__ShortestPathTree", "netxpert::ShortestPathTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__Transportation = {"_p_netxpert__Transportation", "netxpert::Transportation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__simple__MinimumSpanningTree = {"_p_netxpert__simple__MinimumSpanningTree", "netxpert::simple::MinimumSpanningTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__simple__OriginDestinationMatrix = {"_p_netxpert__simple__OriginDestinationMatrix", "netxpert::simple::OriginDestinationMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__simple__ShortestPathTree = {"_p_netxpert__simple__ShortestPathTree", "netxpert::simple::ShortestPathTree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_netxpert__simple__Transportation = {"_p_netxpert__simple__Transportation", "netxpert::simple::Transportation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_netxpert__ExtDistributionArc_t = {"_p_std__allocatorT_netxpert__ExtDistributionArc_t", "std::allocator< netxpert::ExtDistributionArc > *|std::vector< netxpert::ExtDistributionArc >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_netxpert__ExtNodeSupply_t = {"_p_std__allocatorT_netxpert__ExtNodeSupply_t", "std::allocator< netxpert::ExtNodeSupply > *|std::vector< netxpert::ExtNodeSupply >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_netxpert__ExtSPTreeArc_t = {"_p_std__allocatorT_netxpert__ExtSPTreeArc_t", "std::allocator< netxpert::ExtSPTreeArc > *|std::vector< netxpert::ExtSPTreeArc >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_netxpert__InputArc_t = {"_p_std__allocatorT_netxpert__InputArc_t", "std::allocator< netxpert::InputArc > *|std::vector< netxpert::InputArc >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_netxpert__InputNode_t = {"_p_std__allocatorT_netxpert__InputNode_t", "std::vector< netxpert::InputNode >::allocator_type *|std::allocator< netxpert::InputNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_netxpert__NewNode_t = {"_p_std__allocatorT_netxpert__NewNode_t", "std::vector< netxpert::NewNode >::allocator_type *|std::allocator< netxpert::NewNode > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t = {"_p_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t", "std::pair< std::vector< unsigned int,std::allocator< unsigned int > >,double > *|netxpert::CompressedPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "netxpert::ExtNodeID *|std::string *|netxpert::ExtArcID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_netxpert__ODPair_double_t = {"_p_std__unordered_mapT_netxpert__ODPair_double_t", "std::unordered_map< netxpert::ODPair,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t = {"_p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t", "std::unordered_map< netxpert::ODPair,netxpert::CompressedPath > *|std::unordered_map< netxpert::ODPair,std::pair< std::vector< unsigned int,std::allocator< unsigned int > >,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t = {"_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t", "std::vector< netxpert::ExtDistributionArc > *|netxpert::ExtDistribution *|std::vector< netxpert::ExtDistributionArc,std::allocator< netxpert::ExtDistributionArc > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t = {"_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t", "std::vector< netxpert::ExtNodeSupply,std::allocator< netxpert::ExtNodeSupply > > *|netxpert::ExtNodeSupplies *|std::vector< netxpert::ExtNodeSupply > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t = {"_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t", "std::vector< netxpert::ExtSPTreeArc > *|std::vector< netxpert::ExtSPTreeArc,std::allocator< netxpert::ExtSPTreeArc > > *|netxpert::ExtSPTArcs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t = {"_p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t", "std::vector< netxpert::FlowCost,std::allocator< netxpert::FlowCost > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t = {"_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t", "std::vector< netxpert::InputArc > *|std::vector< netxpert::InputArc,std::allocator< netxpert::InputArc > > *|netxpert::InputArcs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t = {"_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t", "netxpert::InputNodes *|std::vector< netxpert::InputNode > *|std::vector< netxpert::InputNode,std::allocator< netxpert::InputNode > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t = {"_p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t", "std::vector< netxpert::InternalArc,std::allocator< netxpert::InternalArc > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t = {"_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t", "netxpert::NewNodes *|std::vector< netxpert::NewNode > *|std::vector< netxpert::NewNode,std::allocator< netxpert::NewNode > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t = {"_p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t", "std::vector< std::pair< unsigned int,std::string >,std::allocator< std::pair< unsigned int,std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_string = {"_p_string", "string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__ConstIterator = {"_p_swig__ConstIterator", "swig::ConstIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__GC_VALUE = {"_p_swig__GC_VALUE", "swig::GC_VALUE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__Iterator = {"_p_swig__Iterator", "swig::Iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "VALUE|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Coordinate,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_netxpert__ColumnMap,
  &_swigt__p_netxpert__Config,
  &_swigt__p_netxpert__DBHELPER,
  &_swigt__p_netxpert__ExtDistributionArc,
  &_swigt__p_netxpert__ExtNodeSupply,
  &_swigt__p_netxpert__ExtSPTreeArc,
  &_swigt__p_netxpert__ExtTransportationData,
  &_swigt__p_netxpert__ExternalArc,
  &_swigt__p_netxpert__FlowCost,
  &_swigt__p_netxpert__ISolver,
  &_swigt__p_netxpert__InputArc,
  &_swigt__p_netxpert__InputNode,
  &_swigt__p_netxpert__InternalArc,
  &_swigt__p_netxpert__LOGGER,
  &_swigt__p_netxpert__MinCostFlow,
  &_swigt__p_netxpert__MinimumSpanningTree,
  &_swigt__p_netxpert__Network,
  &_swigt__p_netxpert__NewNode,
  &_swigt__p_netxpert__ODPair,
  &_swigt__p_netxpert__OriginDestinationMatrix,
  &_swigt__p_netxpert__ShortestPathTree,
  &_swigt__p_netxpert__Transportation,
  &_swigt__p_netxpert__simple__MinimumSpanningTree,
  &_swigt__p_netxpert__simple__OriginDestinationMatrix,
  &_swigt__p_netxpert__simple__ShortestPathTree,
  &_swigt__p_netxpert__simple__Transportation,
  &_swigt__p_p_void,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_netxpert__ExtDistributionArc_t,
  &_swigt__p_std__allocatorT_netxpert__ExtNodeSupply_t,
  &_swigt__p_std__allocatorT_netxpert__ExtSPTreeArc_t,
  &_swigt__p_std__allocatorT_netxpert__InputArc_t,
  &_swigt__p_std__allocatorT_netxpert__InputNode_t,
  &_swigt__p_std__allocatorT_netxpert__NewNode_t,
  &_swigt__p_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t,
  &_swigt__p_std__string,
  &_swigt__p_std__unordered_mapT_netxpert__ODPair_double_t,
  &_swigt__p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t,
  &_swigt__p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t,
  &_swigt__p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t,
  &_swigt__p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t,
  &_swigt__p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t,
  &_swigt__p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t,
  &_swigt__p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t,
  &_swigt__p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t,
  &_swigt__p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t,
  &_swigt__p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_string,
  &_swigt__p_swig__ConstIterator,
  &_swigt__p_swig__GC_VALUE,
  &_swigt__p_swig__Iterator,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Coordinate[] = {  {&_swigt__p_Coordinate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ColumnMap[] = {  {&_swigt__p_netxpert__ColumnMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__Config[] = {  {&_swigt__p_netxpert__Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__DBHELPER[] = {  {&_swigt__p_netxpert__DBHELPER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ExtDistributionArc[] = {  {&_swigt__p_netxpert__ExtDistributionArc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ExtNodeSupply[] = {  {&_swigt__p_netxpert__ExtNodeSupply, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ExtSPTreeArc[] = {  {&_swigt__p_netxpert__ExtSPTreeArc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ExtTransportationData[] = {  {&_swigt__p_netxpert__ExtTransportationData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ExternalArc[] = {  {&_swigt__p_netxpert__ExternalArc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__FlowCost[] = {  {&_swigt__p_netxpert__FlowCost, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ISolver[] = {  {&_swigt__p_netxpert__MinCostFlow, _p_netxpert__MinCostFlowTo_p_netxpert__ISolver, 0, 0},  {&_swigt__p_netxpert__Transportation, _p_netxpert__TransportationTo_p_netxpert__ISolver, 0, 0},  {&_swigt__p_netxpert__ISolver, 0, 0, 0},  {&_swigt__p_netxpert__OriginDestinationMatrix, _p_netxpert__OriginDestinationMatrixTo_p_netxpert__ISolver, 0, 0},  {&_swigt__p_netxpert__MinimumSpanningTree, _p_netxpert__MinimumSpanningTreeTo_p_netxpert__ISolver, 0, 0},  {&_swigt__p_netxpert__ShortestPathTree, _p_netxpert__ShortestPathTreeTo_p_netxpert__ISolver, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__InputArc[] = {  {&_swigt__p_netxpert__InputArc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__InputNode[] = {  {&_swigt__p_netxpert__InputNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__InternalArc[] = {  {&_swigt__p_netxpert__InternalArc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__LOGGER[] = {  {&_swigt__p_netxpert__LOGGER, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__MinCostFlow[] = {  {&_swigt__p_netxpert__MinCostFlow, 0, 0, 0},  {&_swigt__p_netxpert__Transportation, _p_netxpert__TransportationTo_p_netxpert__MinCostFlow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__MinimumSpanningTree[] = {  {&_swigt__p_netxpert__MinimumSpanningTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__Network[] = {  {&_swigt__p_netxpert__Network, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__NewNode[] = {  {&_swigt__p_netxpert__NewNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ODPair[] = {  {&_swigt__p_netxpert__ODPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__OriginDestinationMatrix[] = {  {&_swigt__p_netxpert__OriginDestinationMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__ShortestPathTree[] = {  {&_swigt__p_netxpert__ShortestPathTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__Transportation[] = {  {&_swigt__p_netxpert__Transportation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__simple__MinimumSpanningTree[] = {  {&_swigt__p_netxpert__simple__MinimumSpanningTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__simple__OriginDestinationMatrix[] = {  {&_swigt__p_netxpert__simple__OriginDestinationMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__simple__ShortestPathTree[] = {  {&_swigt__p_netxpert__simple__ShortestPathTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_netxpert__simple__Transportation[] = {  {&_swigt__p_netxpert__simple__Transportation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_netxpert__ExtDistributionArc_t[] = {  {&_swigt__p_std__allocatorT_netxpert__ExtDistributionArc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_netxpert__ExtNodeSupply_t[] = {  {&_swigt__p_std__allocatorT_netxpert__ExtNodeSupply_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_netxpert__ExtSPTreeArc_t[] = {  {&_swigt__p_std__allocatorT_netxpert__ExtSPTreeArc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_netxpert__InputArc_t[] = {  {&_swigt__p_std__allocatorT_netxpert__InputArc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_netxpert__InputNode_t[] = {  {&_swigt__p_std__allocatorT_netxpert__InputNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_netxpert__NewNode_t[] = {  {&_swigt__p_std__allocatorT_netxpert__NewNode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t[] = {  {&_swigt__p_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_netxpert__ODPair_double_t[] = {  {&_swigt__p_std__unordered_mapT_netxpert__ODPair_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t[] = {  {&_swigt__p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t[] = {  {&_swigt__p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string[] = {  {&_swigt__p_string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__ConstIterator[] = {  {&_swigt__p_swig__ConstIterator, 0, 0, 0},  {&_swigt__p_swig__Iterator, _p_swig__IteratorTo_p_swig__ConstIterator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__GC_VALUE[] = {  {&_swigt__p_swig__GC_VALUE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__Iterator[] = {  {&_swigt__p_swig__Iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Coordinate,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_netxpert__ColumnMap,
  _swigc__p_netxpert__Config,
  _swigc__p_netxpert__DBHELPER,
  _swigc__p_netxpert__ExtDistributionArc,
  _swigc__p_netxpert__ExtNodeSupply,
  _swigc__p_netxpert__ExtSPTreeArc,
  _swigc__p_netxpert__ExtTransportationData,
  _swigc__p_netxpert__ExternalArc,
  _swigc__p_netxpert__FlowCost,
  _swigc__p_netxpert__ISolver,
  _swigc__p_netxpert__InputArc,
  _swigc__p_netxpert__InputNode,
  _swigc__p_netxpert__InternalArc,
  _swigc__p_netxpert__LOGGER,
  _swigc__p_netxpert__MinCostFlow,
  _swigc__p_netxpert__MinimumSpanningTree,
  _swigc__p_netxpert__Network,
  _swigc__p_netxpert__NewNode,
  _swigc__p_netxpert__ODPair,
  _swigc__p_netxpert__OriginDestinationMatrix,
  _swigc__p_netxpert__ShortestPathTree,
  _swigc__p_netxpert__Transportation,
  _swigc__p_netxpert__simple__MinimumSpanningTree,
  _swigc__p_netxpert__simple__OriginDestinationMatrix,
  _swigc__p_netxpert__simple__ShortestPathTree,
  _swigc__p_netxpert__simple__Transportation,
  _swigc__p_p_void,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_netxpert__ExtDistributionArc_t,
  _swigc__p_std__allocatorT_netxpert__ExtNodeSupply_t,
  _swigc__p_std__allocatorT_netxpert__ExtSPTreeArc_t,
  _swigc__p_std__allocatorT_netxpert__InputArc_t,
  _swigc__p_std__allocatorT_netxpert__InputNode_t,
  _swigc__p_std__allocatorT_netxpert__NewNode_t,
  _swigc__p_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t,
  _swigc__p_std__string,
  _swigc__p_std__unordered_mapT_netxpert__ODPair_double_t,
  _swigc__p_std__unordered_mapT_netxpert__ODPair_std__pairT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_double_t_t,
  _swigc__p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t,
  _swigc__p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t,
  _swigc__p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t,
  _swigc__p_std__vectorT_netxpert__FlowCost_std__allocatorT_netxpert__FlowCost_t_t,
  _swigc__p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t,
  _swigc__p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t,
  _swigc__p_std__vectorT_netxpert__InternalArc_std__allocatorT_netxpert__InternalArc_t_t,
  _swigc__p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t,
  _swigc__p_std__vectorT_std__pairT_unsigned_int_std__string_t_std__allocatorT_std__pairT_unsigned_int_std__string_t_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_string,
  _swigc__p_swig__ConstIterator,
  _swigc__p_swig__GC_VALUE,
  _swigc__p_swig__Iterator,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/*

*/
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void Init_rbnetxpert(void) {
  size_t i;
  
  SWIG_InitRuntime();
  mRbnetxpert = rb_define_module("Rbnetxpert");
  
  SWIG_InitializeModule(0);
  for (i = 0; i < swig_module.size; i++) {
    SWIG_define_class(swig_module.types[i]);
  }
  
  SWIG_RubyInitializeTrackings();
  
  SwigClassGC_VALUE.klass = rb_define_class_under(mRbnetxpert, "GC_VALUE", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__GC_VALUE, (void *) &SwigClassGC_VALUE);
  rb_undef_alloc_func(SwigClassGC_VALUE.klass);
  rb_define_method(SwigClassGC_VALUE.klass, "inspect", VALUEFUNC(_wrap_GC_VALUE_inspect), -1);
  rb_define_method(SwigClassGC_VALUE.klass, "to_s", VALUEFUNC(_wrap_GC_VALUE_to_s), -1);
  SwigClassGC_VALUE.mark = 0;
  SwigClassGC_VALUE.trackObjects = 0;
  
  swig::SwigGCReferences::initialize();
  
  
  SwigClassConstIterator.klass = rb_define_class_under(mRbnetxpert, "ConstIterator", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_swig__ConstIterator, (void *) &SwigClassConstIterator);
  rb_undef_alloc_func(SwigClassConstIterator.klass);
  rb_define_method(SwigClassConstIterator.klass, "value", VALUEFUNC(_wrap_ConstIterator_value), -1);
  rb_define_method(SwigClassConstIterator.klass, "dup", VALUEFUNC(_wrap_ConstIterator_dup), -1);
  rb_define_method(SwigClassConstIterator.klass, "inspect", VALUEFUNC(_wrap_ConstIterator_inspect), -1);
  rb_define_method(SwigClassConstIterator.klass, "to_s", VALUEFUNC(_wrap_ConstIterator_to_s), -1);
  rb_define_method(SwigClassConstIterator.klass, "next", VALUEFUNC(_wrap_ConstIterator_next), -1);
  rb_define_method(SwigClassConstIterator.klass, "previous", VALUEFUNC(_wrap_ConstIterator_previous), -1);
  rb_define_method(SwigClassConstIterator.klass, "==", VALUEFUNC(_wrap_ConstIterator___eq__), -1);
  rb_define_method(SwigClassConstIterator.klass, "+", VALUEFUNC(_wrap_ConstIterator___add__), -1);
  rb_define_method(SwigClassConstIterator.klass, "-", VALUEFUNC(_wrap_ConstIterator___sub__), -1);
  SwigClassConstIterator.mark = 0;
  SwigClassConstIterator.destroy = (void (*)(void *)) free_swig_ConstIterator;
  SwigClassConstIterator.trackObjects = 0;
  
  SwigClassIterator.klass = rb_define_class_under(mRbnetxpert, "Iterator", ((swig_class *) SWIGTYPE_p_swig__ConstIterator->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_swig__Iterator, (void *) &SwigClassIterator);
  rb_undef_alloc_func(SwigClassIterator.klass);
  rb_define_method(SwigClassIterator.klass, "value=", VALUEFUNC(_wrap_Iterator_valuee___), -1);
  rb_define_method(SwigClassIterator.klass, "dup", VALUEFUNC(_wrap_Iterator_dup), -1);
  rb_define_method(SwigClassIterator.klass, "next", VALUEFUNC(_wrap_Iterator_next), -1);
  rb_define_method(SwigClassIterator.klass, "previous", VALUEFUNC(_wrap_Iterator_previous), -1);
  rb_define_method(SwigClassIterator.klass, "inspect", VALUEFUNC(_wrap_Iterator_inspect), -1);
  rb_define_method(SwigClassIterator.klass, "to_s", VALUEFUNC(_wrap_Iterator_to_s), -1);
  rb_define_method(SwigClassIterator.klass, "==", VALUEFUNC(_wrap_Iterator___eq__), -1);
  rb_define_method(SwigClassIterator.klass, "+", VALUEFUNC(_wrap_Iterator___add__), -1);
  rb_define_method(SwigClassIterator.klass, "-", VALUEFUNC(_wrap_Iterator___sub__), -1);
  SwigClassIterator.mark = 0;
  SwigClassIterator.destroy = (void (*)(void *)) free_swig_Iterator;
  SwigClassIterator.trackObjects = 0;
  
  SwigClassInputArcs.klass = rb_define_class_under(mRbnetxpert, "InputArcs", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_netxpert__InputArc_std__allocatorT_netxpert__InputArc_t_t, (void *) &SwigClassInputArcs);
  rb_include_module(SwigClassInputArcs.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassInputArcs.klass, _wrap_InputArcs_allocate);
  rb_define_method(SwigClassInputArcs.klass, "initialize", VALUEFUNC(_wrap_new_InputArcs), -1);
  rb_define_method(SwigClassInputArcs.klass, "dup", VALUEFUNC(_wrap_InputArcs_dup), -1);
  rb_define_method(SwigClassInputArcs.klass, "inspect", VALUEFUNC(_wrap_InputArcs_inspect), -1);
  rb_define_method(SwigClassInputArcs.klass, "to_a", VALUEFUNC(_wrap_InputArcs_to_a), -1);
  rb_define_method(SwigClassInputArcs.klass, "to_s", VALUEFUNC(_wrap_InputArcs_to_s), -1);
  rb_define_method(SwigClassInputArcs.klass, "slice", VALUEFUNC(_wrap_InputArcs_slice), -1);
  rb_define_method(SwigClassInputArcs.klass, "each", VALUEFUNC(_wrap_InputArcs_each), -1);
  rb_define_method(SwigClassInputArcs.klass, "select", VALUEFUNC(_wrap_InputArcs_select), -1);
  rb_define_method(SwigClassInputArcs.klass, "delete_at", VALUEFUNC(_wrap_InputArcs_delete_at), -1);
  rb_define_method(SwigClassInputArcs.klass, "__delete2__", VALUEFUNC(_wrap_InputArcs___delete2__), -1);
  rb_define_method(SwigClassInputArcs.klass, "reject!", VALUEFUNC(_wrap_InputArcs_rejectN___), -1);
  rb_define_alias(SwigClassInputArcs.klass, "delete_if", "reject!");
  rb_define_method(SwigClassInputArcs.klass, "pop", VALUEFUNC(_wrap_InputArcs_pop), -1);
  rb_define_method(SwigClassInputArcs.klass, "push", VALUEFUNC(_wrap_InputArcs_push), -1);
  rb_define_alias(SwigClassInputArcs.klass, "<<", "push");
  rb_define_method(SwigClassInputArcs.klass, "reject", VALUEFUNC(_wrap_InputArcs_reject), -1);
  rb_define_method(SwigClassInputArcs.klass, "at", VALUEFUNC(_wrap_InputArcs_at), -1);
  rb_define_method(SwigClassInputArcs.klass, "[]", VALUEFUNC(_wrap_InputArcs___getitem__), -1);
  rb_define_method(SwigClassInputArcs.klass, "[]=", VALUEFUNC(_wrap_InputArcs___setitem__), -1);
  rb_define_method(SwigClassInputArcs.klass, "shift", VALUEFUNC(_wrap_InputArcs_shift), -1);
  rb_define_method(SwigClassInputArcs.klass, "unshift", VALUEFUNC(_wrap_InputArcs_unshift), -1);
  rb_define_method(SwigClassInputArcs.klass, "empty?", VALUEFUNC(_wrap_InputArcs_emptyq___), -1);
  rb_define_method(SwigClassInputArcs.klass, "size", VALUEFUNC(_wrap_InputArcs_size), -1);
  rb_define_method(SwigClassInputArcs.klass, "clear", VALUEFUNC(_wrap_InputArcs_clear), -1);
  rb_define_method(SwigClassInputArcs.klass, "swap", VALUEFUNC(_wrap_InputArcs_swap), -1);
  rb_define_method(SwigClassInputArcs.klass, "get_allocator", VALUEFUNC(_wrap_InputArcs_get_allocator), -1);
  rb_define_method(SwigClassInputArcs.klass, "begin", VALUEFUNC(_wrap_InputArcs_begin), -1);
  rb_define_method(SwigClassInputArcs.klass, "end", VALUEFUNC(_wrap_InputArcs_end), -1);
  rb_define_method(SwigClassInputArcs.klass, "rbegin", VALUEFUNC(_wrap_InputArcs_rbegin), -1);
  rb_define_method(SwigClassInputArcs.klass, "rend", VALUEFUNC(_wrap_InputArcs_rend), -1);
  rb_define_method(SwigClassInputArcs.klass, "erase", VALUEFUNC(_wrap_InputArcs_erase), -1);
  rb_define_method(SwigClassInputArcs.klass, "front", VALUEFUNC(_wrap_InputArcs_front), -1);
  rb_define_method(SwigClassInputArcs.klass, "back", VALUEFUNC(_wrap_InputArcs_back), -1);
  rb_define_method(SwigClassInputArcs.klass, "assign", VALUEFUNC(_wrap_InputArcs_assign), -1);
  rb_define_method(SwigClassInputArcs.klass, "resize", VALUEFUNC(_wrap_InputArcs_resize), -1);
  rb_define_method(SwigClassInputArcs.klass, "insert", VALUEFUNC(_wrap_InputArcs_insert), -1);
  rb_define_method(SwigClassInputArcs.klass, "reserve", VALUEFUNC(_wrap_InputArcs_reserve), -1);
  rb_define_method(SwigClassInputArcs.klass, "capacity", VALUEFUNC(_wrap_InputArcs_capacity), -1);
  SwigClassInputArcs.mark = 0;
  SwigClassInputArcs.destroy = (void (*)(void *)) free_std_vector_Sl_netxpert_InputArc_Sg_;
  SwigClassInputArcs.trackObjects = 0;
  
  SwigClassInputNodes.klass = rb_define_class_under(mRbnetxpert, "InputNodes", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_netxpert__InputNode_std__allocatorT_netxpert__InputNode_t_t, (void *) &SwigClassInputNodes);
  rb_include_module(SwigClassInputNodes.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassInputNodes.klass, _wrap_InputNodes_allocate);
  rb_define_method(SwigClassInputNodes.klass, "initialize", VALUEFUNC(_wrap_new_InputNodes), -1);
  rb_define_method(SwigClassInputNodes.klass, "dup", VALUEFUNC(_wrap_InputNodes_dup), -1);
  rb_define_method(SwigClassInputNodes.klass, "inspect", VALUEFUNC(_wrap_InputNodes_inspect), -1);
  rb_define_method(SwigClassInputNodes.klass, "to_a", VALUEFUNC(_wrap_InputNodes_to_a), -1);
  rb_define_method(SwigClassInputNodes.klass, "to_s", VALUEFUNC(_wrap_InputNodes_to_s), -1);
  rb_define_method(SwigClassInputNodes.klass, "slice", VALUEFUNC(_wrap_InputNodes_slice), -1);
  rb_define_method(SwigClassInputNodes.klass, "each", VALUEFUNC(_wrap_InputNodes_each), -1);
  rb_define_method(SwigClassInputNodes.klass, "select", VALUEFUNC(_wrap_InputNodes_select), -1);
  rb_define_method(SwigClassInputNodes.klass, "delete_at", VALUEFUNC(_wrap_InputNodes_delete_at), -1);
  rb_define_method(SwigClassInputNodes.klass, "__delete2__", VALUEFUNC(_wrap_InputNodes___delete2__), -1);
  rb_define_method(SwigClassInputNodes.klass, "reject!", VALUEFUNC(_wrap_InputNodes_rejectN___), -1);
  rb_define_alias(SwigClassInputNodes.klass, "delete_if", "reject!");
  rb_define_method(SwigClassInputNodes.klass, "pop", VALUEFUNC(_wrap_InputNodes_pop), -1);
  rb_define_method(SwigClassInputNodes.klass, "push", VALUEFUNC(_wrap_InputNodes_push), -1);
  rb_define_alias(SwigClassInputNodes.klass, "<<", "push");
  rb_define_method(SwigClassInputNodes.klass, "reject", VALUEFUNC(_wrap_InputNodes_reject), -1);
  rb_define_method(SwigClassInputNodes.klass, "at", VALUEFUNC(_wrap_InputNodes_at), -1);
  rb_define_method(SwigClassInputNodes.klass, "[]", VALUEFUNC(_wrap_InputNodes___getitem__), -1);
  rb_define_method(SwigClassInputNodes.klass, "[]=", VALUEFUNC(_wrap_InputNodes___setitem__), -1);
  rb_define_method(SwigClassInputNodes.klass, "shift", VALUEFUNC(_wrap_InputNodes_shift), -1);
  rb_define_method(SwigClassInputNodes.klass, "unshift", VALUEFUNC(_wrap_InputNodes_unshift), -1);
  rb_define_method(SwigClassInputNodes.klass, "empty?", VALUEFUNC(_wrap_InputNodes_emptyq___), -1);
  rb_define_method(SwigClassInputNodes.klass, "size", VALUEFUNC(_wrap_InputNodes_size), -1);
  rb_define_method(SwigClassInputNodes.klass, "clear", VALUEFUNC(_wrap_InputNodes_clear), -1);
  rb_define_method(SwigClassInputNodes.klass, "swap", VALUEFUNC(_wrap_InputNodes_swap), -1);
  rb_define_method(SwigClassInputNodes.klass, "get_allocator", VALUEFUNC(_wrap_InputNodes_get_allocator), -1);
  rb_define_method(SwigClassInputNodes.klass, "begin", VALUEFUNC(_wrap_InputNodes_begin), -1);
  rb_define_method(SwigClassInputNodes.klass, "end", VALUEFUNC(_wrap_InputNodes_end), -1);
  rb_define_method(SwigClassInputNodes.klass, "rbegin", VALUEFUNC(_wrap_InputNodes_rbegin), -1);
  rb_define_method(SwigClassInputNodes.klass, "rend", VALUEFUNC(_wrap_InputNodes_rend), -1);
  rb_define_method(SwigClassInputNodes.klass, "erase", VALUEFUNC(_wrap_InputNodes_erase), -1);
  rb_define_method(SwigClassInputNodes.klass, "front", VALUEFUNC(_wrap_InputNodes_front), -1);
  rb_define_method(SwigClassInputNodes.klass, "back", VALUEFUNC(_wrap_InputNodes_back), -1);
  rb_define_method(SwigClassInputNodes.klass, "assign", VALUEFUNC(_wrap_InputNodes_assign), -1);
  rb_define_method(SwigClassInputNodes.klass, "resize", VALUEFUNC(_wrap_InputNodes_resize), -1);
  rb_define_method(SwigClassInputNodes.klass, "insert", VALUEFUNC(_wrap_InputNodes_insert), -1);
  rb_define_method(SwigClassInputNodes.klass, "reserve", VALUEFUNC(_wrap_InputNodes_reserve), -1);
  rb_define_method(SwigClassInputNodes.klass, "capacity", VALUEFUNC(_wrap_InputNodes_capacity), -1);
  SwigClassInputNodes.mark = 0;
  SwigClassInputNodes.destroy = (void (*)(void *)) free_std_vector_Sl_netxpert_InputNode_Sg_;
  SwigClassInputNodes.trackObjects = 0;
  
  SwigClassNewNodes.klass = rb_define_class_under(mRbnetxpert, "NewNodes", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_netxpert__NewNode_std__allocatorT_netxpert__NewNode_t_t, (void *) &SwigClassNewNodes);
  rb_include_module(SwigClassNewNodes.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassNewNodes.klass, _wrap_NewNodes_allocate);
  rb_define_method(SwigClassNewNodes.klass, "initialize", VALUEFUNC(_wrap_new_NewNodes), -1);
  rb_define_method(SwigClassNewNodes.klass, "dup", VALUEFUNC(_wrap_NewNodes_dup), -1);
  rb_define_method(SwigClassNewNodes.klass, "inspect", VALUEFUNC(_wrap_NewNodes_inspect), -1);
  rb_define_method(SwigClassNewNodes.klass, "to_a", VALUEFUNC(_wrap_NewNodes_to_a), -1);
  rb_define_method(SwigClassNewNodes.klass, "to_s", VALUEFUNC(_wrap_NewNodes_to_s), -1);
  rb_define_method(SwigClassNewNodes.klass, "slice", VALUEFUNC(_wrap_NewNodes_slice), -1);
  rb_define_method(SwigClassNewNodes.klass, "each", VALUEFUNC(_wrap_NewNodes_each), -1);
  rb_define_method(SwigClassNewNodes.klass, "select", VALUEFUNC(_wrap_NewNodes_select), -1);
  rb_define_method(SwigClassNewNodes.klass, "delete_at", VALUEFUNC(_wrap_NewNodes_delete_at), -1);
  rb_define_method(SwigClassNewNodes.klass, "__delete2__", VALUEFUNC(_wrap_NewNodes___delete2__), -1);
  rb_define_method(SwigClassNewNodes.klass, "reject!", VALUEFUNC(_wrap_NewNodes_rejectN___), -1);
  rb_define_alias(SwigClassNewNodes.klass, "delete_if", "reject!");
  rb_define_method(SwigClassNewNodes.klass, "pop", VALUEFUNC(_wrap_NewNodes_pop), -1);
  rb_define_method(SwigClassNewNodes.klass, "push", VALUEFUNC(_wrap_NewNodes_push), -1);
  rb_define_alias(SwigClassNewNodes.klass, "<<", "push");
  rb_define_method(SwigClassNewNodes.klass, "reject", VALUEFUNC(_wrap_NewNodes_reject), -1);
  rb_define_method(SwigClassNewNodes.klass, "at", VALUEFUNC(_wrap_NewNodes_at), -1);
  rb_define_method(SwigClassNewNodes.klass, "[]", VALUEFUNC(_wrap_NewNodes___getitem__), -1);
  rb_define_method(SwigClassNewNodes.klass, "[]=", VALUEFUNC(_wrap_NewNodes___setitem__), -1);
  rb_define_method(SwigClassNewNodes.klass, "shift", VALUEFUNC(_wrap_NewNodes_shift), -1);
  rb_define_method(SwigClassNewNodes.klass, "unshift", VALUEFUNC(_wrap_NewNodes_unshift), -1);
  rb_define_method(SwigClassNewNodes.klass, "empty?", VALUEFUNC(_wrap_NewNodes_emptyq___), -1);
  rb_define_method(SwigClassNewNodes.klass, "size", VALUEFUNC(_wrap_NewNodes_size), -1);
  rb_define_method(SwigClassNewNodes.klass, "clear", VALUEFUNC(_wrap_NewNodes_clear), -1);
  rb_define_method(SwigClassNewNodes.klass, "swap", VALUEFUNC(_wrap_NewNodes_swap), -1);
  rb_define_method(SwigClassNewNodes.klass, "get_allocator", VALUEFUNC(_wrap_NewNodes_get_allocator), -1);
  rb_define_method(SwigClassNewNodes.klass, "begin", VALUEFUNC(_wrap_NewNodes_begin), -1);
  rb_define_method(SwigClassNewNodes.klass, "end", VALUEFUNC(_wrap_NewNodes_end), -1);
  rb_define_method(SwigClassNewNodes.klass, "rbegin", VALUEFUNC(_wrap_NewNodes_rbegin), -1);
  rb_define_method(SwigClassNewNodes.klass, "rend", VALUEFUNC(_wrap_NewNodes_rend), -1);
  rb_define_method(SwigClassNewNodes.klass, "erase", VALUEFUNC(_wrap_NewNodes_erase), -1);
  rb_define_method(SwigClassNewNodes.klass, "front", VALUEFUNC(_wrap_NewNodes_front), -1);
  rb_define_method(SwigClassNewNodes.klass, "back", VALUEFUNC(_wrap_NewNodes_back), -1);
  rb_define_method(SwigClassNewNodes.klass, "assign", VALUEFUNC(_wrap_NewNodes_assign), -1);
  rb_define_method(SwigClassNewNodes.klass, "resize", VALUEFUNC(_wrap_NewNodes_resize), -1);
  rb_define_method(SwigClassNewNodes.klass, "insert", VALUEFUNC(_wrap_NewNodes_insert), -1);
  rb_define_method(SwigClassNewNodes.klass, "reserve", VALUEFUNC(_wrap_NewNodes_reserve), -1);
  rb_define_method(SwigClassNewNodes.klass, "capacity", VALUEFUNC(_wrap_NewNodes_capacity), -1);
  SwigClassNewNodes.mark = 0;
  SwigClassNewNodes.destroy = (void (*)(void *)) free_std_vector_Sl_netxpert_NewNode_Sg_;
  SwigClassNewNodes.trackObjects = 0;
  
  SwigClassExtSPTArcs.klass = rb_define_class_under(mRbnetxpert, "ExtSPTArcs", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_netxpert__ExtSPTreeArc_std__allocatorT_netxpert__ExtSPTreeArc_t_t, (void *) &SwigClassExtSPTArcs);
  rb_include_module(SwigClassExtSPTArcs.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassExtSPTArcs.klass, _wrap_ExtSPTArcs_allocate);
  rb_define_method(SwigClassExtSPTArcs.klass, "initialize", VALUEFUNC(_wrap_new_ExtSPTArcs), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "dup", VALUEFUNC(_wrap_ExtSPTArcs_dup), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "inspect", VALUEFUNC(_wrap_ExtSPTArcs_inspect), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "to_a", VALUEFUNC(_wrap_ExtSPTArcs_to_a), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "to_s", VALUEFUNC(_wrap_ExtSPTArcs_to_s), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "slice", VALUEFUNC(_wrap_ExtSPTArcs_slice), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "each", VALUEFUNC(_wrap_ExtSPTArcs_each), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "select", VALUEFUNC(_wrap_ExtSPTArcs_select), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "delete_at", VALUEFUNC(_wrap_ExtSPTArcs_delete_at), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "__delete2__", VALUEFUNC(_wrap_ExtSPTArcs___delete2__), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "reject!", VALUEFUNC(_wrap_ExtSPTArcs_rejectN___), -1);
  rb_define_alias(SwigClassExtSPTArcs.klass, "delete_if", "reject!");
  rb_define_method(SwigClassExtSPTArcs.klass, "pop", VALUEFUNC(_wrap_ExtSPTArcs_pop), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "push", VALUEFUNC(_wrap_ExtSPTArcs_push), -1);
  rb_define_alias(SwigClassExtSPTArcs.klass, "<<", "push");
  rb_define_method(SwigClassExtSPTArcs.klass, "reject", VALUEFUNC(_wrap_ExtSPTArcs_reject), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "at", VALUEFUNC(_wrap_ExtSPTArcs_at), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "[]", VALUEFUNC(_wrap_ExtSPTArcs___getitem__), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "[]=", VALUEFUNC(_wrap_ExtSPTArcs___setitem__), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "shift", VALUEFUNC(_wrap_ExtSPTArcs_shift), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "unshift", VALUEFUNC(_wrap_ExtSPTArcs_unshift), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "empty?", VALUEFUNC(_wrap_ExtSPTArcs_emptyq___), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "size", VALUEFUNC(_wrap_ExtSPTArcs_size), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "clear", VALUEFUNC(_wrap_ExtSPTArcs_clear), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "swap", VALUEFUNC(_wrap_ExtSPTArcs_swap), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "get_allocator", VALUEFUNC(_wrap_ExtSPTArcs_get_allocator), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "begin", VALUEFUNC(_wrap_ExtSPTArcs_begin), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "end", VALUEFUNC(_wrap_ExtSPTArcs_end), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "rbegin", VALUEFUNC(_wrap_ExtSPTArcs_rbegin), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "rend", VALUEFUNC(_wrap_ExtSPTArcs_rend), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "erase", VALUEFUNC(_wrap_ExtSPTArcs_erase), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "front", VALUEFUNC(_wrap_ExtSPTArcs_front), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "back", VALUEFUNC(_wrap_ExtSPTArcs_back), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "assign", VALUEFUNC(_wrap_ExtSPTArcs_assign), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "resize", VALUEFUNC(_wrap_ExtSPTArcs_resize), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "insert", VALUEFUNC(_wrap_ExtSPTArcs_insert), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "reserve", VALUEFUNC(_wrap_ExtSPTArcs_reserve), -1);
  rb_define_method(SwigClassExtSPTArcs.klass, "capacity", VALUEFUNC(_wrap_ExtSPTArcs_capacity), -1);
  SwigClassExtSPTArcs.mark = 0;
  SwigClassExtSPTArcs.destroy = (void (*)(void *)) free_std_vector_Sl_netxpert_ExtSPTreeArc_Sg_;
  SwigClassExtSPTArcs.trackObjects = 0;
  
  SwigClassExtNodeSupplies.klass = rb_define_class_under(mRbnetxpert, "ExtNodeSupplies", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_netxpert__ExtNodeSupply_std__allocatorT_netxpert__ExtNodeSupply_t_t, (void *) &SwigClassExtNodeSupplies);
  rb_include_module(SwigClassExtNodeSupplies.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassExtNodeSupplies.klass, _wrap_ExtNodeSupplies_allocate);
  rb_define_method(SwigClassExtNodeSupplies.klass, "initialize", VALUEFUNC(_wrap_new_ExtNodeSupplies), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "dup", VALUEFUNC(_wrap_ExtNodeSupplies_dup), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "inspect", VALUEFUNC(_wrap_ExtNodeSupplies_inspect), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "to_a", VALUEFUNC(_wrap_ExtNodeSupplies_to_a), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "to_s", VALUEFUNC(_wrap_ExtNodeSupplies_to_s), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "slice", VALUEFUNC(_wrap_ExtNodeSupplies_slice), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "each", VALUEFUNC(_wrap_ExtNodeSupplies_each), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "select", VALUEFUNC(_wrap_ExtNodeSupplies_select), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "delete_at", VALUEFUNC(_wrap_ExtNodeSupplies_delete_at), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "__delete2__", VALUEFUNC(_wrap_ExtNodeSupplies___delete2__), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "reject!", VALUEFUNC(_wrap_ExtNodeSupplies_rejectN___), -1);
  rb_define_alias(SwigClassExtNodeSupplies.klass, "delete_if", "reject!");
  rb_define_method(SwigClassExtNodeSupplies.klass, "pop", VALUEFUNC(_wrap_ExtNodeSupplies_pop), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "push", VALUEFUNC(_wrap_ExtNodeSupplies_push), -1);
  rb_define_alias(SwigClassExtNodeSupplies.klass, "<<", "push");
  rb_define_method(SwigClassExtNodeSupplies.klass, "reject", VALUEFUNC(_wrap_ExtNodeSupplies_reject), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "at", VALUEFUNC(_wrap_ExtNodeSupplies_at), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "[]", VALUEFUNC(_wrap_ExtNodeSupplies___getitem__), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "[]=", VALUEFUNC(_wrap_ExtNodeSupplies___setitem__), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "shift", VALUEFUNC(_wrap_ExtNodeSupplies_shift), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "unshift", VALUEFUNC(_wrap_ExtNodeSupplies_unshift), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "empty?", VALUEFUNC(_wrap_ExtNodeSupplies_emptyq___), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "size", VALUEFUNC(_wrap_ExtNodeSupplies_size), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "clear", VALUEFUNC(_wrap_ExtNodeSupplies_clear), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "swap", VALUEFUNC(_wrap_ExtNodeSupplies_swap), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "get_allocator", VALUEFUNC(_wrap_ExtNodeSupplies_get_allocator), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "begin", VALUEFUNC(_wrap_ExtNodeSupplies_begin), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "end", VALUEFUNC(_wrap_ExtNodeSupplies_end), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "rbegin", VALUEFUNC(_wrap_ExtNodeSupplies_rbegin), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "rend", VALUEFUNC(_wrap_ExtNodeSupplies_rend), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "erase", VALUEFUNC(_wrap_ExtNodeSupplies_erase), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "front", VALUEFUNC(_wrap_ExtNodeSupplies_front), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "back", VALUEFUNC(_wrap_ExtNodeSupplies_back), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "assign", VALUEFUNC(_wrap_ExtNodeSupplies_assign), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "resize", VALUEFUNC(_wrap_ExtNodeSupplies_resize), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "insert", VALUEFUNC(_wrap_ExtNodeSupplies_insert), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "reserve", VALUEFUNC(_wrap_ExtNodeSupplies_reserve), -1);
  rb_define_method(SwigClassExtNodeSupplies.klass, "capacity", VALUEFUNC(_wrap_ExtNodeSupplies_capacity), -1);
  SwigClassExtNodeSupplies.mark = 0;
  SwigClassExtNodeSupplies.destroy = (void (*)(void *)) free_std_vector_Sl_netxpert_ExtNodeSupply_Sg_;
  SwigClassExtNodeSupplies.trackObjects = 0;
  
  SwigClassExtDistribution.klass = rb_define_class_under(mRbnetxpert, "ExtDistribution", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_netxpert__ExtDistributionArc_std__allocatorT_netxpert__ExtDistributionArc_t_t, (void *) &SwigClassExtDistribution);
  rb_include_module(SwigClassExtDistribution.klass, rb_eval_string("Enumerable"));
  rb_define_alloc_func(SwigClassExtDistribution.klass, _wrap_ExtDistribution_allocate);
  rb_define_method(SwigClassExtDistribution.klass, "initialize", VALUEFUNC(_wrap_new_ExtDistribution), -1);
  rb_define_method(SwigClassExtDistribution.klass, "dup", VALUEFUNC(_wrap_ExtDistribution_dup), -1);
  rb_define_method(SwigClassExtDistribution.klass, "inspect", VALUEFUNC(_wrap_ExtDistribution_inspect), -1);
  rb_define_method(SwigClassExtDistribution.klass, "to_a", VALUEFUNC(_wrap_ExtDistribution_to_a), -1);
  rb_define_method(SwigClassExtDistribution.klass, "to_s", VALUEFUNC(_wrap_ExtDistribution_to_s), -1);
  rb_define_method(SwigClassExtDistribution.klass, "slice", VALUEFUNC(_wrap_ExtDistribution_slice), -1);
  rb_define_method(SwigClassExtDistribution.klass, "each", VALUEFUNC(_wrap_ExtDistribution_each), -1);
  rb_define_method(SwigClassExtDistribution.klass, "select", VALUEFUNC(_wrap_ExtDistribution_select), -1);
  rb_define_method(SwigClassExtDistribution.klass, "delete_at", VALUEFUNC(_wrap_ExtDistribution_delete_at), -1);
  rb_define_method(SwigClassExtDistribution.klass, "__delete2__", VALUEFUNC(_wrap_ExtDistribution___delete2__), -1);
  rb_define_method(SwigClassExtDistribution.klass, "reject!", VALUEFUNC(_wrap_ExtDistribution_rejectN___), -1);
  rb_define_alias(SwigClassExtDistribution.klass, "delete_if", "reject!");
  rb_define_method(SwigClassExtDistribution.klass, "pop", VALUEFUNC(_wrap_ExtDistribution_pop), -1);
  rb_define_method(SwigClassExtDistribution.klass, "push", VALUEFUNC(_wrap_ExtDistribution_push), -1);
  rb_define_alias(SwigClassExtDistribution.klass, "<<", "push");
  rb_define_method(SwigClassExtDistribution.klass, "reject", VALUEFUNC(_wrap_ExtDistribution_reject), -1);
  rb_define_method(SwigClassExtDistribution.klass, "at", VALUEFUNC(_wrap_ExtDistribution_at), -1);
  rb_define_method(SwigClassExtDistribution.klass, "[]", VALUEFUNC(_wrap_ExtDistribution___getitem__), -1);
  rb_define_method(SwigClassExtDistribution.klass, "[]=", VALUEFUNC(_wrap_ExtDistribution___setitem__), -1);
  rb_define_method(SwigClassExtDistribution.klass, "shift", VALUEFUNC(_wrap_ExtDistribution_shift), -1);
  rb_define_method(SwigClassExtDistribution.klass, "unshift", VALUEFUNC(_wrap_ExtDistribution_unshift), -1);
  rb_define_method(SwigClassExtDistribution.klass, "empty?", VALUEFUNC(_wrap_ExtDistribution_emptyq___), -1);
  rb_define_method(SwigClassExtDistribution.klass, "size", VALUEFUNC(_wrap_ExtDistribution_size), -1);
  rb_define_method(SwigClassExtDistribution.klass, "clear", VALUEFUNC(_wrap_ExtDistribution_clear), -1);
  rb_define_method(SwigClassExtDistribution.klass, "swap", VALUEFUNC(_wrap_ExtDistribution_swap), -1);
  rb_define_method(SwigClassExtDistribution.klass, "get_allocator", VALUEFUNC(_wrap_ExtDistribution_get_allocator), -1);
  rb_define_method(SwigClassExtDistribution.klass, "begin", VALUEFUNC(_wrap_ExtDistribution_begin), -1);
  rb_define_method(SwigClassExtDistribution.klass, "end", VALUEFUNC(_wrap_ExtDistribution_end), -1);
  rb_define_method(SwigClassExtDistribution.klass, "rbegin", VALUEFUNC(_wrap_ExtDistribution_rbegin), -1);
  rb_define_method(SwigClassExtDistribution.klass, "rend", VALUEFUNC(_wrap_ExtDistribution_rend), -1);
  rb_define_method(SwigClassExtDistribution.klass, "erase", VALUEFUNC(_wrap_ExtDistribution_erase), -1);
  rb_define_method(SwigClassExtDistribution.klass, "front", VALUEFUNC(_wrap_ExtDistribution_front), -1);
  rb_define_method(SwigClassExtDistribution.klass, "back", VALUEFUNC(_wrap_ExtDistribution_back), -1);
  rb_define_method(SwigClassExtDistribution.klass, "assign", VALUEFUNC(_wrap_ExtDistribution_assign), -1);
  rb_define_method(SwigClassExtDistribution.klass, "resize", VALUEFUNC(_wrap_ExtDistribution_resize), -1);
  rb_define_method(SwigClassExtDistribution.klass, "insert", VALUEFUNC(_wrap_ExtDistribution_insert), -1);
  rb_define_method(SwigClassExtDistribution.klass, "reserve", VALUEFUNC(_wrap_ExtDistribution_reserve), -1);
  rb_define_method(SwigClassExtDistribution.klass, "capacity", VALUEFUNC(_wrap_ExtDistribution_capacity), -1);
  SwigClassExtDistribution.mark = 0;
  SwigClassExtDistribution.destroy = (void (*)(void *)) free_std_vector_Sl_netxpert_ExtDistributionArc_Sg_;
  SwigClassExtDistribution.trackObjects = 0;
  rb_define_module_function(mRbnetxpert, "Version", VALUEFUNC(_wrap_Version), -1);
  
  SwigClassColumnMap.klass = rb_define_class_under(mRbnetxpert, "ColumnMap", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ColumnMap, (void *) &SwigClassColumnMap);
  rb_define_alloc_func(SwigClassColumnMap.klass, _wrap_ColumnMap_allocate);
  rb_define_method(SwigClassColumnMap.klass, "initialize", VALUEFUNC(_wrap_new_ColumnMap), -1);
  rb_define_method(SwigClassColumnMap.klass, "arcIDColName=", VALUEFUNC(_wrap_ColumnMap_arcIDColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "arcIDColName", VALUEFUNC(_wrap_ColumnMap_arcIDColName_get), -1);
  rb_define_method(SwigClassColumnMap.klass, "fromColName=", VALUEFUNC(_wrap_ColumnMap_fromColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "fromColName", VALUEFUNC(_wrap_ColumnMap_fromColName_get), -1);
  rb_define_method(SwigClassColumnMap.klass, "toColName=", VALUEFUNC(_wrap_ColumnMap_toColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "toColName", VALUEFUNC(_wrap_ColumnMap_toColName_get), -1);
  rb_define_method(SwigClassColumnMap.klass, "costColName=", VALUEFUNC(_wrap_ColumnMap_costColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "costColName", VALUEFUNC(_wrap_ColumnMap_costColName_get), -1);
  rb_define_method(SwigClassColumnMap.klass, "capColName=", VALUEFUNC(_wrap_ColumnMap_capColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "capColName", VALUEFUNC(_wrap_ColumnMap_capColName_get), -1);
  rb_define_method(SwigClassColumnMap.klass, "onewayColName=", VALUEFUNC(_wrap_ColumnMap_onewayColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "onewayColName", VALUEFUNC(_wrap_ColumnMap_onewayColName_get), -1);
  rb_define_method(SwigClassColumnMap.klass, "nodeIDColName=", VALUEFUNC(_wrap_ColumnMap_nodeIDColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "nodeIDColName", VALUEFUNC(_wrap_ColumnMap_nodeIDColName_get), -1);
  rb_define_method(SwigClassColumnMap.klass, "supplyColName=", VALUEFUNC(_wrap_ColumnMap_supplyColName_set), -1);
  rb_define_method(SwigClassColumnMap.klass, "supplyColName", VALUEFUNC(_wrap_ColumnMap_supplyColName_get), -1);
  SwigClassColumnMap.mark = 0;
  SwigClassColumnMap.destroy = (void (*)(void *)) free_netxpert_ColumnMap;
  SwigClassColumnMap.trackObjects = 0;
  
  SwigClassInputNode.klass = rb_define_class_under(mRbnetxpert, "InputNode", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__InputNode, (void *) &SwigClassInputNode);
  rb_define_alloc_func(SwigClassInputNode.klass, _wrap_InputNode_allocate);
  rb_define_method(SwigClassInputNode.klass, "initialize", VALUEFUNC(_wrap_new_InputNode), -1);
  rb_define_method(SwigClassInputNode.klass, "extNodeID=", VALUEFUNC(_wrap_InputNode_extNodeID_set), -1);
  rb_define_method(SwigClassInputNode.klass, "extNodeID", VALUEFUNC(_wrap_InputNode_extNodeID_get), -1);
  rb_define_method(SwigClassInputNode.klass, "nodeSupply=", VALUEFUNC(_wrap_InputNode_nodeSupply_set), -1);
  rb_define_method(SwigClassInputNode.klass, "nodeSupply", VALUEFUNC(_wrap_InputNode_nodeSupply_get), -1);
  rb_define_method(SwigClassInputNode.klass, "to_s", VALUEFUNC(_wrap_InputNode___str__), -1);
  SwigClassInputNode.mark = 0;
  SwigClassInputNode.destroy = (void (*)(void *)) free_netxpert_InputNode;
  SwigClassInputNode.trackObjects = 0;
  
  SwigClassInputArc.klass = rb_define_class_under(mRbnetxpert, "InputArc", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__InputArc, (void *) &SwigClassInputArc);
  rb_define_alloc_func(SwigClassInputArc.klass, _wrap_InputArc_allocate);
  rb_define_method(SwigClassInputArc.klass, "initialize", VALUEFUNC(_wrap_new_InputArc), -1);
  rb_define_method(SwigClassInputArc.klass, "extArcID=", VALUEFUNC(_wrap_InputArc_extArcID_set), -1);
  rb_define_method(SwigClassInputArc.klass, "extArcID", VALUEFUNC(_wrap_InputArc_extArcID_get), -1);
  rb_define_method(SwigClassInputArc.klass, "extFromNode=", VALUEFUNC(_wrap_InputArc_extFromNode_set), -1);
  rb_define_method(SwigClassInputArc.klass, "extFromNode", VALUEFUNC(_wrap_InputArc_extFromNode_get), -1);
  rb_define_method(SwigClassInputArc.klass, "extToNode=", VALUEFUNC(_wrap_InputArc_extToNode_set), -1);
  rb_define_method(SwigClassInputArc.klass, "extToNode", VALUEFUNC(_wrap_InputArc_extToNode_get), -1);
  rb_define_method(SwigClassInputArc.klass, "cost=", VALUEFUNC(_wrap_InputArc_cost_set), -1);
  rb_define_method(SwigClassInputArc.klass, "cost", VALUEFUNC(_wrap_InputArc_cost_get), -1);
  rb_define_method(SwigClassInputArc.klass, "capacity=", VALUEFUNC(_wrap_InputArc_capacity_set), -1);
  rb_define_method(SwigClassInputArc.klass, "capacity", VALUEFUNC(_wrap_InputArc_capacity_get), -1);
  rb_define_method(SwigClassInputArc.klass, "oneway=", VALUEFUNC(_wrap_InputArc_oneway_set), -1);
  rb_define_method(SwigClassInputArc.klass, "oneway", VALUEFUNC(_wrap_InputArc_oneway_get), -1);
  rb_define_method(SwigClassInputArc.klass, "to_s", VALUEFUNC(_wrap_InputArc___str__), -1);
  SwigClassInputArc.mark = 0;
  SwigClassInputArc.destroy = (void (*)(void *)) free_netxpert_InputArc;
  SwigClassInputArc.trackObjects = 0;
  
  SwigClassNewNode.klass = rb_define_class_under(mRbnetxpert, "NewNode", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__NewNode, (void *) &SwigClassNewNode);
  rb_define_alloc_func(SwigClassNewNode.klass, _wrap_NewNode_allocate);
  rb_define_method(SwigClassNewNode.klass, "initialize", VALUEFUNC(_wrap_new_NewNode), -1);
  rb_define_method(SwigClassNewNode.klass, "extNodeID=", VALUEFUNC(_wrap_NewNode_extNodeID_set), -1);
  rb_define_method(SwigClassNewNode.klass, "extNodeID", VALUEFUNC(_wrap_NewNode_extNodeID_get), -1);
  rb_define_method(SwigClassNewNode.klass, "coord=", VALUEFUNC(_wrap_NewNode_coord_set), -1);
  rb_define_method(SwigClassNewNode.klass, "coord", VALUEFUNC(_wrap_NewNode_coord_get), -1);
  rb_define_method(SwigClassNewNode.klass, "supply=", VALUEFUNC(_wrap_NewNode_supply_set), -1);
  rb_define_method(SwigClassNewNode.klass, "supply", VALUEFUNC(_wrap_NewNode_supply_get), -1);
  SwigClassNewNode.mark = 0;
  SwigClassNewNode.destroy = (void (*)(void *)) free_netxpert_NewNode;
  SwigClassNewNode.trackObjects = 0;
  
  SwigClassODPair.klass = rb_define_class_under(mRbnetxpert, "ODPair", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ODPair, (void *) &SwigClassODPair);
  rb_define_alloc_func(SwigClassODPair.klass, _wrap_ODPair_allocate);
  rb_define_method(SwigClassODPair.klass, "initialize", VALUEFUNC(_wrap_new_ODPair), -1);
  rb_define_method(SwigClassODPair.klass, "origin=", VALUEFUNC(_wrap_ODPair_origin_set), -1);
  rb_define_method(SwigClassODPair.klass, "origin", VALUEFUNC(_wrap_ODPair_origin_get), -1);
  rb_define_method(SwigClassODPair.klass, "dest=", VALUEFUNC(_wrap_ODPair_dest_set), -1);
  rb_define_method(SwigClassODPair.klass, "dest", VALUEFUNC(_wrap_ODPair_dest_get), -1);
  SwigClassODPair.mark = 0;
  SwigClassODPair.destroy = (void (*)(void *)) free_netxpert_ODPair;
  SwigClassODPair.trackObjects = 0;
  
  SwigClassInternalArc.klass = rb_define_class_under(mRbnetxpert, "InternalArc", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__InternalArc, (void *) &SwigClassInternalArc);
  rb_define_alloc_func(SwigClassInternalArc.klass, _wrap_InternalArc_allocate);
  rb_define_method(SwigClassInternalArc.klass, "initialize", VALUEFUNC(_wrap_new_InternalArc), -1);
  rb_define_method(SwigClassInternalArc.klass, "fromNode=", VALUEFUNC(_wrap_InternalArc_fromNode_set), -1);
  rb_define_method(SwigClassInternalArc.klass, "fromNode", VALUEFUNC(_wrap_InternalArc_fromNode_get), -1);
  rb_define_method(SwigClassInternalArc.klass, "toNode=", VALUEFUNC(_wrap_InternalArc_toNode_set), -1);
  rb_define_method(SwigClassInternalArc.klass, "toNode", VALUEFUNC(_wrap_InternalArc_toNode_get), -1);
  SwigClassInternalArc.mark = 0;
  SwigClassInternalArc.destroy = (void (*)(void *)) free_netxpert_InternalArc;
  SwigClassInternalArc.trackObjects = 0;
  
  SwigClassFlowCost.klass = rb_define_class_under(mRbnetxpert, "FlowCost", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__FlowCost, (void *) &SwigClassFlowCost);
  rb_define_alloc_func(SwigClassFlowCost.klass, _wrap_FlowCost_allocate);
  rb_define_method(SwigClassFlowCost.klass, "initialize", VALUEFUNC(_wrap_new_FlowCost), -1);
  rb_define_method(SwigClassFlowCost.klass, "intArc=", VALUEFUNC(_wrap_FlowCost_intArc_set), -1);
  rb_define_method(SwigClassFlowCost.klass, "intArc", VALUEFUNC(_wrap_FlowCost_intArc_get), -1);
  rb_define_method(SwigClassFlowCost.klass, "flow=", VALUEFUNC(_wrap_FlowCost_flow_set), -1);
  rb_define_method(SwigClassFlowCost.klass, "flow", VALUEFUNC(_wrap_FlowCost_flow_get), -1);
  rb_define_method(SwigClassFlowCost.klass, "cost=", VALUEFUNC(_wrap_FlowCost_cost_set), -1);
  rb_define_method(SwigClassFlowCost.klass, "cost", VALUEFUNC(_wrap_FlowCost_cost_get), -1);
  SwigClassFlowCost.mark = 0;
  SwigClassFlowCost.destroy = (void (*)(void *)) free_netxpert_FlowCost;
  SwigClassFlowCost.trackObjects = 0;
  
  SwigClassExtNodeSupply.klass = rb_define_class_under(mRbnetxpert, "ExtNodeSupply", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ExtNodeSupply, (void *) &SwigClassExtNodeSupply);
  rb_define_alloc_func(SwigClassExtNodeSupply.klass, _wrap_ExtNodeSupply_allocate);
  rb_define_method(SwigClassExtNodeSupply.klass, "initialize", VALUEFUNC(_wrap_new_ExtNodeSupply), -1);
  rb_define_method(SwigClassExtNodeSupply.klass, "extNodeID=", VALUEFUNC(_wrap_ExtNodeSupply_extNodeID_set), -1);
  rb_define_method(SwigClassExtNodeSupply.klass, "extNodeID", VALUEFUNC(_wrap_ExtNodeSupply_extNodeID_get), -1);
  rb_define_method(SwigClassExtNodeSupply.klass, "supply=", VALUEFUNC(_wrap_ExtNodeSupply_supply_set), -1);
  rb_define_method(SwigClassExtNodeSupply.klass, "supply", VALUEFUNC(_wrap_ExtNodeSupply_supply_get), -1);
  SwigClassExtNodeSupply.mark = 0;
  SwigClassExtNodeSupply.destroy = (void (*)(void *)) free_netxpert_ExtNodeSupply;
  SwigClassExtNodeSupply.trackObjects = 0;
  
  SwigClassExternalArc.klass = rb_define_class_under(mRbnetxpert, "ExternalArc", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ExternalArc, (void *) &SwigClassExternalArc);
  rb_define_alloc_func(SwigClassExternalArc.klass, _wrap_ExternalArc_allocate);
  rb_define_method(SwigClassExternalArc.klass, "initialize", VALUEFUNC(_wrap_new_ExternalArc), -1);
  rb_define_method(SwigClassExternalArc.klass, "extFromNode=", VALUEFUNC(_wrap_ExternalArc_extFromNode_set), -1);
  rb_define_method(SwigClassExternalArc.klass, "extFromNode", VALUEFUNC(_wrap_ExternalArc_extFromNode_get), -1);
  rb_define_method(SwigClassExternalArc.klass, "extToNode=", VALUEFUNC(_wrap_ExternalArc_extToNode_set), -1);
  rb_define_method(SwigClassExternalArc.klass, "extToNode", VALUEFUNC(_wrap_ExternalArc_extToNode_get), -1);
  SwigClassExternalArc.mark = 0;
  SwigClassExternalArc.destroy = (void (*)(void *)) free_netxpert_ExternalArc;
  SwigClassExternalArc.trackObjects = 0;
  
  SwigClassExtSPTreeArc.klass = rb_define_class_under(mRbnetxpert, "ExtSPTreeArc", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ExtSPTreeArc, (void *) &SwigClassExtSPTreeArc);
  rb_define_alloc_func(SwigClassExtSPTreeArc.klass, _wrap_ExtSPTreeArc_allocate);
  rb_define_method(SwigClassExtSPTreeArc.klass, "initialize", VALUEFUNC(_wrap_new_ExtSPTreeArc), -1);
  rb_define_method(SwigClassExtSPTreeArc.klass, "extArcID=", VALUEFUNC(_wrap_ExtSPTreeArc_extArcID_set), -1);
  rb_define_method(SwigClassExtSPTreeArc.klass, "extArcID", VALUEFUNC(_wrap_ExtSPTreeArc_extArcID_get), -1);
  rb_define_method(SwigClassExtSPTreeArc.klass, "extArc=", VALUEFUNC(_wrap_ExtSPTreeArc_extArc_set), -1);
  rb_define_method(SwigClassExtSPTreeArc.klass, "extArc", VALUEFUNC(_wrap_ExtSPTreeArc_extArc_get), -1);
  rb_define_method(SwigClassExtSPTreeArc.klass, "cost=", VALUEFUNC(_wrap_ExtSPTreeArc_cost_set), -1);
  rb_define_method(SwigClassExtSPTreeArc.klass, "cost", VALUEFUNC(_wrap_ExtSPTreeArc_cost_get), -1);
  SwigClassExtSPTreeArc.mark = 0;
  SwigClassExtSPTreeArc.destroy = (void (*)(void *)) free_netxpert_ExtSPTreeArc;
  SwigClassExtSPTreeArc.trackObjects = 0;
  
  SwigClassExtTransportationData.klass = rb_define_class_under(mRbnetxpert, "ExtTransportationData", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ExtTransportationData, (void *) &SwigClassExtTransportationData);
  rb_define_alloc_func(SwigClassExtTransportationData.klass, _wrap_ExtTransportationData_allocate);
  rb_define_method(SwigClassExtTransportationData.klass, "initialize", VALUEFUNC(_wrap_new_ExtTransportationData), -1);
  rb_define_method(SwigClassExtTransportationData.klass, "odm=", VALUEFUNC(_wrap_ExtTransportationData_odm_set), -1);
  rb_define_method(SwigClassExtTransportationData.klass, "odm", VALUEFUNC(_wrap_ExtTransportationData_odm_get), -1);
  rb_define_method(SwigClassExtTransportationData.klass, "supply=", VALUEFUNC(_wrap_ExtTransportationData_supply_set), -1);
  rb_define_method(SwigClassExtTransportationData.klass, "supply", VALUEFUNC(_wrap_ExtTransportationData_supply_get), -1);
  SwigClassExtTransportationData.mark = 0;
  SwigClassExtTransportationData.destroy = (void (*)(void *)) free_netxpert_ExtTransportationData;
  SwigClassExtTransportationData.trackObjects = 0;
  
  SwigClassExtDistributionArc.klass = rb_define_class_under(mRbnetxpert, "ExtDistributionArc", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ExtDistributionArc, (void *) &SwigClassExtDistributionArc);
  rb_define_alloc_func(SwigClassExtDistributionArc.klass, _wrap_ExtDistributionArc_allocate);
  rb_define_method(SwigClassExtDistributionArc.klass, "initialize", VALUEFUNC(_wrap_new_ExtDistributionArc), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "arcid=", VALUEFUNC(_wrap_ExtDistributionArc_arcid_set), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "arcid", VALUEFUNC(_wrap_ExtDistributionArc_arcid_get), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "extArc=", VALUEFUNC(_wrap_ExtDistributionArc_extArc_set), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "extArc", VALUEFUNC(_wrap_ExtDistributionArc_extArc_get), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "cost=", VALUEFUNC(_wrap_ExtDistributionArc_cost_set), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "cost", VALUEFUNC(_wrap_ExtDistributionArc_cost_get), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "flow=", VALUEFUNC(_wrap_ExtDistributionArc_flow_set), -1);
  rb_define_method(SwigClassExtDistributionArc.klass, "flow", VALUEFUNC(_wrap_ExtDistributionArc_flow_get), -1);
  SwigClassExtDistributionArc.mark = 0;
  SwigClassExtDistributionArc.destroy = (void (*)(void *)) free_netxpert_ExtDistributionArc;
  SwigClassExtDistributionArc.trackObjects = 0;
  rb_define_const(mRbnetxpert, "NoGeometry", SWIG_From_int(static_cast< int >(netxpert::NoGeometry)));
  rb_define_const(mRbnetxpert, "StraightLines", SWIG_From_int(static_cast< int >(netxpert::StraightLines)));
  rb_define_const(mRbnetxpert, "RealGeometry", SWIG_From_int(static_cast< int >(netxpert::RealGeometry)));
  rb_define_const(mRbnetxpert, "NetworkBuilder", SWIG_From_int(static_cast< int >(netxpert::NetworkBuilder)));
  rb_define_const(mRbnetxpert, "ShortestPathTreeCOM", SWIG_From_int(static_cast< int >(netxpert::ShortestPathTreeCOM)));
  rb_define_const(mRbnetxpert, "ODMatrixCOM", SWIG_From_int(static_cast< int >(netxpert::ODMatrixCOM)));
  rb_define_const(mRbnetxpert, "TransportationCOM", SWIG_From_int(static_cast< int >(netxpert::TransportationCOM)));
  rb_define_const(mRbnetxpert, "MSTCOM", SWIG_From_int(static_cast< int >(netxpert::MSTCOM)));
  rb_define_const(mRbnetxpert, "IsolinesCOM", SWIG_From_int(static_cast< int >(netxpert::IsolinesCOM)));
  rb_define_const(mRbnetxpert, "DumpInternalArcsToDB", SWIG_From_int(static_cast< int >(netxpert::DumpInternalArcsToDB)));
  rb_define_const(mRbnetxpert, "NetworkConvert", SWIG_From_int(static_cast< int >(netxpert::NetworkConvert)));
  rb_define_const(mRbnetxpert, "TestFileGDBWriter", SWIG_From_int(static_cast< int >(netxpert::TestFileGDBWriter)));
  rb_define_const(mRbnetxpert, "TestSpatiaLiteWriter", SWIG_From_int(static_cast< int >(netxpert::TestSpatiaLiteWriter)));
  rb_define_const(mRbnetxpert, "TestAddNodes", SWIG_From_int(static_cast< int >(netxpert::TestAddNodes)));
  rb_define_const(mRbnetxpert, "TestCreateRouteGeometries", SWIG_From_int(static_cast< int >(netxpert::TestCreateRouteGeometries)));
  rb_define_const(mRbnetxpert, "MCFCOM", SWIG_From_int(static_cast< int >(netxpert::MCFCOM)));
  rb_define_const(mRbnetxpert, "TransportationCOMExt", SWIG_From_int(static_cast< int >(netxpert::TransportationCOMExt)));
  rb_define_const(mRbnetxpert, "SpatiaLiteDB", SWIG_From_int(static_cast< int >(netxpert::SpatiaLiteDB)));
  rb_define_const(mRbnetxpert, "ESRI_FileGDB", SWIG_From_int(static_cast< int >(netxpert::ESRI_FileGDB)));
  rb_define_const(mRbnetxpert, "LogAll", SWIG_From_int(static_cast< int >(netxpert::LogAll)));
  rb_define_const(mRbnetxpert, "LogDebug", SWIG_From_int(static_cast< int >(netxpert::LogDebug)));
  rb_define_const(mRbnetxpert, "LogInfo", SWIG_From_int(static_cast< int >(netxpert::LogInfo)));
  rb_define_const(mRbnetxpert, "LogWarning", SWIG_From_int(static_cast< int >(netxpert::LogWarning)));
  rb_define_const(mRbnetxpert, "LogError", SWIG_From_int(static_cast< int >(netxpert::LogError)));
  rb_define_const(mRbnetxpert, "LogFatal", SWIG_From_int(static_cast< int >(netxpert::LogFatal)));
  rb_define_const(mRbnetxpert, "Dijkstra_MCFClass", SWIG_From_int(static_cast< int >(netxpert::Dijkstra_MCFClass)));
  rb_define_const(mRbnetxpert, "LQueue_MCFClass", SWIG_From_int(static_cast< int >(netxpert::LQueue_MCFClass)));
  rb_define_const(mRbnetxpert, "LDeque_MCFClass", SWIG_From_int(static_cast< int >(netxpert::LDeque_MCFClass)));
  rb_define_const(mRbnetxpert, "Dijkstra_Heap_MCFClass", SWIG_From_int(static_cast< int >(netxpert::Dijkstra_Heap_MCFClass)));
  rb_define_const(mRbnetxpert, "Dijkstra_2Heap_LEMON", SWIG_From_int(static_cast< int >(netxpert::Dijkstra_2Heap_LEMON)));
  rb_define_const(mRbnetxpert, "NetworkSimplex_MCF", SWIG_From_int(static_cast< int >(netxpert::NetworkSimplex_MCF)));
  rb_define_const(mRbnetxpert, "NetworkSimplex_LEMON", SWIG_From_int(static_cast< int >(netxpert::NetworkSimplex_LEMON)));
  rb_define_const(mRbnetxpert, "Kruskal_LEMON", SWIG_From_int(static_cast< int >(netxpert::Kruskal_LEMON)));
  rb_define_const(mRbnetxpert, "MCFUnSolved", SWIG_From_int(static_cast< int >(netxpert::MCFUnSolved)));
  rb_define_const(mRbnetxpert, "MCFOK", SWIG_From_int(static_cast< int >(netxpert::MCFOK)));
  rb_define_const(mRbnetxpert, "MCFStopped", SWIG_From_int(static_cast< int >(netxpert::MCFStopped)));
  rb_define_const(mRbnetxpert, "MCFUnfeasible", SWIG_From_int(static_cast< int >(netxpert::MCFUnfeasible)));
  rb_define_const(mRbnetxpert, "MCFUnbounded", SWIG_From_int(static_cast< int >(netxpert::MCFUnbounded)));
  rb_define_const(mRbnetxpert, "MCFError", SWIG_From_int(static_cast< int >(netxpert::MCFError)));
  rb_define_const(mRbnetxpert, "MCFUndefined", SWIG_From_int(static_cast< int >(netxpert::MCFUndefined)));
  rb_define_const(mRbnetxpert, "MCFBalanced", SWIG_From_int(static_cast< int >(netxpert::MCFBalanced)));
  rb_define_const(mRbnetxpert, "MCFExtrasupply", SWIG_From_int(static_cast< int >(netxpert::MCFExtrasupply)));
  rb_define_const(mRbnetxpert, "MCFExtrademand", SWIG_From_int(static_cast< int >(netxpert::MCFExtrademand)));
  
  SwigClassConfig.klass = rb_define_class_under(mRbnetxpert, "Config", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__Config, (void *) &SwigClassConfig);
  rb_define_alloc_func(SwigClassConfig.klass, _wrap_Config_allocate);
  rb_define_method(SwigClassConfig.klass, "initialize", VALUEFUNC(_wrap_new_Config), -1);
  rb_define_method(SwigClassConfig.klass, "NetXDBPath=", VALUEFUNC(_wrap_Config_NetXDBPath_set), -1);
  rb_define_method(SwigClassConfig.klass, "NetXDBPath", VALUEFUNC(_wrap_Config_NetXDBPath_get), -1);
  rb_define_method(SwigClassConfig.klass, "ResultDBPath=", VALUEFUNC(_wrap_Config_ResultDBPath_set), -1);
  rb_define_method(SwigClassConfig.klass, "ResultDBPath", VALUEFUNC(_wrap_Config_ResultDBPath_get), -1);
  rb_define_method(SwigClassConfig.klass, "ResultDBType=", VALUEFUNC(_wrap_Config_ResultDBType_set), -1);
  rb_define_method(SwigClassConfig.klass, "ResultDBType", VALUEFUNC(_wrap_Config_ResultDBType_get), -1);
  rb_define_method(SwigClassConfig.klass, "ResultTableName=", VALUEFUNC(_wrap_Config_ResultTableName_set), -1);
  rb_define_method(SwigClassConfig.klass, "ResultTableName", VALUEFUNC(_wrap_Config_ResultTableName_get), -1);
  rb_define_method(SwigClassConfig.klass, "SPTAllDests=", VALUEFUNC(_wrap_Config_SPTAllDests_set), -1);
  rb_define_method(SwigClassConfig.klass, "SPTAllDests", VALUEFUNC(_wrap_Config_SPTAllDests_get), -1);
  rb_define_method(SwigClassConfig.klass, "SPTHeapCard=", VALUEFUNC(_wrap_Config_SPTHeapCard_set), -1);
  rb_define_method(SwigClassConfig.klass, "SPTHeapCard", VALUEFUNC(_wrap_Config_SPTHeapCard_get), -1);
  rb_define_method(SwigClassConfig.klass, "SptAlgorithm=", VALUEFUNC(_wrap_Config_SptAlgorithm_set), -1);
  rb_define_method(SwigClassConfig.klass, "SptAlgorithm", VALUEFUNC(_wrap_Config_SptAlgorithm_get), -1);
  rb_define_method(SwigClassConfig.klass, "McfAlgorithm=", VALUEFUNC(_wrap_Config_McfAlgorithm_set), -1);
  rb_define_method(SwigClassConfig.klass, "McfAlgorithm", VALUEFUNC(_wrap_Config_McfAlgorithm_get), -1);
  rb_define_method(SwigClassConfig.klass, "MstAlgorithm=", VALUEFUNC(_wrap_Config_MstAlgorithm_set), -1);
  rb_define_method(SwigClassConfig.klass, "MstAlgorithm", VALUEFUNC(_wrap_Config_MstAlgorithm_get), -1);
  rb_define_method(SwigClassConfig.klass, "IsDirected=", VALUEFUNC(_wrap_Config_IsDirected_set), -1);
  rb_define_method(SwigClassConfig.klass, "IsDirected", VALUEFUNC(_wrap_Config_IsDirected_get), -1);
  rb_define_method(SwigClassConfig.klass, "ArcsTableName=", VALUEFUNC(_wrap_Config_ArcsTableName_set), -1);
  rb_define_method(SwigClassConfig.klass, "ArcsTableName", VALUEFUNC(_wrap_Config_ArcsTableName_get), -1);
  rb_define_method(SwigClassConfig.klass, "ArcsGeomColumnName=", VALUEFUNC(_wrap_Config_ArcsGeomColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "ArcsGeomColumnName", VALUEFUNC(_wrap_Config_ArcsGeomColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "ArcIDColumnName=", VALUEFUNC(_wrap_Config_ArcIDColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "ArcIDColumnName", VALUEFUNC(_wrap_Config_ArcIDColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "FromNodeColumnName=", VALUEFUNC(_wrap_Config_FromNodeColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "FromNodeColumnName", VALUEFUNC(_wrap_Config_FromNodeColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "ToNodeColumnName=", VALUEFUNC(_wrap_Config_ToNodeColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "ToNodeColumnName", VALUEFUNC(_wrap_Config_ToNodeColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "CostColumnName=", VALUEFUNC(_wrap_Config_CostColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "CostColumnName", VALUEFUNC(_wrap_Config_CostColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "CapColumnName=", VALUEFUNC(_wrap_Config_CapColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "CapColumnName", VALUEFUNC(_wrap_Config_CapColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "NodesTableName=", VALUEFUNC(_wrap_Config_NodesTableName_set), -1);
  rb_define_method(SwigClassConfig.klass, "NodesTableName", VALUEFUNC(_wrap_Config_NodesTableName_get), -1);
  rb_define_method(SwigClassConfig.klass, "NodesGeomColumnName=", VALUEFUNC(_wrap_Config_NodesGeomColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "NodesGeomColumnName", VALUEFUNC(_wrap_Config_NodesGeomColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "NodeIDColumnName=", VALUEFUNC(_wrap_Config_NodeIDColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "NodeIDColumnName", VALUEFUNC(_wrap_Config_NodeIDColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "NodeSupplyColumnName=", VALUEFUNC(_wrap_Config_NodeSupplyColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "NodeSupplyColumnName", VALUEFUNC(_wrap_Config_NodeSupplyColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPolyTableName=", VALUEFUNC(_wrap_Config_BarrierPolyTableName_set), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPolyTableName", VALUEFUNC(_wrap_Config_BarrierPolyTableName_get), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPolyGeomColumnName=", VALUEFUNC(_wrap_Config_BarrierPolyGeomColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPolyGeomColumnName", VALUEFUNC(_wrap_Config_BarrierPolyGeomColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierLineTableName=", VALUEFUNC(_wrap_Config_BarrierLineTableName_set), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierLineTableName", VALUEFUNC(_wrap_Config_BarrierLineTableName_get), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierLineGeomColumnName=", VALUEFUNC(_wrap_Config_BarrierLineGeomColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierLineGeomColumnName", VALUEFUNC(_wrap_Config_BarrierLineGeomColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPointTableName=", VALUEFUNC(_wrap_Config_BarrierPointTableName_set), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPointTableName", VALUEFUNC(_wrap_Config_BarrierPointTableName_get), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPointGeomColumnName=", VALUEFUNC(_wrap_Config_BarrierPointGeomColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "BarrierPointGeomColumnName", VALUEFUNC(_wrap_Config_BarrierPointGeomColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "Treshold=", VALUEFUNC(_wrap_Config_Treshold_set), -1);
  rb_define_method(SwigClassConfig.klass, "Treshold", VALUEFUNC(_wrap_Config_Treshold_get), -1);
  rb_define_method(SwigClassConfig.klass, "UseSpatialIndex=", VALUEFUNC(_wrap_Config_UseSpatialIndex_set), -1);
  rb_define_method(SwigClassConfig.klass, "UseSpatialIndex", VALUEFUNC(_wrap_Config_UseSpatialIndex_get), -1);
  rb_define_method(SwigClassConfig.klass, "LoadDBIntoMemory=", VALUEFUNC(_wrap_Config_LoadDBIntoMemory_set), -1);
  rb_define_method(SwigClassConfig.klass, "LoadDBIntoMemory", VALUEFUNC(_wrap_Config_LoadDBIntoMemory_get), -1);
  rb_define_method(SwigClassConfig.klass, "NumberOfTests=", VALUEFUNC(_wrap_Config_NumberOfTests_set), -1);
  rb_define_method(SwigClassConfig.klass, "NumberOfTests", VALUEFUNC(_wrap_Config_NumberOfTests_get), -1);
  rb_define_method(SwigClassConfig.klass, "SpatiaLiteHome=", VALUEFUNC(_wrap_Config_SpatiaLiteHome_set), -1);
  rb_define_method(SwigClassConfig.klass, "SpatiaLiteHome", VALUEFUNC(_wrap_Config_SpatiaLiteHome_get), -1);
  rb_define_method(SwigClassConfig.klass, "SpatiaLiteCoreName=", VALUEFUNC(_wrap_Config_SpatiaLiteCoreName_set), -1);
  rb_define_method(SwigClassConfig.klass, "SpatiaLiteCoreName", VALUEFUNC(_wrap_Config_SpatiaLiteCoreName_get), -1);
  rb_define_method(SwigClassConfig.klass, "GeometryHandling=", VALUEFUNC(_wrap_Config_GeometryHandling_set), -1);
  rb_define_method(SwigClassConfig.klass, "GeometryHandling", VALUEFUNC(_wrap_Config_GeometryHandling_get), -1);
  rb_define_method(SwigClassConfig.klass, "OnewayColumnName=", VALUEFUNC(_wrap_Config_OnewayColumnName_set), -1);
  rb_define_method(SwigClassConfig.klass, "OnewayColumnName", VALUEFUNC(_wrap_Config_OnewayColumnName_get), -1);
  rb_define_method(SwigClassConfig.klass, "TestCase=", VALUEFUNC(_wrap_Config_TestCase_set), -1);
  rb_define_method(SwigClassConfig.klass, "TestCase", VALUEFUNC(_wrap_Config_TestCase_get), -1);
  rb_define_method(SwigClassConfig.klass, "CleanNetwork=", VALUEFUNC(_wrap_Config_CleanNetwork_set), -1);
  rb_define_method(SwigClassConfig.klass, "CleanNetwork", VALUEFUNC(_wrap_Config_CleanNetwork_get), -1);
  rb_define_method(SwigClassConfig.klass, "LogLevel=", VALUEFUNC(_wrap_Config_LogLevel_set), -1);
  rb_define_method(SwigClassConfig.klass, "LogLevel", VALUEFUNC(_wrap_Config_LogLevel_get), -1);
  rb_define_method(SwigClassConfig.klass, "LogFileFullPath=", VALUEFUNC(_wrap_Config_LogFileFullPath_set), -1);
  rb_define_method(SwigClassConfig.klass, "LogFileFullPath", VALUEFUNC(_wrap_Config_LogFileFullPath_get), -1);
  SwigClassConfig.mark = 0;
  SwigClassConfig.destroy = (void (*)(void *)) free_netxpert_Config;
  SwigClassConfig.trackObjects = 0;
  
  SwigClassNetwork.klass = rb_define_class_under(mRbnetxpert, "Network", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__Network, (void *) &SwigClassNetwork);
  rb_define_alloc_func(SwigClassNetwork.klass, _wrap_Network_allocate);
  rb_define_method(SwigClassNetwork.klass, "initialize", VALUEFUNC(_wrap_new_Network), -1);
  rb_define_method(SwigClassNetwork.klass, "ConvertInputNetwork", VALUEFUNC(_wrap_Network_ConvertInputNetwork), -1);
  rb_define_method(SwigClassNetwork.klass, "LoadStartNodes", VALUEFUNC(_wrap_Network_LoadStartNodes), -1);
  rb_define_method(SwigClassNetwork.klass, "LoadEndNodes", VALUEFUNC(_wrap_Network_LoadEndNodes), -1);
  rb_define_method(SwigClassNetwork.klass, "GetOriginalNodeID", VALUEFUNC(_wrap_Network_GetOriginalNodeID), -1);
  rb_define_method(SwigClassNetwork.klass, "GetOriginalStartOrEndNodeID", VALUEFUNC(_wrap_Network_GetOriginalStartOrEndNodeID), -1);
  SwigClassNetwork.mark = 0;
  SwigClassNetwork.destroy = (void (*)(void *)) free_netxpert_Network;
  SwigClassNetwork.trackObjects = 0;
  
  SwigClassLOGGER.klass = rb_define_class_under(mRbnetxpert, "LOGGER", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__LOGGER, (void *) &SwigClassLOGGER);
  rb_undef_alloc_func(SwigClassLOGGER.klass);
  rb_define_singleton_method(SwigClassLOGGER.klass, "Initialize", VALUEFUNC(_wrap_LOGGER_Initialize), -1);
  rb_define_singleton_method(SwigClassLOGGER.klass, "IsInitialized", VALUEFUNC(_wrap_LOGGER_IsInitialized_get), 0);
  rb_define_singleton_method(SwigClassLOGGER.klass, "IsInitialized=", VALUEFUNC(_wrap_LOGGER_IsInitialized_set), 1);
  SwigClassLOGGER.mark = 0;
  SwigClassLOGGER.destroy = (void (*)(void *)) free_netxpert_LOGGER;
  SwigClassLOGGER.trackObjects = 0;
  
  SwigClassDBHELPER.klass = rb_define_class_under(mRbnetxpert, "DBHELPER", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__DBHELPER, (void *) &SwigClassDBHELPER);
  rb_undef_alloc_func(SwigClassDBHELPER.klass);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "Initialize", VALUEFUNC(_wrap_DBHELPER_Initialize), -1);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "IsInitialized", VALUEFUNC(_wrap_DBHELPER_IsInitialized_get), 0);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "IsInitialized=", VALUEFUNC(_wrap_DBHELPER_IsInitialized_set), 1);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "CommitCurrentTransaction", VALUEFUNC(_wrap_DBHELPER_CommitCurrentTransaction), -1);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "OpenNewTransaction", VALUEFUNC(_wrap_DBHELPER_OpenNewTransaction), -1);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "LoadNetworkFromDB", VALUEFUNC(_wrap_DBHELPER_LoadNetworkFromDB), -1);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "LoadNodesFromDB", VALUEFUNC(_wrap_DBHELPER_LoadNodesFromDB), -1);
  rb_define_singleton_method(SwigClassDBHELPER.klass, "CloseConnection", VALUEFUNC(_wrap_DBHELPER_CloseConnection), -1);
  SwigClassDBHELPER.mark = 0;
  SwigClassDBHELPER.destroy = (void (*)(void *)) free_netxpert_DBHELPER;
  SwigClassDBHELPER.trackObjects = 0;
  
  SwigClassISolver.klass = rb_define_class_under(mRbnetxpert, "ISolver", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ISolver, (void *) &SwigClassISolver);
  rb_undef_alloc_func(SwigClassISolver.klass);
  rb_define_method(SwigClassISolver.klass, "Solve", VALUEFUNC(_wrap_ISolver_Solve), -1);
  SwigClassISolver.mark = 0;
  SwigClassISolver.destroy = (void (*)(void *)) free_netxpert_ISolver;
  SwigClassISolver.trackObjects = 0;
  
  SwigClassMinimumSpanningTree.klass = rb_define_class_under(mRbnetxpert, "MinimumSpanningTree", ((swig_class *) SWIGTYPE_p_netxpert__ISolver->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__MinimumSpanningTree, (void *) &SwigClassMinimumSpanningTree);
  rb_define_alloc_func(SwigClassMinimumSpanningTree.klass, _wrap_MinimumSpanningTree_allocate);
  rb_define_method(SwigClassMinimumSpanningTree.klass, "initialize", VALUEFUNC(_wrap_new_MinimumSpanningTree), -1);
  rb_define_method(SwigClassMinimumSpanningTree.klass, "Solve", VALUEFUNC(_wrap_MinimumSpanningTree_Solve), -1);
  rb_define_method(SwigClassMinimumSpanningTree.klass, "GetAlgorithm", VALUEFUNC(_wrap_MinimumSpanningTree_GetAlgorithm), -1);
  rb_define_method(SwigClassMinimumSpanningTree.klass, "SetAlgorithm", VALUEFUNC(_wrap_MinimumSpanningTree_SetAlgorithm), -1);
  rb_define_method(SwigClassMinimumSpanningTree.klass, "GetOptimum", VALUEFUNC(_wrap_MinimumSpanningTree_GetOptimum), -1);
  rb_define_method(SwigClassMinimumSpanningTree.klass, "GetMinimumSpanningTree", VALUEFUNC(_wrap_MinimumSpanningTree_GetMinimumSpanningTree), -1);
  SwigClassMinimumSpanningTree.mark = 0;
  SwigClassMinimumSpanningTree.destroy = (void (*)(void *)) free_netxpert_MinimumSpanningTree;
  SwigClassMinimumSpanningTree.trackObjects = 0;
  
  SwigClassOriginDestinationMatrix.klass = rb_define_class_under(mRbnetxpert, "OriginDestinationMatrix", ((swig_class *) SWIGTYPE_p_netxpert__ISolver->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__OriginDestinationMatrix, (void *) &SwigClassOriginDestinationMatrix);
  rb_define_alloc_func(SwigClassOriginDestinationMatrix.klass, _wrap_OriginDestinationMatrix_allocate);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "initialize", VALUEFUNC(_wrap_new_OriginDestinationMatrix), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "Solve", VALUEFUNC(_wrap_OriginDestinationMatrix_Solve), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetAlgorithm", VALUEFUNC(_wrap_OriginDestinationMatrix_GetAlgorithm), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "SetAlgorithm", VALUEFUNC(_wrap_OriginDestinationMatrix_SetAlgorithm), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetSPTHeapCard", VALUEFUNC(_wrap_OriginDestinationMatrix_GetSPTHeapCard), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "SetSPTHeapCard", VALUEFUNC(_wrap_OriginDestinationMatrix_SetSPTHeapCard), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetGeometryHandling", VALUEFUNC(_wrap_OriginDestinationMatrix_GetGeometryHandling), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "SetGeometryHandling", VALUEFUNC(_wrap_OriginDestinationMatrix_SetGeometryHandling), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetOrigins", VALUEFUNC(_wrap_OriginDestinationMatrix_GetOrigins), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "SetOrigins", VALUEFUNC(_wrap_OriginDestinationMatrix_SetOrigins), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetDestinations", VALUEFUNC(_wrap_OriginDestinationMatrix_GetDestinations), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "SetDestinations", VALUEFUNC(_wrap_OriginDestinationMatrix_SetDestinations), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetReachedDests", VALUEFUNC(_wrap_OriginDestinationMatrix_GetReachedDests), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetShortestPaths", VALUEFUNC(_wrap_OriginDestinationMatrix_GetShortestPaths), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetODMatrix", VALUEFUNC(_wrap_OriginDestinationMatrix_GetODMatrix), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "GetOptimum", VALUEFUNC(_wrap_OriginDestinationMatrix_GetOptimum), -1);
  rb_define_method(SwigClassOriginDestinationMatrix.klass, "UncompressRoute", VALUEFUNC(_wrap_OriginDestinationMatrix_UncompressRoute), -1);
  SwigClassOriginDestinationMatrix.mark = 0;
  SwigClassOriginDestinationMatrix.destroy = (void (*)(void *)) free_netxpert_OriginDestinationMatrix;
  SwigClassOriginDestinationMatrix.trackObjects = 0;
  
  SwigClassShortestPathTree.klass = rb_define_class_under(mRbnetxpert, "ShortestPathTree", ((swig_class *) SWIGTYPE_p_netxpert__ISolver->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__ShortestPathTree, (void *) &SwigClassShortestPathTree);
  rb_define_alloc_func(SwigClassShortestPathTree.klass, _wrap_ShortestPathTree_allocate);
  rb_define_method(SwigClassShortestPathTree.klass, "initialize", VALUEFUNC(_wrap_new_ShortestPathTree), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "Solve", VALUEFUNC(_wrap_ShortestPathTree_Solve), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetAlgorithm", VALUEFUNC(_wrap_ShortestPathTree_GetAlgorithm), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "SetAlgorithm", VALUEFUNC(_wrap_ShortestPathTree_SetAlgorithm), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetSPTHeapCard", VALUEFUNC(_wrap_ShortestPathTree_GetSPTHeapCard), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "SetSPTHeapCard", VALUEFUNC(_wrap_ShortestPathTree_SetSPTHeapCard), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetGeometryHandling", VALUEFUNC(_wrap_ShortestPathTree_GetGeometryHandling), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "SetGeometryHandling", VALUEFUNC(_wrap_ShortestPathTree_SetGeometryHandling), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetOrigin", VALUEFUNC(_wrap_ShortestPathTree_GetOrigin), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "SetOrigin", VALUEFUNC(_wrap_ShortestPathTree_SetOrigin), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetDestinations", VALUEFUNC(_wrap_ShortestPathTree_GetDestinations), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "SetDestinations", VALUEFUNC(_wrap_ShortestPathTree_SetDestinations), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetReachedDests", VALUEFUNC(_wrap_ShortestPathTree_GetReachedDests), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetShortestPaths", VALUEFUNC(_wrap_ShortestPathTree_GetShortestPaths), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "GetOptimum", VALUEFUNC(_wrap_ShortestPathTree_GetOptimum), -1);
  rb_define_method(SwigClassShortestPathTree.klass, "UncompressRoute", VALUEFUNC(_wrap_ShortestPathTree_UncompressRoute), -1);
  SwigClassShortestPathTree.mark = 0;
  SwigClassShortestPathTree.destroy = (void (*)(void *)) free_netxpert_ShortestPathTree;
  SwigClassShortestPathTree.trackObjects = 0;
  
  SwigClassMinCostFlow.klass = rb_define_class_under(mRbnetxpert, "MinCostFlow", ((swig_class *) SWIGTYPE_p_netxpert__ISolver->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__MinCostFlow, (void *) &SwigClassMinCostFlow);
  rb_undef_alloc_func(SwigClassMinCostFlow.klass);
  rb_define_method(SwigClassMinCostFlow.klass, "Solve", VALUEFUNC(_wrap_MinCostFlow_Solve), -1);
  rb_define_method(SwigClassMinCostFlow.klass, "IsDirected=", VALUEFUNC(_wrap_MinCostFlow_IsDirected_set), -1);
  rb_define_method(SwigClassMinCostFlow.klass, "IsDirected", VALUEFUNC(_wrap_MinCostFlow_IsDirected_get), -1);
  rb_define_method(SwigClassMinCostFlow.klass, "GetMinCostFlow", VALUEFUNC(_wrap_MinCostFlow_GetMinCostFlow), -1);
  rb_define_method(SwigClassMinCostFlow.klass, "GetAlgorithm", VALUEFUNC(_wrap_MinCostFlow_GetAlgorithm), -1);
  rb_define_method(SwigClassMinCostFlow.klass, "SetAlgorithm", VALUEFUNC(_wrap_MinCostFlow_SetAlgorithm), -1);
  rb_define_method(SwigClassMinCostFlow.klass, "GetOptimum", VALUEFUNC(_wrap_MinCostFlow_GetOptimum), -1);
  SwigClassMinCostFlow.mark = 0;
  SwigClassMinCostFlow.destroy = (void (*)(void *)) free_netxpert_MinCostFlow;
  SwigClassMinCostFlow.trackObjects = 0;
  
  SwigClassTransportation.klass = rb_define_class_under(mRbnetxpert, "Transportation", ((swig_class *) SWIGTYPE_p_netxpert__MinCostFlow->clientdata)->klass);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__Transportation, (void *) &SwigClassTransportation);
  rb_define_alloc_func(SwigClassTransportation.klass, _wrap_Transportation_allocate);
  rb_define_method(SwigClassTransportation.klass, "initialize", VALUEFUNC(_wrap_new_Transportation), -1);
  rb_define_method(SwigClassTransportation.klass, "GetOrigins", VALUEFUNC(_wrap_Transportation_GetOrigins), -1);
  rb_define_method(SwigClassTransportation.klass, "SetOrigins", VALUEFUNC(_wrap_Transportation_SetOrigins), -1);
  rb_define_method(SwigClassTransportation.klass, "GetDestinations", VALUEFUNC(_wrap_Transportation_GetDestinations), -1);
  rb_define_method(SwigClassTransportation.klass, "SetDestinations", VALUEFUNC(_wrap_Transportation_SetDestinations), -1);
  rb_define_method(SwigClassTransportation.klass, "SetExtODMatrix", VALUEFUNC(_wrap_Transportation_SetExtODMatrix), -1);
  rb_define_method(SwigClassTransportation.klass, "SetExtNodeSupply", VALUEFUNC(_wrap_Transportation_SetExtNodeSupply), -1);
  rb_define_method(SwigClassTransportation.klass, "GetExtDistribution", VALUEFUNC(_wrap_Transportation_GetExtDistribution), -1);
  rb_define_method(SwigClassTransportation.klass, "GetJSONExtDistribution", VALUEFUNC(_wrap_Transportation_GetJSONExtDistribution), -1);
  rb_define_method(SwigClassTransportation.klass, "GetSolverJSONResult", VALUEFUNC(_wrap_Transportation_GetSolverJSONResult), -1);
  rb_define_method(SwigClassTransportation.klass, "UncompressRoute", VALUEFUNC(_wrap_Transportation_UncompressRoute), -1);
  rb_define_method(SwigClassTransportation.klass, "Solve", VALUEFUNC(_wrap_Transportation_Solve), -1);
  SwigClassTransportation.mark = 0;
  SwigClassTransportation.destroy = (void (*)(void *)) free_netxpert_Transportation;
  SwigClassTransportation.trackObjects = 0;
  
  SwigClassShortestPathTreeSimple.klass = rb_define_class_under(mRbnetxpert, "ShortestPathTreeSimple", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__simple__ShortestPathTree, (void *) &SwigClassShortestPathTreeSimple);
  rb_define_alloc_func(SwigClassShortestPathTreeSimple.klass, _wrap_ShortestPathTreeSimple_allocate);
  rb_define_method(SwigClassShortestPathTreeSimple.klass, "initialize", VALUEFUNC(_wrap_new_ShortestPathTreeSimple), -1);
  rb_define_method(SwigClassShortestPathTreeSimple.klass, "Solve", VALUEFUNC(_wrap_ShortestPathTreeSimple_Solve), -1);
  rb_define_method(SwigClassShortestPathTreeSimple.klass, "GetOptimum", VALUEFUNC(_wrap_ShortestPathTreeSimple_GetOptimum), -1);
  SwigClassShortestPathTreeSimple.mark = 0;
  SwigClassShortestPathTreeSimple.destroy = (void (*)(void *)) free_netxpert_simple_ShortestPathTree;
  SwigClassShortestPathTreeSimple.trackObjects = 0;
  
  SwigClassOriginDestinationMatrixSimple.klass = rb_define_class_under(mRbnetxpert, "OriginDestinationMatrixSimple", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__simple__OriginDestinationMatrix, (void *) &SwigClassOriginDestinationMatrixSimple);
  rb_define_alloc_func(SwigClassOriginDestinationMatrixSimple.klass, _wrap_OriginDestinationMatrixSimple_allocate);
  rb_define_method(SwigClassOriginDestinationMatrixSimple.klass, "initialize", VALUEFUNC(_wrap_new_OriginDestinationMatrixSimple), -1);
  rb_define_method(SwigClassOriginDestinationMatrixSimple.klass, "Solve", VALUEFUNC(_wrap_OriginDestinationMatrixSimple_Solve), -1);
  rb_define_method(SwigClassOriginDestinationMatrixSimple.klass, "GetOptimum", VALUEFUNC(_wrap_OriginDestinationMatrixSimple_GetOptimum), -1);
  SwigClassOriginDestinationMatrixSimple.mark = 0;
  SwigClassOriginDestinationMatrixSimple.destroy = (void (*)(void *)) free_netxpert_simple_OriginDestinationMatrix;
  SwigClassOriginDestinationMatrixSimple.trackObjects = 0;
  
  SwigClassMinimumSpanningTreeSimple.klass = rb_define_class_under(mRbnetxpert, "MinimumSpanningTreeSimple", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__simple__MinimumSpanningTree, (void *) &SwigClassMinimumSpanningTreeSimple);
  rb_define_alloc_func(SwigClassMinimumSpanningTreeSimple.klass, _wrap_MinimumSpanningTreeSimple_allocate);
  rb_define_method(SwigClassMinimumSpanningTreeSimple.klass, "initialize", VALUEFUNC(_wrap_new_MinimumSpanningTreeSimple), -1);
  rb_define_method(SwigClassMinimumSpanningTreeSimple.klass, "Solve", VALUEFUNC(_wrap_MinimumSpanningTreeSimple_Solve), -1);
  rb_define_method(SwigClassMinimumSpanningTreeSimple.klass, "GetOptimum", VALUEFUNC(_wrap_MinimumSpanningTreeSimple_GetOptimum), -1);
  SwigClassMinimumSpanningTreeSimple.mark = 0;
  SwigClassMinimumSpanningTreeSimple.destroy = (void (*)(void *)) free_netxpert_simple_MinimumSpanningTree;
  SwigClassMinimumSpanningTreeSimple.trackObjects = 0;
  
  SwigClassTransportationSimple.klass = rb_define_class_under(mRbnetxpert, "TransportationSimple", rb_cObject);
  SWIG_TypeClientData(SWIGTYPE_p_netxpert__simple__Transportation, (void *) &SwigClassTransportationSimple);
  rb_define_alloc_func(SwigClassTransportationSimple.klass, _wrap_TransportationSimple_allocate);
  rb_define_method(SwigClassTransportationSimple.klass, "initialize", VALUEFUNC(_wrap_new_TransportationSimple), -1);
  rb_define_method(SwigClassTransportationSimple.klass, "Solve", VALUEFUNC(_wrap_TransportationSimple_Solve), -1);
  rb_define_method(SwigClassTransportationSimple.klass, "GetOptimum", VALUEFUNC(_wrap_TransportationSimple_GetOptimum), -1);
  rb_define_method(SwigClassTransportationSimple.klass, "GetDistributionAsJSON", VALUEFUNC(_wrap_TransportationSimple_GetDistributionAsJSON), -1);
  rb_define_method(SwigClassTransportationSimple.klass, "GetDistribution", VALUEFUNC(_wrap_TransportationSimple_GetDistribution), -1);
  SwigClassTransportationSimple.mark = 0;
  SwigClassTransportationSimple.destroy = (void (*)(void *)) free_netxpert_simple_Transportation;
  SwigClassTransportationSimple.trackObjects = 0;
}

