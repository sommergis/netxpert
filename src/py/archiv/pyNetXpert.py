# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyNetXpert', [dirname(__file__)])
        except ImportError:
            import _pyNetXpert
            return _pyNetXpert
        if fp is not None:
            try:
                _mod = imp.load_module('_pyNetXpert', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyNetXpert = swig_import_helper()
    del swig_import_helper
else:
    import _pyNetXpert
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyNetXpert.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyNetXpert.SwigPyIterator_value(self)
    def incr(self, n=1): return _pyNetXpert.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pyNetXpert.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyNetXpert.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyNetXpert.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyNetXpert.SwigPyIterator_copy(self)
    def next(self): return _pyNetXpert.SwigPyIterator_next(self)
    def __next__(self): return _pyNetXpert.SwigPyIterator___next__(self)
    def previous(self): return _pyNetXpert.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyNetXpert.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyNetXpert.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyNetXpert.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyNetXpert.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyNetXpert.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyNetXpert.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyNetXpert.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyNetXpert.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class InputArcs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputArcs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputArcs, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyNetXpert.InputArcs_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyNetXpert.InputArcs___nonzero__(self)
    def __bool__(self): return _pyNetXpert.InputArcs___bool__(self)
    def __len__(self): return _pyNetXpert.InputArcs___len__(self)
    def pop(self): return _pyNetXpert.InputArcs_pop(self)
    def __getslice__(self, *args): return _pyNetXpert.InputArcs___getslice__(self, *args)
    def __setslice__(self, *args): return _pyNetXpert.InputArcs___setslice__(self, *args)
    def __delslice__(self, *args): return _pyNetXpert.InputArcs___delslice__(self, *args)
    def __delitem__(self, *args): return _pyNetXpert.InputArcs___delitem__(self, *args)
    def __getitem__(self, *args): return _pyNetXpert.InputArcs___getitem__(self, *args)
    def __setitem__(self, *args): return _pyNetXpert.InputArcs___setitem__(self, *args)
    def append(self, *args): return _pyNetXpert.InputArcs_append(self, *args)
    def empty(self): return _pyNetXpert.InputArcs_empty(self)
    def size(self): return _pyNetXpert.InputArcs_size(self)
    def clear(self): return _pyNetXpert.InputArcs_clear(self)
    def swap(self, *args): return _pyNetXpert.InputArcs_swap(self, *args)
    def get_allocator(self): return _pyNetXpert.InputArcs_get_allocator(self)
    def begin(self): return _pyNetXpert.InputArcs_begin(self)
    def end(self): return _pyNetXpert.InputArcs_end(self)
    def rbegin(self): return _pyNetXpert.InputArcs_rbegin(self)
    def rend(self): return _pyNetXpert.InputArcs_rend(self)
    def pop_back(self): return _pyNetXpert.InputArcs_pop_back(self)
    def erase(self, *args): return _pyNetXpert.InputArcs_erase(self, *args)
    def __init__(self, *args): 
        this = _pyNetXpert.new_InputArcs(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyNetXpert.InputArcs_push_back(self, *args)
    def front(self): return _pyNetXpert.InputArcs_front(self)
    def back(self): return _pyNetXpert.InputArcs_back(self)
    def assign(self, *args): return _pyNetXpert.InputArcs_assign(self, *args)
    def resize(self, *args): return _pyNetXpert.InputArcs_resize(self, *args)
    def insert(self, *args): return _pyNetXpert.InputArcs_insert(self, *args)
    def pop_front(self): return _pyNetXpert.InputArcs_pop_front(self)
    def push_front(self, *args): return _pyNetXpert.InputArcs_push_front(self, *args)
    def reverse(self): return _pyNetXpert.InputArcs_reverse(self)
    __swig_destroy__ = _pyNetXpert.delete_InputArcs
    __del__ = lambda self : None;
InputArcs_swigregister = _pyNetXpert.InputArcs_swigregister
InputArcs_swigregister(InputArcs)

class InputNodes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputNodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputNodes, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyNetXpert.InputNodes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyNetXpert.InputNodes___nonzero__(self)
    def __bool__(self): return _pyNetXpert.InputNodes___bool__(self)
    def __len__(self): return _pyNetXpert.InputNodes___len__(self)
    def pop(self): return _pyNetXpert.InputNodes_pop(self)
    def __getslice__(self, *args): return _pyNetXpert.InputNodes___getslice__(self, *args)
    def __setslice__(self, *args): return _pyNetXpert.InputNodes___setslice__(self, *args)
    def __delslice__(self, *args): return _pyNetXpert.InputNodes___delslice__(self, *args)
    def __delitem__(self, *args): return _pyNetXpert.InputNodes___delitem__(self, *args)
    def __getitem__(self, *args): return _pyNetXpert.InputNodes___getitem__(self, *args)
    def __setitem__(self, *args): return _pyNetXpert.InputNodes___setitem__(self, *args)
    def append(self, *args): return _pyNetXpert.InputNodes_append(self, *args)
    def empty(self): return _pyNetXpert.InputNodes_empty(self)
    def size(self): return _pyNetXpert.InputNodes_size(self)
    def clear(self): return _pyNetXpert.InputNodes_clear(self)
    def swap(self, *args): return _pyNetXpert.InputNodes_swap(self, *args)
    def get_allocator(self): return _pyNetXpert.InputNodes_get_allocator(self)
    def begin(self): return _pyNetXpert.InputNodes_begin(self)
    def end(self): return _pyNetXpert.InputNodes_end(self)
    def rbegin(self): return _pyNetXpert.InputNodes_rbegin(self)
    def rend(self): return _pyNetXpert.InputNodes_rend(self)
    def pop_back(self): return _pyNetXpert.InputNodes_pop_back(self)
    def erase(self, *args): return _pyNetXpert.InputNodes_erase(self, *args)
    def __init__(self, *args): 
        this = _pyNetXpert.new_InputNodes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyNetXpert.InputNodes_push_back(self, *args)
    def front(self): return _pyNetXpert.InputNodes_front(self)
    def back(self): return _pyNetXpert.InputNodes_back(self)
    def assign(self, *args): return _pyNetXpert.InputNodes_assign(self, *args)
    def resize(self, *args): return _pyNetXpert.InputNodes_resize(self, *args)
    def insert(self, *args): return _pyNetXpert.InputNodes_insert(self, *args)
    def pop_front(self): return _pyNetXpert.InputNodes_pop_front(self)
    def push_front(self, *args): return _pyNetXpert.InputNodes_push_front(self, *args)
    def reverse(self): return _pyNetXpert.InputNodes_reverse(self)
    __swig_destroy__ = _pyNetXpert.delete_InputNodes
    __del__ = lambda self : None;
InputNodes_swigregister = _pyNetXpert.InputNodes_swigregister
InputNodes_swigregister(InputNodes)

class ColumnMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColumnMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColumnMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arcIDColName"] = _pyNetXpert.ColumnMap_arcIDColName_set
    __swig_getmethods__["arcIDColName"] = _pyNetXpert.ColumnMap_arcIDColName_get
    if _newclass:arcIDColName = _swig_property(_pyNetXpert.ColumnMap_arcIDColName_get, _pyNetXpert.ColumnMap_arcIDColName_set)
    __swig_setmethods__["fromColName"] = _pyNetXpert.ColumnMap_fromColName_set
    __swig_getmethods__["fromColName"] = _pyNetXpert.ColumnMap_fromColName_get
    if _newclass:fromColName = _swig_property(_pyNetXpert.ColumnMap_fromColName_get, _pyNetXpert.ColumnMap_fromColName_set)
    __swig_setmethods__["toColName"] = _pyNetXpert.ColumnMap_toColName_set
    __swig_getmethods__["toColName"] = _pyNetXpert.ColumnMap_toColName_get
    if _newclass:toColName = _swig_property(_pyNetXpert.ColumnMap_toColName_get, _pyNetXpert.ColumnMap_toColName_set)
    __swig_setmethods__["costColName"] = _pyNetXpert.ColumnMap_costColName_set
    __swig_getmethods__["costColName"] = _pyNetXpert.ColumnMap_costColName_get
    if _newclass:costColName = _swig_property(_pyNetXpert.ColumnMap_costColName_get, _pyNetXpert.ColumnMap_costColName_set)
    __swig_setmethods__["capColName"] = _pyNetXpert.ColumnMap_capColName_set
    __swig_getmethods__["capColName"] = _pyNetXpert.ColumnMap_capColName_get
    if _newclass:capColName = _swig_property(_pyNetXpert.ColumnMap_capColName_get, _pyNetXpert.ColumnMap_capColName_set)
    __swig_setmethods__["onewayColName"] = _pyNetXpert.ColumnMap_onewayColName_set
    __swig_getmethods__["onewayColName"] = _pyNetXpert.ColumnMap_onewayColName_get
    if _newclass:onewayColName = _swig_property(_pyNetXpert.ColumnMap_onewayColName_get, _pyNetXpert.ColumnMap_onewayColName_set)
    __swig_setmethods__["nodeIDColName"] = _pyNetXpert.ColumnMap_nodeIDColName_set
    __swig_getmethods__["nodeIDColName"] = _pyNetXpert.ColumnMap_nodeIDColName_get
    if _newclass:nodeIDColName = _swig_property(_pyNetXpert.ColumnMap_nodeIDColName_get, _pyNetXpert.ColumnMap_nodeIDColName_set)
    __swig_setmethods__["supplyColName"] = _pyNetXpert.ColumnMap_supplyColName_set
    __swig_getmethods__["supplyColName"] = _pyNetXpert.ColumnMap_supplyColName_get
    if _newclass:supplyColName = _swig_property(_pyNetXpert.ColumnMap_supplyColName_get, _pyNetXpert.ColumnMap_supplyColName_set)
    def __init__(self): 
        this = _pyNetXpert.new_ColumnMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyNetXpert.delete_ColumnMap
    __del__ = lambda self : None;
ColumnMap_swigregister = _pyNetXpert.ColumnMap_swigregister
ColumnMap_swigregister(ColumnMap)

class InputNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extNodeID"] = _pyNetXpert.InputNode_extNodeID_set
    __swig_getmethods__["extNodeID"] = _pyNetXpert.InputNode_extNodeID_get
    if _newclass:extNodeID = _swig_property(_pyNetXpert.InputNode_extNodeID_get, _pyNetXpert.InputNode_extNodeID_set)
    __swig_setmethods__["nodeSupply"] = _pyNetXpert.InputNode_nodeSupply_set
    __swig_getmethods__["nodeSupply"] = _pyNetXpert.InputNode_nodeSupply_get
    if _newclass:nodeSupply = _swig_property(_pyNetXpert.InputNode_nodeSupply_get, _pyNetXpert.InputNode_nodeSupply_set)
    def __str__(self): return _pyNetXpert.InputNode___str__(self)
    def __init__(self): 
        this = _pyNetXpert.new_InputNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyNetXpert.delete_InputNode
    __del__ = lambda self : None;
InputNode_swigregister = _pyNetXpert.InputNode_swigregister
InputNode_swigregister(InputNode)

class InputArc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputArc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputArc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extArcID"] = _pyNetXpert.InputArc_extArcID_set
    __swig_getmethods__["extArcID"] = _pyNetXpert.InputArc_extArcID_get
    if _newclass:extArcID = _swig_property(_pyNetXpert.InputArc_extArcID_get, _pyNetXpert.InputArc_extArcID_set)
    __swig_setmethods__["extFromNode"] = _pyNetXpert.InputArc_extFromNode_set
    __swig_getmethods__["extFromNode"] = _pyNetXpert.InputArc_extFromNode_get
    if _newclass:extFromNode = _swig_property(_pyNetXpert.InputArc_extFromNode_get, _pyNetXpert.InputArc_extFromNode_set)
    __swig_setmethods__["extToNode"] = _pyNetXpert.InputArc_extToNode_set
    __swig_getmethods__["extToNode"] = _pyNetXpert.InputArc_extToNode_get
    if _newclass:extToNode = _swig_property(_pyNetXpert.InputArc_extToNode_get, _pyNetXpert.InputArc_extToNode_set)
    __swig_setmethods__["cost"] = _pyNetXpert.InputArc_cost_set
    __swig_getmethods__["cost"] = _pyNetXpert.InputArc_cost_get
    if _newclass:cost = _swig_property(_pyNetXpert.InputArc_cost_get, _pyNetXpert.InputArc_cost_set)
    __swig_setmethods__["capacity"] = _pyNetXpert.InputArc_capacity_set
    __swig_getmethods__["capacity"] = _pyNetXpert.InputArc_capacity_get
    if _newclass:capacity = _swig_property(_pyNetXpert.InputArc_capacity_get, _pyNetXpert.InputArc_capacity_set)
    __swig_setmethods__["oneway"] = _pyNetXpert.InputArc_oneway_set
    __swig_getmethods__["oneway"] = _pyNetXpert.InputArc_oneway_get
    if _newclass:oneway = _swig_property(_pyNetXpert.InputArc_oneway_get, _pyNetXpert.InputArc_oneway_set)
    def __str__(self): return _pyNetXpert.InputArc___str__(self)
    def __init__(self): 
        this = _pyNetXpert.new_InputArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyNetXpert.delete_InputArc
    __del__ = lambda self : None;
InputArc_swigregister = _pyNetXpert.InputArc_swigregister
InputArc_swigregister(InputArc)

class NewNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NewNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extNodeID"] = _pyNetXpert.NewNode_extNodeID_set
    __swig_getmethods__["extNodeID"] = _pyNetXpert.NewNode_extNodeID_get
    if _newclass:extNodeID = _swig_property(_pyNetXpert.NewNode_extNodeID_get, _pyNetXpert.NewNode_extNodeID_set)
    __swig_setmethods__["coord"] = _pyNetXpert.NewNode_coord_set
    __swig_getmethods__["coord"] = _pyNetXpert.NewNode_coord_get
    if _newclass:coord = _swig_property(_pyNetXpert.NewNode_coord_get, _pyNetXpert.NewNode_coord_set)
    __swig_setmethods__["supply"] = _pyNetXpert.NewNode_supply_set
    __swig_getmethods__["supply"] = _pyNetXpert.NewNode_supply_get
    if _newclass:supply = _swig_property(_pyNetXpert.NewNode_supply_get, _pyNetXpert.NewNode_supply_set)
    def __init__(self): 
        this = _pyNetXpert.new_NewNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyNetXpert.delete_NewNode
    __del__ = lambda self : None;
NewNode_swigregister = _pyNetXpert.NewNode_swigregister
NewNode_swigregister(NewNode)

NoGeometry = _pyNetXpert.NoGeometry
StraightLines = _pyNetXpert.StraightLines
RealGeometry = _pyNetXpert.RealGeometry
NetworkBuilder = _pyNetXpert.NetworkBuilder
ShortestPathTreeCOM = _pyNetXpert.ShortestPathTreeCOM
ODMatrixCOM = _pyNetXpert.ODMatrixCOM
TransportationCOM = _pyNetXpert.TransportationCOM
MSTCOM = _pyNetXpert.MSTCOM
IsolinesCOM = _pyNetXpert.IsolinesCOM
DumpInternalArcsToDB = _pyNetXpert.DumpInternalArcsToDB
NetworkConvert = _pyNetXpert.NetworkConvert
TestFileGDBWriter = _pyNetXpert.TestFileGDBWriter
TestSpatiaLiteWriter = _pyNetXpert.TestSpatiaLiteWriter
SpatiaLiteDB = _pyNetXpert.SpatiaLiteDB
ESRI_FileGDB = _pyNetXpert.ESRI_FileGDB
All = _pyNetXpert.All
Debug = _pyNetXpert.Debug
Info = _pyNetXpert.Info
Warning = _pyNetXpert.Warning
Error = _pyNetXpert.Error
Fatal = _pyNetXpert.Fatal
Dijkstra_MCFClass = _pyNetXpert.Dijkstra_MCFClass
LQueue_MCFClass = _pyNetXpert.LQueue_MCFClass
LDeque_MCFClass = _pyNetXpert.LDeque_MCFClass
Dijkstra_Heap_MCFClass = _pyNetXpert.Dijkstra_Heap_MCFClass
Dijkstra_2Heap_LEMON = _pyNetXpert.Dijkstra_2Heap_LEMON
NetworkSimplex_MCF = _pyNetXpert.NetworkSimplex_MCF
NetworkSimplex_LEMON = _pyNetXpert.NetworkSimplex_LEMON
Kruskal_QuickGraph = _pyNetXpert.Kruskal_QuickGraph
Prim_QuickGraph = _pyNetXpert.Prim_QuickGraph
Kruskal_LEMON = _pyNetXpert.Kruskal_LEMON
class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SQLiteDBPath"] = _pyNetXpert.Config_SQLiteDBPath_set
    __swig_getmethods__["SQLiteDBPath"] = _pyNetXpert.Config_SQLiteDBPath_get
    if _newclass:SQLiteDBPath = _swig_property(_pyNetXpert.Config_SQLiteDBPath_get, _pyNetXpert.Config_SQLiteDBPath_set)
    __swig_setmethods__["SQLiteVersion"] = _pyNetXpert.Config_SQLiteVersion_set
    __swig_getmethods__["SQLiteVersion"] = _pyNetXpert.Config_SQLiteVersion_get
    if _newclass:SQLiteVersion = _swig_property(_pyNetXpert.Config_SQLiteVersion_get, _pyNetXpert.Config_SQLiteVersion_set)
    __swig_setmethods__["ResultDBPath"] = _pyNetXpert.Config_ResultDBPath_set
    __swig_getmethods__["ResultDBPath"] = _pyNetXpert.Config_ResultDBPath_get
    if _newclass:ResultDBPath = _swig_property(_pyNetXpert.Config_ResultDBPath_get, _pyNetXpert.Config_ResultDBPath_set)
    __swig_setmethods__["ResultDBType"] = _pyNetXpert.Config_ResultDBType_set
    __swig_getmethods__["ResultDBType"] = _pyNetXpert.Config_ResultDBType_get
    if _newclass:ResultDBType = _swig_property(_pyNetXpert.Config_ResultDBType_get, _pyNetXpert.Config_ResultDBType_set)
    __swig_setmethods__["SPTAllDests"] = _pyNetXpert.Config_SPTAllDests_set
    __swig_getmethods__["SPTAllDests"] = _pyNetXpert.Config_SPTAllDests_get
    if _newclass:SPTAllDests = _swig_property(_pyNetXpert.Config_SPTAllDests_get, _pyNetXpert.Config_SPTAllDests_set)
    __swig_setmethods__["SPTHeapCard"] = _pyNetXpert.Config_SPTHeapCard_set
    __swig_getmethods__["SPTHeapCard"] = _pyNetXpert.Config_SPTHeapCard_get
    if _newclass:SPTHeapCard = _swig_property(_pyNetXpert.Config_SPTHeapCard_get, _pyNetXpert.Config_SPTHeapCard_set)
    __swig_setmethods__["SptAlgorithm"] = _pyNetXpert.Config_SptAlgorithm_set
    __swig_getmethods__["SptAlgorithm"] = _pyNetXpert.Config_SptAlgorithm_get
    if _newclass:SptAlgorithm = _swig_property(_pyNetXpert.Config_SptAlgorithm_get, _pyNetXpert.Config_SptAlgorithm_set)
    __swig_setmethods__["McfAlgorithm"] = _pyNetXpert.Config_McfAlgorithm_set
    __swig_getmethods__["McfAlgorithm"] = _pyNetXpert.Config_McfAlgorithm_get
    if _newclass:McfAlgorithm = _swig_property(_pyNetXpert.Config_McfAlgorithm_get, _pyNetXpert.Config_McfAlgorithm_set)
    __swig_setmethods__["MstAlgorithm"] = _pyNetXpert.Config_MstAlgorithm_set
    __swig_getmethods__["MstAlgorithm"] = _pyNetXpert.Config_MstAlgorithm_get
    if _newclass:MstAlgorithm = _swig_property(_pyNetXpert.Config_MstAlgorithm_get, _pyNetXpert.Config_MstAlgorithm_set)
    __swig_setmethods__["IsDirected"] = _pyNetXpert.Config_IsDirected_set
    __swig_getmethods__["IsDirected"] = _pyNetXpert.Config_IsDirected_get
    if _newclass:IsDirected = _swig_property(_pyNetXpert.Config_IsDirected_get, _pyNetXpert.Config_IsDirected_set)
    __swig_setmethods__["ArcsTableName"] = _pyNetXpert.Config_ArcsTableName_set
    __swig_getmethods__["ArcsTableName"] = _pyNetXpert.Config_ArcsTableName_get
    if _newclass:ArcsTableName = _swig_property(_pyNetXpert.Config_ArcsTableName_get, _pyNetXpert.Config_ArcsTableName_set)
    __swig_setmethods__["ArcsGeomColumnName"] = _pyNetXpert.Config_ArcsGeomColumnName_set
    __swig_getmethods__["ArcsGeomColumnName"] = _pyNetXpert.Config_ArcsGeomColumnName_get
    if _newclass:ArcsGeomColumnName = _swig_property(_pyNetXpert.Config_ArcsGeomColumnName_get, _pyNetXpert.Config_ArcsGeomColumnName_set)
    __swig_setmethods__["ArcIDColumnName"] = _pyNetXpert.Config_ArcIDColumnName_set
    __swig_getmethods__["ArcIDColumnName"] = _pyNetXpert.Config_ArcIDColumnName_get
    if _newclass:ArcIDColumnName = _swig_property(_pyNetXpert.Config_ArcIDColumnName_get, _pyNetXpert.Config_ArcIDColumnName_set)
    __swig_setmethods__["FromNodeColumnName"] = _pyNetXpert.Config_FromNodeColumnName_set
    __swig_getmethods__["FromNodeColumnName"] = _pyNetXpert.Config_FromNodeColumnName_get
    if _newclass:FromNodeColumnName = _swig_property(_pyNetXpert.Config_FromNodeColumnName_get, _pyNetXpert.Config_FromNodeColumnName_set)
    __swig_setmethods__["ToNodeColumnName"] = _pyNetXpert.Config_ToNodeColumnName_set
    __swig_getmethods__["ToNodeColumnName"] = _pyNetXpert.Config_ToNodeColumnName_get
    if _newclass:ToNodeColumnName = _swig_property(_pyNetXpert.Config_ToNodeColumnName_get, _pyNetXpert.Config_ToNodeColumnName_set)
    __swig_setmethods__["CostColumnName"] = _pyNetXpert.Config_CostColumnName_set
    __swig_getmethods__["CostColumnName"] = _pyNetXpert.Config_CostColumnName_get
    if _newclass:CostColumnName = _swig_property(_pyNetXpert.Config_CostColumnName_get, _pyNetXpert.Config_CostColumnName_set)
    __swig_setmethods__["CapColumnName"] = _pyNetXpert.Config_CapColumnName_set
    __swig_getmethods__["CapColumnName"] = _pyNetXpert.Config_CapColumnName_get
    if _newclass:CapColumnName = _swig_property(_pyNetXpert.Config_CapColumnName_get, _pyNetXpert.Config_CapColumnName_set)
    __swig_setmethods__["NodesTableName"] = _pyNetXpert.Config_NodesTableName_set
    __swig_getmethods__["NodesTableName"] = _pyNetXpert.Config_NodesTableName_get
    if _newclass:NodesTableName = _swig_property(_pyNetXpert.Config_NodesTableName_get, _pyNetXpert.Config_NodesTableName_set)
    __swig_setmethods__["NodesGeomColumnName"] = _pyNetXpert.Config_NodesGeomColumnName_set
    __swig_getmethods__["NodesGeomColumnName"] = _pyNetXpert.Config_NodesGeomColumnName_get
    if _newclass:NodesGeomColumnName = _swig_property(_pyNetXpert.Config_NodesGeomColumnName_get, _pyNetXpert.Config_NodesGeomColumnName_set)
    __swig_setmethods__["NodeIDColumnName"] = _pyNetXpert.Config_NodeIDColumnName_set
    __swig_getmethods__["NodeIDColumnName"] = _pyNetXpert.Config_NodeIDColumnName_get
    if _newclass:NodeIDColumnName = _swig_property(_pyNetXpert.Config_NodeIDColumnName_get, _pyNetXpert.Config_NodeIDColumnName_set)
    __swig_setmethods__["NodeSupplyColumnName"] = _pyNetXpert.Config_NodeSupplyColumnName_set
    __swig_getmethods__["NodeSupplyColumnName"] = _pyNetXpert.Config_NodeSupplyColumnName_get
    if _newclass:NodeSupplyColumnName = _swig_property(_pyNetXpert.Config_NodeSupplyColumnName_get, _pyNetXpert.Config_NodeSupplyColumnName_set)
    __swig_setmethods__["BarrierPolyTableName"] = _pyNetXpert.Config_BarrierPolyTableName_set
    __swig_getmethods__["BarrierPolyTableName"] = _pyNetXpert.Config_BarrierPolyTableName_get
    if _newclass:BarrierPolyTableName = _swig_property(_pyNetXpert.Config_BarrierPolyTableName_get, _pyNetXpert.Config_BarrierPolyTableName_set)
    __swig_setmethods__["BarrierPolyGeomColumnName"] = _pyNetXpert.Config_BarrierPolyGeomColumnName_set
    __swig_getmethods__["BarrierPolyGeomColumnName"] = _pyNetXpert.Config_BarrierPolyGeomColumnName_get
    if _newclass:BarrierPolyGeomColumnName = _swig_property(_pyNetXpert.Config_BarrierPolyGeomColumnName_get, _pyNetXpert.Config_BarrierPolyGeomColumnName_set)
    __swig_setmethods__["BarrierLineTableName"] = _pyNetXpert.Config_BarrierLineTableName_set
    __swig_getmethods__["BarrierLineTableName"] = _pyNetXpert.Config_BarrierLineTableName_get
    if _newclass:BarrierLineTableName = _swig_property(_pyNetXpert.Config_BarrierLineTableName_get, _pyNetXpert.Config_BarrierLineTableName_set)
    __swig_setmethods__["BarrierLineGeomColumnName"] = _pyNetXpert.Config_BarrierLineGeomColumnName_set
    __swig_getmethods__["BarrierLineGeomColumnName"] = _pyNetXpert.Config_BarrierLineGeomColumnName_get
    if _newclass:BarrierLineGeomColumnName = _swig_property(_pyNetXpert.Config_BarrierLineGeomColumnName_get, _pyNetXpert.Config_BarrierLineGeomColumnName_set)
    __swig_setmethods__["BarrierPointTableName"] = _pyNetXpert.Config_BarrierPointTableName_set
    __swig_getmethods__["BarrierPointTableName"] = _pyNetXpert.Config_BarrierPointTableName_get
    if _newclass:BarrierPointTableName = _swig_property(_pyNetXpert.Config_BarrierPointTableName_get, _pyNetXpert.Config_BarrierPointTableName_set)
    __swig_setmethods__["BarrierPointGeomColumnName"] = _pyNetXpert.Config_BarrierPointGeomColumnName_set
    __swig_getmethods__["BarrierPointGeomColumnName"] = _pyNetXpert.Config_BarrierPointGeomColumnName_get
    if _newclass:BarrierPointGeomColumnName = _swig_property(_pyNetXpert.Config_BarrierPointGeomColumnName_get, _pyNetXpert.Config_BarrierPointGeomColumnName_set)
    __swig_setmethods__["Treshold"] = _pyNetXpert.Config_Treshold_set
    __swig_getmethods__["Treshold"] = _pyNetXpert.Config_Treshold_get
    if _newclass:Treshold = _swig_property(_pyNetXpert.Config_Treshold_get, _pyNetXpert.Config_Treshold_set)
    __swig_setmethods__["UseSpatialIndex"] = _pyNetXpert.Config_UseSpatialIndex_set
    __swig_getmethods__["UseSpatialIndex"] = _pyNetXpert.Config_UseSpatialIndex_get
    if _newclass:UseSpatialIndex = _swig_property(_pyNetXpert.Config_UseSpatialIndex_get, _pyNetXpert.Config_UseSpatialIndex_set)
    __swig_setmethods__["LoadDBIntoMemory"] = _pyNetXpert.Config_LoadDBIntoMemory_set
    __swig_getmethods__["LoadDBIntoMemory"] = _pyNetXpert.Config_LoadDBIntoMemory_get
    if _newclass:LoadDBIntoMemory = _swig_property(_pyNetXpert.Config_LoadDBIntoMemory_get, _pyNetXpert.Config_LoadDBIntoMemory_set)
    __swig_setmethods__["NumberOfTests"] = _pyNetXpert.Config_NumberOfTests_set
    __swig_getmethods__["NumberOfTests"] = _pyNetXpert.Config_NumberOfTests_get
    if _newclass:NumberOfTests = _swig_property(_pyNetXpert.Config_NumberOfTests_get, _pyNetXpert.Config_NumberOfTests_set)
    __swig_setmethods__["SpatiaLiteHome"] = _pyNetXpert.Config_SpatiaLiteHome_set
    __swig_getmethods__["SpatiaLiteHome"] = _pyNetXpert.Config_SpatiaLiteHome_get
    if _newclass:SpatiaLiteHome = _swig_property(_pyNetXpert.Config_SpatiaLiteHome_get, _pyNetXpert.Config_SpatiaLiteHome_set)
    __swig_setmethods__["SpatiaLiteCoreName"] = _pyNetXpert.Config_SpatiaLiteCoreName_set
    __swig_getmethods__["SpatiaLiteCoreName"] = _pyNetXpert.Config_SpatiaLiteCoreName_get
    if _newclass:SpatiaLiteCoreName = _swig_property(_pyNetXpert.Config_SpatiaLiteCoreName_get, _pyNetXpert.Config_SpatiaLiteCoreName_set)
    __swig_setmethods__["GeometryHandling"] = _pyNetXpert.Config_GeometryHandling_set
    __swig_getmethods__["GeometryHandling"] = _pyNetXpert.Config_GeometryHandling_get
    if _newclass:GeometryHandling = _swig_property(_pyNetXpert.Config_GeometryHandling_get, _pyNetXpert.Config_GeometryHandling_set)
    __swig_setmethods__["OnewayColumnName"] = _pyNetXpert.Config_OnewayColumnName_set
    __swig_getmethods__["OnewayColumnName"] = _pyNetXpert.Config_OnewayColumnName_get
    if _newclass:OnewayColumnName = _swig_property(_pyNetXpert.Config_OnewayColumnName_get, _pyNetXpert.Config_OnewayColumnName_set)
    __swig_setmethods__["TestCase"] = _pyNetXpert.Config_TestCase_set
    __swig_getmethods__["TestCase"] = _pyNetXpert.Config_TestCase_get
    if _newclass:TestCase = _swig_property(_pyNetXpert.Config_TestCase_get, _pyNetXpert.Config_TestCase_set)
    __swig_setmethods__["CleanNetwork"] = _pyNetXpert.Config_CleanNetwork_set
    __swig_getmethods__["CleanNetwork"] = _pyNetXpert.Config_CleanNetwork_get
    if _newclass:CleanNetwork = _swig_property(_pyNetXpert.Config_CleanNetwork_get, _pyNetXpert.Config_CleanNetwork_set)
    __swig_setmethods__["LogLevel"] = _pyNetXpert.Config_LogLevel_set
    __swig_getmethods__["LogLevel"] = _pyNetXpert.Config_LogLevel_get
    if _newclass:LogLevel = _swig_property(_pyNetXpert.Config_LogLevel_get, _pyNetXpert.Config_LogLevel_set)
    __swig_setmethods__["LogFileFullPath"] = _pyNetXpert.Config_LogFileFullPath_set
    __swig_getmethods__["LogFileFullPath"] = _pyNetXpert.Config_LogFileFullPath_get
    if _newclass:LogFileFullPath = _swig_property(_pyNetXpert.Config_LogFileFullPath_get, _pyNetXpert.Config_LogFileFullPath_set)
    def __init__(self): 
        this = _pyNetXpert.new_Config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyNetXpert.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _pyNetXpert.Config_swigregister
Config_swigregister(Config)

class Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyNetXpert.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    def ConvertInputNetwork(self, *args): return _pyNetXpert.Network_ConvertInputNetwork(self, *args)
    def AddStartNode(self, *args): return _pyNetXpert.Network_AddStartNode(self, *args)
    def AddEndNode(self, *args): return _pyNetXpert.Network_AddEndNode(self, *args)
    def GetOriginalNodeID(self, *args): return _pyNetXpert.Network_GetOriginalNodeID(self, *args)
    def GetOriginalStartOrEndNodeID(self, *args): return _pyNetXpert.Network_GetOriginalStartOrEndNodeID(self, *args)
    __swig_destroy__ = _pyNetXpert.delete_Network
    __del__ = lambda self : None;
Network_swigregister = _pyNetXpert.Network_swigregister
Network_swigregister(Network)

class LOGGER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LOGGER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LOGGER, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyNetXpert.delete_LOGGER
    __del__ = lambda self : None;
    __swig_getmethods__["Initialize"] = lambda x: _pyNetXpert.LOGGER_Initialize
    if _newclass:Initialize = staticmethod(_pyNetXpert.LOGGER_Initialize)
    __swig_setmethods__["IsInitialized"] = _pyNetXpert.LOGGER_IsInitialized_set
    __swig_getmethods__["IsInitialized"] = _pyNetXpert.LOGGER_IsInitialized_get
    if _newclass:IsInitialized = _swig_property(_pyNetXpert.LOGGER_IsInitialized_get, _pyNetXpert.LOGGER_IsInitialized_set)
LOGGER_swigregister = _pyNetXpert.LOGGER_swigregister
LOGGER_swigregister(LOGGER)

def LOGGER_Initialize(*args):
  return _pyNetXpert.LOGGER_Initialize(*args)
LOGGER_Initialize = _pyNetXpert.LOGGER_Initialize
cvar = _pyNetXpert.cvar

class DBHELPER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBHELPER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBHELPER, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Initialize"] = lambda x: _pyNetXpert.DBHELPER_Initialize
    if _newclass:Initialize = staticmethod(_pyNetXpert.DBHELPER_Initialize)
    __swig_setmethods__["IsInitialized"] = _pyNetXpert.DBHELPER_IsInitialized_set
    __swig_getmethods__["IsInitialized"] = _pyNetXpert.DBHELPER_IsInitialized_get
    if _newclass:IsInitialized = _swig_property(_pyNetXpert.DBHELPER_IsInitialized_get, _pyNetXpert.DBHELPER_IsInitialized_set)
    __swig_getmethods__["CommitCurrentTransaction"] = lambda x: _pyNetXpert.DBHELPER_CommitCurrentTransaction
    if _newclass:CommitCurrentTransaction = staticmethod(_pyNetXpert.DBHELPER_CommitCurrentTransaction)
    __swig_getmethods__["OpenNewTransaction"] = lambda x: _pyNetXpert.DBHELPER_OpenNewTransaction
    if _newclass:OpenNewTransaction = staticmethod(_pyNetXpert.DBHELPER_OpenNewTransaction)
    __swig_getmethods__["LoadNetworkFromDB"] = lambda x: _pyNetXpert.DBHELPER_LoadNetworkFromDB
    if _newclass:LoadNetworkFromDB = staticmethod(_pyNetXpert.DBHELPER_LoadNetworkFromDB)
    __swig_getmethods__["LoadNodesFromDB"] = lambda x: _pyNetXpert.DBHELPER_LoadNodesFromDB
    if _newclass:LoadNodesFromDB = staticmethod(_pyNetXpert.DBHELPER_LoadNodesFromDB)
    __swig_getmethods__["CloseConnection"] = lambda x: _pyNetXpert.DBHELPER_CloseConnection
    if _newclass:CloseConnection = staticmethod(_pyNetXpert.DBHELPER_CloseConnection)
    __swig_destroy__ = _pyNetXpert.delete_DBHELPER
    __del__ = lambda self : None;
DBHELPER_swigregister = _pyNetXpert.DBHELPER_swigregister
DBHELPER_swigregister(DBHELPER)

def DBHELPER_Initialize(*args):
  return _pyNetXpert.DBHELPER_Initialize(*args)
DBHELPER_Initialize = _pyNetXpert.DBHELPER_Initialize

def DBHELPER_CommitCurrentTransaction():
  return _pyNetXpert.DBHELPER_CommitCurrentTransaction()
DBHELPER_CommitCurrentTransaction = _pyNetXpert.DBHELPER_CommitCurrentTransaction

def DBHELPER_OpenNewTransaction():
  return _pyNetXpert.DBHELPER_OpenNewTransaction()
DBHELPER_OpenNewTransaction = _pyNetXpert.DBHELPER_OpenNewTransaction

def DBHELPER_LoadNetworkFromDB(*args):
  return _pyNetXpert.DBHELPER_LoadNetworkFromDB(*args)
DBHELPER_LoadNetworkFromDB = _pyNetXpert.DBHELPER_LoadNetworkFromDB

def DBHELPER_LoadNodesFromDB(*args):
  return _pyNetXpert.DBHELPER_LoadNodesFromDB(*args)
DBHELPER_LoadNodesFromDB = _pyNetXpert.DBHELPER_LoadNodesFromDB

def DBHELPER_CloseConnection():
  return _pyNetXpert.DBHELPER_CloseConnection()
DBHELPER_CloseConnection = _pyNetXpert.DBHELPER_CloseConnection

# This file is compatible with both classic and new-style classes.


