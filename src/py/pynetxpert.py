# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pynetxpert', [dirname(__file__)])
        except ImportError:
            import _pynetxpert
            return _pynetxpert
        if fp is not None:
            try:
                _mod = imp.load_module('_pynetxpert', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pynetxpert = swig_import_helper()
    del swig_import_helper
else:
    import _pynetxpert
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynetxpert.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pynetxpert.SwigPyIterator_value(self)
    def incr(self, n=1): return _pynetxpert.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pynetxpert.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pynetxpert.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pynetxpert.SwigPyIterator_equal(self, *args)
    def copy(self): return _pynetxpert.SwigPyIterator_copy(self)
    def next(self): return _pynetxpert.SwigPyIterator_next(self)
    def __next__(self): return _pynetxpert.SwigPyIterator___next__(self)
    def previous(self): return _pynetxpert.SwigPyIterator_previous(self)
    def advance(self, *args): return _pynetxpert.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pynetxpert.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pynetxpert.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pynetxpert.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pynetxpert.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pynetxpert.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pynetxpert.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pynetxpert.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class InputArcs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputArcs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputArcs, name)
    __repr__ = _swig_repr
    def iterator(self): return _pynetxpert.InputArcs_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pynetxpert.InputArcs___nonzero__(self)
    def __bool__(self): return _pynetxpert.InputArcs___bool__(self)
    def __len__(self): return _pynetxpert.InputArcs___len__(self)
    def pop(self): return _pynetxpert.InputArcs_pop(self)
    def __getslice__(self, *args): return _pynetxpert.InputArcs___getslice__(self, *args)
    def __setslice__(self, *args): return _pynetxpert.InputArcs___setslice__(self, *args)
    def __delslice__(self, *args): return _pynetxpert.InputArcs___delslice__(self, *args)
    def __delitem__(self, *args): return _pynetxpert.InputArcs___delitem__(self, *args)
    def __getitem__(self, *args): return _pynetxpert.InputArcs___getitem__(self, *args)
    def __setitem__(self, *args): return _pynetxpert.InputArcs___setitem__(self, *args)
    def append(self, *args): return _pynetxpert.InputArcs_append(self, *args)
    def empty(self): return _pynetxpert.InputArcs_empty(self)
    def size(self): return _pynetxpert.InputArcs_size(self)
    def clear(self): return _pynetxpert.InputArcs_clear(self)
    def swap(self, *args): return _pynetxpert.InputArcs_swap(self, *args)
    def get_allocator(self): return _pynetxpert.InputArcs_get_allocator(self)
    def begin(self): return _pynetxpert.InputArcs_begin(self)
    def end(self): return _pynetxpert.InputArcs_end(self)
    def rbegin(self): return _pynetxpert.InputArcs_rbegin(self)
    def rend(self): return _pynetxpert.InputArcs_rend(self)
    def pop_back(self): return _pynetxpert.InputArcs_pop_back(self)
    def erase(self, *args): return _pynetxpert.InputArcs_erase(self, *args)
    def __init__(self, *args): 
        this = _pynetxpert.new_InputArcs(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pynetxpert.InputArcs_push_back(self, *args)
    def front(self): return _pynetxpert.InputArcs_front(self)
    def back(self): return _pynetxpert.InputArcs_back(self)
    def assign(self, *args): return _pynetxpert.InputArcs_assign(self, *args)
    def resize(self, *args): return _pynetxpert.InputArcs_resize(self, *args)
    def insert(self, *args): return _pynetxpert.InputArcs_insert(self, *args)
    def reserve(self, *args): return _pynetxpert.InputArcs_reserve(self, *args)
    def capacity(self): return _pynetxpert.InputArcs_capacity(self)
    __swig_destroy__ = _pynetxpert.delete_InputArcs
    __del__ = lambda self : None;
InputArcs_swigregister = _pynetxpert.InputArcs_swigregister
InputArcs_swigregister(InputArcs)

class InputNodes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputNodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputNodes, name)
    __repr__ = _swig_repr
    def iterator(self): return _pynetxpert.InputNodes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pynetxpert.InputNodes___nonzero__(self)
    def __bool__(self): return _pynetxpert.InputNodes___bool__(self)
    def __len__(self): return _pynetxpert.InputNodes___len__(self)
    def pop(self): return _pynetxpert.InputNodes_pop(self)
    def __getslice__(self, *args): return _pynetxpert.InputNodes___getslice__(self, *args)
    def __setslice__(self, *args): return _pynetxpert.InputNodes___setslice__(self, *args)
    def __delslice__(self, *args): return _pynetxpert.InputNodes___delslice__(self, *args)
    def __delitem__(self, *args): return _pynetxpert.InputNodes___delitem__(self, *args)
    def __getitem__(self, *args): return _pynetxpert.InputNodes___getitem__(self, *args)
    def __setitem__(self, *args): return _pynetxpert.InputNodes___setitem__(self, *args)
    def append(self, *args): return _pynetxpert.InputNodes_append(self, *args)
    def empty(self): return _pynetxpert.InputNodes_empty(self)
    def size(self): return _pynetxpert.InputNodes_size(self)
    def clear(self): return _pynetxpert.InputNodes_clear(self)
    def swap(self, *args): return _pynetxpert.InputNodes_swap(self, *args)
    def get_allocator(self): return _pynetxpert.InputNodes_get_allocator(self)
    def begin(self): return _pynetxpert.InputNodes_begin(self)
    def end(self): return _pynetxpert.InputNodes_end(self)
    def rbegin(self): return _pynetxpert.InputNodes_rbegin(self)
    def rend(self): return _pynetxpert.InputNodes_rend(self)
    def pop_back(self): return _pynetxpert.InputNodes_pop_back(self)
    def erase(self, *args): return _pynetxpert.InputNodes_erase(self, *args)
    def __init__(self, *args): 
        this = _pynetxpert.new_InputNodes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pynetxpert.InputNodes_push_back(self, *args)
    def front(self): return _pynetxpert.InputNodes_front(self)
    def back(self): return _pynetxpert.InputNodes_back(self)
    def assign(self, *args): return _pynetxpert.InputNodes_assign(self, *args)
    def resize(self, *args): return _pynetxpert.InputNodes_resize(self, *args)
    def insert(self, *args): return _pynetxpert.InputNodes_insert(self, *args)
    def reserve(self, *args): return _pynetxpert.InputNodes_reserve(self, *args)
    def capacity(self): return _pynetxpert.InputNodes_capacity(self)
    __swig_destroy__ = _pynetxpert.delete_InputNodes
    __del__ = lambda self : None;
InputNodes_swigregister = _pynetxpert.InputNodes_swigregister
InputNodes_swigregister(InputNodes)

class NewNodes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewNodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NewNodes, name)
    __repr__ = _swig_repr
    def iterator(self): return _pynetxpert.NewNodes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pynetxpert.NewNodes___nonzero__(self)
    def __bool__(self): return _pynetxpert.NewNodes___bool__(self)
    def __len__(self): return _pynetxpert.NewNodes___len__(self)
    def pop(self): return _pynetxpert.NewNodes_pop(self)
    def __getslice__(self, *args): return _pynetxpert.NewNodes___getslice__(self, *args)
    def __setslice__(self, *args): return _pynetxpert.NewNodes___setslice__(self, *args)
    def __delslice__(self, *args): return _pynetxpert.NewNodes___delslice__(self, *args)
    def __delitem__(self, *args): return _pynetxpert.NewNodes___delitem__(self, *args)
    def __getitem__(self, *args): return _pynetxpert.NewNodes___getitem__(self, *args)
    def __setitem__(self, *args): return _pynetxpert.NewNodes___setitem__(self, *args)
    def append(self, *args): return _pynetxpert.NewNodes_append(self, *args)
    def empty(self): return _pynetxpert.NewNodes_empty(self)
    def size(self): return _pynetxpert.NewNodes_size(self)
    def clear(self): return _pynetxpert.NewNodes_clear(self)
    def swap(self, *args): return _pynetxpert.NewNodes_swap(self, *args)
    def get_allocator(self): return _pynetxpert.NewNodes_get_allocator(self)
    def begin(self): return _pynetxpert.NewNodes_begin(self)
    def end(self): return _pynetxpert.NewNodes_end(self)
    def rbegin(self): return _pynetxpert.NewNodes_rbegin(self)
    def rend(self): return _pynetxpert.NewNodes_rend(self)
    def pop_back(self): return _pynetxpert.NewNodes_pop_back(self)
    def erase(self, *args): return _pynetxpert.NewNodes_erase(self, *args)
    def __init__(self, *args): 
        this = _pynetxpert.new_NewNodes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pynetxpert.NewNodes_push_back(self, *args)
    def front(self): return _pynetxpert.NewNodes_front(self)
    def back(self): return _pynetxpert.NewNodes_back(self)
    def assign(self, *args): return _pynetxpert.NewNodes_assign(self, *args)
    def resize(self, *args): return _pynetxpert.NewNodes_resize(self, *args)
    def insert(self, *args): return _pynetxpert.NewNodes_insert(self, *args)
    def reserve(self, *args): return _pynetxpert.NewNodes_reserve(self, *args)
    def capacity(self): return _pynetxpert.NewNodes_capacity(self)
    __swig_destroy__ = _pynetxpert.delete_NewNodes
    __del__ = lambda self : None;
NewNodes_swigregister = _pynetxpert.NewNodes_swigregister
NewNodes_swigregister(NewNodes)

class ExtSPTArcs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtSPTArcs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtSPTArcs, name)
    __repr__ = _swig_repr
    def iterator(self): return _pynetxpert.ExtSPTArcs_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pynetxpert.ExtSPTArcs___nonzero__(self)
    def __bool__(self): return _pynetxpert.ExtSPTArcs___bool__(self)
    def __len__(self): return _pynetxpert.ExtSPTArcs___len__(self)
    def pop(self): return _pynetxpert.ExtSPTArcs_pop(self)
    def __getslice__(self, *args): return _pynetxpert.ExtSPTArcs___getslice__(self, *args)
    def __setslice__(self, *args): return _pynetxpert.ExtSPTArcs___setslice__(self, *args)
    def __delslice__(self, *args): return _pynetxpert.ExtSPTArcs___delslice__(self, *args)
    def __delitem__(self, *args): return _pynetxpert.ExtSPTArcs___delitem__(self, *args)
    def __getitem__(self, *args): return _pynetxpert.ExtSPTArcs___getitem__(self, *args)
    def __setitem__(self, *args): return _pynetxpert.ExtSPTArcs___setitem__(self, *args)
    def append(self, *args): return _pynetxpert.ExtSPTArcs_append(self, *args)
    def empty(self): return _pynetxpert.ExtSPTArcs_empty(self)
    def size(self): return _pynetxpert.ExtSPTArcs_size(self)
    def clear(self): return _pynetxpert.ExtSPTArcs_clear(self)
    def swap(self, *args): return _pynetxpert.ExtSPTArcs_swap(self, *args)
    def get_allocator(self): return _pynetxpert.ExtSPTArcs_get_allocator(self)
    def begin(self): return _pynetxpert.ExtSPTArcs_begin(self)
    def end(self): return _pynetxpert.ExtSPTArcs_end(self)
    def rbegin(self): return _pynetxpert.ExtSPTArcs_rbegin(self)
    def rend(self): return _pynetxpert.ExtSPTArcs_rend(self)
    def pop_back(self): return _pynetxpert.ExtSPTArcs_pop_back(self)
    def erase(self, *args): return _pynetxpert.ExtSPTArcs_erase(self, *args)
    def __init__(self, *args): 
        this = _pynetxpert.new_ExtSPTArcs(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pynetxpert.ExtSPTArcs_push_back(self, *args)
    def front(self): return _pynetxpert.ExtSPTArcs_front(self)
    def back(self): return _pynetxpert.ExtSPTArcs_back(self)
    def assign(self, *args): return _pynetxpert.ExtSPTArcs_assign(self, *args)
    def resize(self, *args): return _pynetxpert.ExtSPTArcs_resize(self, *args)
    def insert(self, *args): return _pynetxpert.ExtSPTArcs_insert(self, *args)
    def reserve(self, *args): return _pynetxpert.ExtSPTArcs_reserve(self, *args)
    def capacity(self): return _pynetxpert.ExtSPTArcs_capacity(self)
    __swig_destroy__ = _pynetxpert.delete_ExtSPTArcs
    __del__ = lambda self : None;
ExtSPTArcs_swigregister = _pynetxpert.ExtSPTArcs_swigregister
ExtSPTArcs_swigregister(ExtSPTArcs)

class ExtNodeSupplies(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtNodeSupplies, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtNodeSupplies, name)
    __repr__ = _swig_repr
    def iterator(self): return _pynetxpert.ExtNodeSupplies_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pynetxpert.ExtNodeSupplies___nonzero__(self)
    def __bool__(self): return _pynetxpert.ExtNodeSupplies___bool__(self)
    def __len__(self): return _pynetxpert.ExtNodeSupplies___len__(self)
    def pop(self): return _pynetxpert.ExtNodeSupplies_pop(self)
    def __getslice__(self, *args): return _pynetxpert.ExtNodeSupplies___getslice__(self, *args)
    def __setslice__(self, *args): return _pynetxpert.ExtNodeSupplies___setslice__(self, *args)
    def __delslice__(self, *args): return _pynetxpert.ExtNodeSupplies___delslice__(self, *args)
    def __delitem__(self, *args): return _pynetxpert.ExtNodeSupplies___delitem__(self, *args)
    def __getitem__(self, *args): return _pynetxpert.ExtNodeSupplies___getitem__(self, *args)
    def __setitem__(self, *args): return _pynetxpert.ExtNodeSupplies___setitem__(self, *args)
    def append(self, *args): return _pynetxpert.ExtNodeSupplies_append(self, *args)
    def empty(self): return _pynetxpert.ExtNodeSupplies_empty(self)
    def size(self): return _pynetxpert.ExtNodeSupplies_size(self)
    def clear(self): return _pynetxpert.ExtNodeSupplies_clear(self)
    def swap(self, *args): return _pynetxpert.ExtNodeSupplies_swap(self, *args)
    def get_allocator(self): return _pynetxpert.ExtNodeSupplies_get_allocator(self)
    def begin(self): return _pynetxpert.ExtNodeSupplies_begin(self)
    def end(self): return _pynetxpert.ExtNodeSupplies_end(self)
    def rbegin(self): return _pynetxpert.ExtNodeSupplies_rbegin(self)
    def rend(self): return _pynetxpert.ExtNodeSupplies_rend(self)
    def pop_back(self): return _pynetxpert.ExtNodeSupplies_pop_back(self)
    def erase(self, *args): return _pynetxpert.ExtNodeSupplies_erase(self, *args)
    def __init__(self, *args): 
        this = _pynetxpert.new_ExtNodeSupplies(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pynetxpert.ExtNodeSupplies_push_back(self, *args)
    def front(self): return _pynetxpert.ExtNodeSupplies_front(self)
    def back(self): return _pynetxpert.ExtNodeSupplies_back(self)
    def assign(self, *args): return _pynetxpert.ExtNodeSupplies_assign(self, *args)
    def resize(self, *args): return _pynetxpert.ExtNodeSupplies_resize(self, *args)
    def insert(self, *args): return _pynetxpert.ExtNodeSupplies_insert(self, *args)
    def reserve(self, *args): return _pynetxpert.ExtNodeSupplies_reserve(self, *args)
    def capacity(self): return _pynetxpert.ExtNodeSupplies_capacity(self)
    __swig_destroy__ = _pynetxpert.delete_ExtNodeSupplies
    __del__ = lambda self : None;
ExtNodeSupplies_swigregister = _pynetxpert.ExtNodeSupplies_swigregister
ExtNodeSupplies_swigregister(ExtNodeSupplies)

class ExtDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtDistribution, name)
    __repr__ = _swig_repr
    def iterator(self): return _pynetxpert.ExtDistribution_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pynetxpert.ExtDistribution___nonzero__(self)
    def __bool__(self): return _pynetxpert.ExtDistribution___bool__(self)
    def __len__(self): return _pynetxpert.ExtDistribution___len__(self)
    def pop(self): return _pynetxpert.ExtDistribution_pop(self)
    def __getslice__(self, *args): return _pynetxpert.ExtDistribution___getslice__(self, *args)
    def __setslice__(self, *args): return _pynetxpert.ExtDistribution___setslice__(self, *args)
    def __delslice__(self, *args): return _pynetxpert.ExtDistribution___delslice__(self, *args)
    def __delitem__(self, *args): return _pynetxpert.ExtDistribution___delitem__(self, *args)
    def __getitem__(self, *args): return _pynetxpert.ExtDistribution___getitem__(self, *args)
    def __setitem__(self, *args): return _pynetxpert.ExtDistribution___setitem__(self, *args)
    def append(self, *args): return _pynetxpert.ExtDistribution_append(self, *args)
    def empty(self): return _pynetxpert.ExtDistribution_empty(self)
    def size(self): return _pynetxpert.ExtDistribution_size(self)
    def clear(self): return _pynetxpert.ExtDistribution_clear(self)
    def swap(self, *args): return _pynetxpert.ExtDistribution_swap(self, *args)
    def get_allocator(self): return _pynetxpert.ExtDistribution_get_allocator(self)
    def begin(self): return _pynetxpert.ExtDistribution_begin(self)
    def end(self): return _pynetxpert.ExtDistribution_end(self)
    def rbegin(self): return _pynetxpert.ExtDistribution_rbegin(self)
    def rend(self): return _pynetxpert.ExtDistribution_rend(self)
    def pop_back(self): return _pynetxpert.ExtDistribution_pop_back(self)
    def erase(self, *args): return _pynetxpert.ExtDistribution_erase(self, *args)
    def __init__(self, *args): 
        this = _pynetxpert.new_ExtDistribution(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pynetxpert.ExtDistribution_push_back(self, *args)
    def front(self): return _pynetxpert.ExtDistribution_front(self)
    def back(self): return _pynetxpert.ExtDistribution_back(self)
    def assign(self, *args): return _pynetxpert.ExtDistribution_assign(self, *args)
    def resize(self, *args): return _pynetxpert.ExtDistribution_resize(self, *args)
    def insert(self, *args): return _pynetxpert.ExtDistribution_insert(self, *args)
    def reserve(self, *args): return _pynetxpert.ExtDistribution_reserve(self, *args)
    def capacity(self): return _pynetxpert.ExtDistribution_capacity(self)
    __swig_destroy__ = _pynetxpert.delete_ExtDistribution
    __del__ = lambda self : None;
ExtDistribution_swigregister = _pynetxpert.ExtDistribution_swigregister
ExtDistribution_swigregister(ExtDistribution)

class FlowCosts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowCosts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowCosts, name)
    __repr__ = _swig_repr
    def iterator(self): return _pynetxpert.FlowCosts_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pynetxpert.FlowCosts___nonzero__(self)
    def __bool__(self): return _pynetxpert.FlowCosts___bool__(self)
    def __len__(self): return _pynetxpert.FlowCosts___len__(self)
    def pop(self): return _pynetxpert.FlowCosts_pop(self)
    def __getslice__(self, *args): return _pynetxpert.FlowCosts___getslice__(self, *args)
    def __setslice__(self, *args): return _pynetxpert.FlowCosts___setslice__(self, *args)
    def __delslice__(self, *args): return _pynetxpert.FlowCosts___delslice__(self, *args)
    def __delitem__(self, *args): return _pynetxpert.FlowCosts___delitem__(self, *args)
    def __getitem__(self, *args): return _pynetxpert.FlowCosts___getitem__(self, *args)
    def __setitem__(self, *args): return _pynetxpert.FlowCosts___setitem__(self, *args)
    def append(self, *args): return _pynetxpert.FlowCosts_append(self, *args)
    def empty(self): return _pynetxpert.FlowCosts_empty(self)
    def size(self): return _pynetxpert.FlowCosts_size(self)
    def clear(self): return _pynetxpert.FlowCosts_clear(self)
    def swap(self, *args): return _pynetxpert.FlowCosts_swap(self, *args)
    def get_allocator(self): return _pynetxpert.FlowCosts_get_allocator(self)
    def begin(self): return _pynetxpert.FlowCosts_begin(self)
    def end(self): return _pynetxpert.FlowCosts_end(self)
    def rbegin(self): return _pynetxpert.FlowCosts_rbegin(self)
    def rend(self): return _pynetxpert.FlowCosts_rend(self)
    def pop_back(self): return _pynetxpert.FlowCosts_pop_back(self)
    def erase(self, *args): return _pynetxpert.FlowCosts_erase(self, *args)
    def __init__(self, *args): 
        this = _pynetxpert.new_FlowCosts(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pynetxpert.FlowCosts_push_back(self, *args)
    def front(self): return _pynetxpert.FlowCosts_front(self)
    def back(self): return _pynetxpert.FlowCosts_back(self)
    def assign(self, *args): return _pynetxpert.FlowCosts_assign(self, *args)
    def resize(self, *args): return _pynetxpert.FlowCosts_resize(self, *args)
    def insert(self, *args): return _pynetxpert.FlowCosts_insert(self, *args)
    def reserve(self, *args): return _pynetxpert.FlowCosts_reserve(self, *args)
    def capacity(self): return _pynetxpert.FlowCosts_capacity(self)
    __swig_destroy__ = _pynetxpert.delete_FlowCosts
    __del__ = lambda self : None;
FlowCosts_swigregister = _pynetxpert.FlowCosts_swigregister
FlowCosts_swigregister(FlowCosts)


def Version():
  return _pynetxpert.Version()
Version = _pynetxpert.Version
class ColumnMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColumnMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColumnMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arcIDColName"] = _pynetxpert.ColumnMap_arcIDColName_set
    __swig_getmethods__["arcIDColName"] = _pynetxpert.ColumnMap_arcIDColName_get
    if _newclass:arcIDColName = _swig_property(_pynetxpert.ColumnMap_arcIDColName_get, _pynetxpert.ColumnMap_arcIDColName_set)
    __swig_setmethods__["fromColName"] = _pynetxpert.ColumnMap_fromColName_set
    __swig_getmethods__["fromColName"] = _pynetxpert.ColumnMap_fromColName_get
    if _newclass:fromColName = _swig_property(_pynetxpert.ColumnMap_fromColName_get, _pynetxpert.ColumnMap_fromColName_set)
    __swig_setmethods__["toColName"] = _pynetxpert.ColumnMap_toColName_set
    __swig_getmethods__["toColName"] = _pynetxpert.ColumnMap_toColName_get
    if _newclass:toColName = _swig_property(_pynetxpert.ColumnMap_toColName_get, _pynetxpert.ColumnMap_toColName_set)
    __swig_setmethods__["costColName"] = _pynetxpert.ColumnMap_costColName_set
    __swig_getmethods__["costColName"] = _pynetxpert.ColumnMap_costColName_get
    if _newclass:costColName = _swig_property(_pynetxpert.ColumnMap_costColName_get, _pynetxpert.ColumnMap_costColName_set)
    __swig_setmethods__["capColName"] = _pynetxpert.ColumnMap_capColName_set
    __swig_getmethods__["capColName"] = _pynetxpert.ColumnMap_capColName_get
    if _newclass:capColName = _swig_property(_pynetxpert.ColumnMap_capColName_get, _pynetxpert.ColumnMap_capColName_set)
    __swig_setmethods__["onewayColName"] = _pynetxpert.ColumnMap_onewayColName_set
    __swig_getmethods__["onewayColName"] = _pynetxpert.ColumnMap_onewayColName_get
    if _newclass:onewayColName = _swig_property(_pynetxpert.ColumnMap_onewayColName_get, _pynetxpert.ColumnMap_onewayColName_set)
    __swig_setmethods__["nodeIDColName"] = _pynetxpert.ColumnMap_nodeIDColName_set
    __swig_getmethods__["nodeIDColName"] = _pynetxpert.ColumnMap_nodeIDColName_get
    if _newclass:nodeIDColName = _swig_property(_pynetxpert.ColumnMap_nodeIDColName_get, _pynetxpert.ColumnMap_nodeIDColName_set)
    __swig_setmethods__["supplyColName"] = _pynetxpert.ColumnMap_supplyColName_set
    __swig_getmethods__["supplyColName"] = _pynetxpert.ColumnMap_supplyColName_get
    if _newclass:supplyColName = _swig_property(_pynetxpert.ColumnMap_supplyColName_get, _pynetxpert.ColumnMap_supplyColName_set)
    def __init__(self): 
        this = _pynetxpert.new_ColumnMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ColumnMap
    __del__ = lambda self : None;
ColumnMap_swigregister = _pynetxpert.ColumnMap_swigregister
ColumnMap_swigregister(ColumnMap)

class InputNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extNodeID"] = _pynetxpert.InputNode_extNodeID_set
    __swig_getmethods__["extNodeID"] = _pynetxpert.InputNode_extNodeID_get
    if _newclass:extNodeID = _swig_property(_pynetxpert.InputNode_extNodeID_get, _pynetxpert.InputNode_extNodeID_set)
    __swig_setmethods__["nodeSupply"] = _pynetxpert.InputNode_nodeSupply_set
    __swig_getmethods__["nodeSupply"] = _pynetxpert.InputNode_nodeSupply_get
    if _newclass:nodeSupply = _swig_property(_pynetxpert.InputNode_nodeSupply_get, _pynetxpert.InputNode_nodeSupply_set)
    def __str__(self): return _pynetxpert.InputNode___str__(self)
    def __init__(self): 
        this = _pynetxpert.new_InputNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_InputNode
    __del__ = lambda self : None;
InputNode_swigregister = _pynetxpert.InputNode_swigregister
InputNode_swigregister(InputNode)

class InputArc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputArc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputArc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extArcID"] = _pynetxpert.InputArc_extArcID_set
    __swig_getmethods__["extArcID"] = _pynetxpert.InputArc_extArcID_get
    if _newclass:extArcID = _swig_property(_pynetxpert.InputArc_extArcID_get, _pynetxpert.InputArc_extArcID_set)
    __swig_setmethods__["extFromNode"] = _pynetxpert.InputArc_extFromNode_set
    __swig_getmethods__["extFromNode"] = _pynetxpert.InputArc_extFromNode_get
    if _newclass:extFromNode = _swig_property(_pynetxpert.InputArc_extFromNode_get, _pynetxpert.InputArc_extFromNode_set)
    __swig_setmethods__["extToNode"] = _pynetxpert.InputArc_extToNode_set
    __swig_getmethods__["extToNode"] = _pynetxpert.InputArc_extToNode_get
    if _newclass:extToNode = _swig_property(_pynetxpert.InputArc_extToNode_get, _pynetxpert.InputArc_extToNode_set)
    __swig_setmethods__["cost"] = _pynetxpert.InputArc_cost_set
    __swig_getmethods__["cost"] = _pynetxpert.InputArc_cost_get
    if _newclass:cost = _swig_property(_pynetxpert.InputArc_cost_get, _pynetxpert.InputArc_cost_set)
    __swig_setmethods__["capacity"] = _pynetxpert.InputArc_capacity_set
    __swig_getmethods__["capacity"] = _pynetxpert.InputArc_capacity_get
    if _newclass:capacity = _swig_property(_pynetxpert.InputArc_capacity_get, _pynetxpert.InputArc_capacity_set)
    __swig_setmethods__["oneway"] = _pynetxpert.InputArc_oneway_set
    __swig_getmethods__["oneway"] = _pynetxpert.InputArc_oneway_get
    if _newclass:oneway = _swig_property(_pynetxpert.InputArc_oneway_get, _pynetxpert.InputArc_oneway_set)
    def __str__(self): return _pynetxpert.InputArc___str__(self)
    def __init__(self): 
        this = _pynetxpert.new_InputArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_InputArc
    __del__ = lambda self : None;
InputArc_swigregister = _pynetxpert.InputArc_swigregister
InputArc_swigregister(InputArc)

class NewNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NewNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extNodeID"] = _pynetxpert.NewNode_extNodeID_set
    __swig_getmethods__["extNodeID"] = _pynetxpert.NewNode_extNodeID_get
    if _newclass:extNodeID = _swig_property(_pynetxpert.NewNode_extNodeID_get, _pynetxpert.NewNode_extNodeID_set)
    __swig_setmethods__["coord"] = _pynetxpert.NewNode_coord_set
    __swig_getmethods__["coord"] = _pynetxpert.NewNode_coord_get
    if _newclass:coord = _swig_property(_pynetxpert.NewNode_coord_get, _pynetxpert.NewNode_coord_set)
    __swig_setmethods__["supply"] = _pynetxpert.NewNode_supply_set
    __swig_getmethods__["supply"] = _pynetxpert.NewNode_supply_get
    if _newclass:supply = _swig_property(_pynetxpert.NewNode_supply_get, _pynetxpert.NewNode_supply_set)
    def __init__(self): 
        this = _pynetxpert.new_NewNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_NewNode
    __del__ = lambda self : None;
NewNode_swigregister = _pynetxpert.NewNode_swigregister
NewNode_swigregister(NewNode)

class ODPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _pynetxpert.ODPair_origin_set
    __swig_getmethods__["origin"] = _pynetxpert.ODPair_origin_get
    if _newclass:origin = _swig_property(_pynetxpert.ODPair_origin_get, _pynetxpert.ODPair_origin_set)
    __swig_setmethods__["dest"] = _pynetxpert.ODPair_dest_set
    __swig_getmethods__["dest"] = _pynetxpert.ODPair_dest_get
    if _newclass:dest = _swig_property(_pynetxpert.ODPair_dest_get, _pynetxpert.ODPair_dest_set)
    def __init__(self): 
        this = _pynetxpert.new_ODPair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ODPair
    __del__ = lambda self : None;
ODPair_swigregister = _pynetxpert.ODPair_swigregister
ODPair_swigregister(ODPair)

class InternalArc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalArc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InternalArc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fromNode"] = _pynetxpert.InternalArc_fromNode_set
    __swig_getmethods__["fromNode"] = _pynetxpert.InternalArc_fromNode_get
    if _newclass:fromNode = _swig_property(_pynetxpert.InternalArc_fromNode_get, _pynetxpert.InternalArc_fromNode_set)
    __swig_setmethods__["toNode"] = _pynetxpert.InternalArc_toNode_set
    __swig_getmethods__["toNode"] = _pynetxpert.InternalArc_toNode_get
    if _newclass:toNode = _swig_property(_pynetxpert.InternalArc_toNode_get, _pynetxpert.InternalArc_toNode_set)
    def __init__(self): 
        this = _pynetxpert.new_InternalArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_InternalArc
    __del__ = lambda self : None;
InternalArc_swigregister = _pynetxpert.InternalArc_swigregister
InternalArc_swigregister(InternalArc)

class FlowCost(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowCost, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlowCost, name)
    __repr__ = _swig_repr
    __swig_setmethods__["intArc"] = _pynetxpert.FlowCost_intArc_set
    __swig_getmethods__["intArc"] = _pynetxpert.FlowCost_intArc_get
    if _newclass:intArc = _swig_property(_pynetxpert.FlowCost_intArc_get, _pynetxpert.FlowCost_intArc_set)
    __swig_setmethods__["flow"] = _pynetxpert.FlowCost_flow_set
    __swig_getmethods__["flow"] = _pynetxpert.FlowCost_flow_get
    if _newclass:flow = _swig_property(_pynetxpert.FlowCost_flow_get, _pynetxpert.FlowCost_flow_set)
    __swig_setmethods__["cost"] = _pynetxpert.FlowCost_cost_set
    __swig_getmethods__["cost"] = _pynetxpert.FlowCost_cost_get
    if _newclass:cost = _swig_property(_pynetxpert.FlowCost_cost_get, _pynetxpert.FlowCost_cost_set)
    def __init__(self): 
        this = _pynetxpert.new_FlowCost()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_FlowCost
    __del__ = lambda self : None;
FlowCost_swigregister = _pynetxpert.FlowCost_swigregister
FlowCost_swigregister(FlowCost)

class NetworkBuilderResultArc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkBuilderResultArc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkBuilderResultArc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extArcID"] = _pynetxpert.NetworkBuilderResultArc_extArcID_set
    __swig_getmethods__["extArcID"] = _pynetxpert.NetworkBuilderResultArc_extArcID_get
    if _newclass:extArcID = _swig_property(_pynetxpert.NetworkBuilderResultArc_extArcID_get, _pynetxpert.NetworkBuilderResultArc_extArcID_set)
    __swig_setmethods__["fromNode"] = _pynetxpert.NetworkBuilderResultArc_fromNode_set
    __swig_getmethods__["fromNode"] = _pynetxpert.NetworkBuilderResultArc_fromNode_get
    if _newclass:fromNode = _swig_property(_pynetxpert.NetworkBuilderResultArc_fromNode_get, _pynetxpert.NetworkBuilderResultArc_fromNode_set)
    __swig_setmethods__["toNode"] = _pynetxpert.NetworkBuilderResultArc_toNode_set
    __swig_getmethods__["toNode"] = _pynetxpert.NetworkBuilderResultArc_toNode_get
    if _newclass:toNode = _swig_property(_pynetxpert.NetworkBuilderResultArc_toNode_get, _pynetxpert.NetworkBuilderResultArc_toNode_set)
    __swig_setmethods__["cost"] = _pynetxpert.NetworkBuilderResultArc_cost_set
    __swig_getmethods__["cost"] = _pynetxpert.NetworkBuilderResultArc_cost_get
    if _newclass:cost = _swig_property(_pynetxpert.NetworkBuilderResultArc_cost_get, _pynetxpert.NetworkBuilderResultArc_cost_set)
    __swig_setmethods__["capacity"] = _pynetxpert.NetworkBuilderResultArc_capacity_set
    __swig_getmethods__["capacity"] = _pynetxpert.NetworkBuilderResultArc_capacity_get
    if _newclass:capacity = _swig_property(_pynetxpert.NetworkBuilderResultArc_capacity_get, _pynetxpert.NetworkBuilderResultArc_capacity_set)
    __swig_setmethods__["oneway"] = _pynetxpert.NetworkBuilderResultArc_oneway_set
    __swig_getmethods__["oneway"] = _pynetxpert.NetworkBuilderResultArc_oneway_get
    if _newclass:oneway = _swig_property(_pynetxpert.NetworkBuilderResultArc_oneway_get, _pynetxpert.NetworkBuilderResultArc_oneway_set)
    __swig_setmethods__["geom"] = _pynetxpert.NetworkBuilderResultArc_geom_set
    __swig_getmethods__["geom"] = _pynetxpert.NetworkBuilderResultArc_geom_get
    if _newclass:geom = _swig_property(_pynetxpert.NetworkBuilderResultArc_geom_get, _pynetxpert.NetworkBuilderResultArc_geom_set)
    def __init__(self): 
        this = _pynetxpert.new_NetworkBuilderResultArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_NetworkBuilderResultArc
    __del__ = lambda self : None;
NetworkBuilderResultArc_swigregister = _pynetxpert.NetworkBuilderResultArc_swigregister
NetworkBuilderResultArc_swigregister(NetworkBuilderResultArc)

class ExtNodeSupply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtNodeSupply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtNodeSupply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extNodeID"] = _pynetxpert.ExtNodeSupply_extNodeID_set
    __swig_getmethods__["extNodeID"] = _pynetxpert.ExtNodeSupply_extNodeID_get
    if _newclass:extNodeID = _swig_property(_pynetxpert.ExtNodeSupply_extNodeID_get, _pynetxpert.ExtNodeSupply_extNodeID_set)
    __swig_setmethods__["supply"] = _pynetxpert.ExtNodeSupply_supply_set
    __swig_getmethods__["supply"] = _pynetxpert.ExtNodeSupply_supply_get
    if _newclass:supply = _swig_property(_pynetxpert.ExtNodeSupply_supply_get, _pynetxpert.ExtNodeSupply_supply_set)
    def __init__(self): 
        this = _pynetxpert.new_ExtNodeSupply()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ExtNodeSupply
    __del__ = lambda self : None;
ExtNodeSupply_swigregister = _pynetxpert.ExtNodeSupply_swigregister
ExtNodeSupply_swigregister(ExtNodeSupply)

class ExternalArc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalArc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalArc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extFromNode"] = _pynetxpert.ExternalArc_extFromNode_set
    __swig_getmethods__["extFromNode"] = _pynetxpert.ExternalArc_extFromNode_get
    if _newclass:extFromNode = _swig_property(_pynetxpert.ExternalArc_extFromNode_get, _pynetxpert.ExternalArc_extFromNode_set)
    __swig_setmethods__["extToNode"] = _pynetxpert.ExternalArc_extToNode_set
    __swig_getmethods__["extToNode"] = _pynetxpert.ExternalArc_extToNode_get
    if _newclass:extToNode = _swig_property(_pynetxpert.ExternalArc_extToNode_get, _pynetxpert.ExternalArc_extToNode_set)
    def __init__(self): 
        this = _pynetxpert.new_ExternalArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ExternalArc
    __del__ = lambda self : None;
ExternalArc_swigregister = _pynetxpert.ExternalArc_swigregister
ExternalArc_swigregister(ExternalArc)

class ExtSPTreeArc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtSPTreeArc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtSPTreeArc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extArcID"] = _pynetxpert.ExtSPTreeArc_extArcID_set
    __swig_getmethods__["extArcID"] = _pynetxpert.ExtSPTreeArc_extArcID_get
    if _newclass:extArcID = _swig_property(_pynetxpert.ExtSPTreeArc_extArcID_get, _pynetxpert.ExtSPTreeArc_extArcID_set)
    __swig_setmethods__["extArc"] = _pynetxpert.ExtSPTreeArc_extArc_set
    __swig_getmethods__["extArc"] = _pynetxpert.ExtSPTreeArc_extArc_get
    if _newclass:extArc = _swig_property(_pynetxpert.ExtSPTreeArc_extArc_get, _pynetxpert.ExtSPTreeArc_extArc_set)
    __swig_setmethods__["cost"] = _pynetxpert.ExtSPTreeArc_cost_set
    __swig_getmethods__["cost"] = _pynetxpert.ExtSPTreeArc_cost_get
    if _newclass:cost = _swig_property(_pynetxpert.ExtSPTreeArc_cost_get, _pynetxpert.ExtSPTreeArc_cost_set)
    def __init__(self): 
        this = _pynetxpert.new_ExtSPTreeArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ExtSPTreeArc
    __del__ = lambda self : None;
ExtSPTreeArc_swigregister = _pynetxpert.ExtSPTreeArc_swigregister
ExtSPTreeArc_swigregister(ExtSPTreeArc)

class ExtTransportationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtTransportationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtTransportationData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["odm"] = _pynetxpert.ExtTransportationData_odm_set
    __swig_getmethods__["odm"] = _pynetxpert.ExtTransportationData_odm_get
    if _newclass:odm = _swig_property(_pynetxpert.ExtTransportationData_odm_get, _pynetxpert.ExtTransportationData_odm_set)
    __swig_setmethods__["supply"] = _pynetxpert.ExtTransportationData_supply_set
    __swig_getmethods__["supply"] = _pynetxpert.ExtTransportationData_supply_get
    if _newclass:supply = _swig_property(_pynetxpert.ExtTransportationData_supply_get, _pynetxpert.ExtTransportationData_supply_set)
    def __init__(self): 
        this = _pynetxpert.new_ExtTransportationData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ExtTransportationData
    __del__ = lambda self : None;
ExtTransportationData_swigregister = _pynetxpert.ExtTransportationData_swigregister
ExtTransportationData_swigregister(ExtTransportationData)

class ExtDistributionArc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtDistributionArc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtDistributionArc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arcid"] = _pynetxpert.ExtDistributionArc_arcid_set
    __swig_getmethods__["arcid"] = _pynetxpert.ExtDistributionArc_arcid_get
    if _newclass:arcid = _swig_property(_pynetxpert.ExtDistributionArc_arcid_get, _pynetxpert.ExtDistributionArc_arcid_set)
    __swig_setmethods__["extArc"] = _pynetxpert.ExtDistributionArc_extArc_set
    __swig_getmethods__["extArc"] = _pynetxpert.ExtDistributionArc_extArc_get
    if _newclass:extArc = _swig_property(_pynetxpert.ExtDistributionArc_extArc_get, _pynetxpert.ExtDistributionArc_extArc_set)
    __swig_setmethods__["cost"] = _pynetxpert.ExtDistributionArc_cost_set
    __swig_getmethods__["cost"] = _pynetxpert.ExtDistributionArc_cost_get
    if _newclass:cost = _swig_property(_pynetxpert.ExtDistributionArc_cost_get, _pynetxpert.ExtDistributionArc_cost_set)
    __swig_setmethods__["flow"] = _pynetxpert.ExtDistributionArc_flow_set
    __swig_getmethods__["flow"] = _pynetxpert.ExtDistributionArc_flow_get
    if _newclass:flow = _swig_property(_pynetxpert.ExtDistributionArc_flow_get, _pynetxpert.ExtDistributionArc_flow_set)
    def __init__(self): 
        this = _pynetxpert.new_ExtDistributionArc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ExtDistributionArc
    __del__ = lambda self : None;
ExtDistributionArc_swigregister = _pynetxpert.ExtDistributionArc_swigregister
ExtDistributionArc_swigregister(ExtDistributionArc)

NoGeometry = _pynetxpert.NoGeometry
StraightLines = _pynetxpert.StraightLines
RealGeometry = _pynetxpert.RealGeometry
TestNetworkBuilder = _pynetxpert.TestNetworkBuilder
ShortestPathTreeCOM = _pynetxpert.ShortestPathTreeCOM
ODMatrixCOM = _pynetxpert.ODMatrixCOM
TransportationCOM = _pynetxpert.TransportationCOM
MSTCOM = _pynetxpert.MSTCOM
IsolinesCOM = _pynetxpert.IsolinesCOM
DumpInternalArcsToDB = _pynetxpert.DumpInternalArcsToDB
NetworkConvert = _pynetxpert.NetworkConvert
TestFileGDBWriter = _pynetxpert.TestFileGDBWriter
TestSpatiaLiteWriter = _pynetxpert.TestSpatiaLiteWriter
TestAddNodes = _pynetxpert.TestAddNodes
TestCreateRouteGeometries = _pynetxpert.TestCreateRouteGeometries
MCFCOM = _pynetxpert.MCFCOM
TransportationCOMExt = _pynetxpert.TransportationCOMExt
SpatiaLiteDB = _pynetxpert.SpatiaLiteDB
ESRI_FileGDB = _pynetxpert.ESRI_FileGDB
LogAll = _pynetxpert.LogAll
LogDebug = _pynetxpert.LogDebug
LogInfo = _pynetxpert.LogInfo
LogWarning = _pynetxpert.LogWarning
LogError = _pynetxpert.LogError
LogFatal = _pynetxpert.LogFatal
Dijkstra_MCFClass = _pynetxpert.Dijkstra_MCFClass
LQueue_MCFClass = _pynetxpert.LQueue_MCFClass
LDeque_MCFClass = _pynetxpert.LDeque_MCFClass
Dijkstra_Heap_MCFClass = _pynetxpert.Dijkstra_Heap_MCFClass
Dijkstra_2Heap_LEMON = _pynetxpert.Dijkstra_2Heap_LEMON
NetworkSimplex_MCF = _pynetxpert.NetworkSimplex_MCF
NetworkSimplex_LEMON = _pynetxpert.NetworkSimplex_LEMON
Kruskal_LEMON = _pynetxpert.Kruskal_LEMON
MCFUnSolved = _pynetxpert.MCFUnSolved
MCFOK = _pynetxpert.MCFOK
MCFStopped = _pynetxpert.MCFStopped
MCFUnfeasible = _pynetxpert.MCFUnfeasible
MCFUnbounded = _pynetxpert.MCFUnbounded
MCFError = _pynetxpert.MCFError
MCFUndefined = _pynetxpert.MCFUndefined
MCFBalanced = _pynetxpert.MCFBalanced
MCFExtrasupply = _pynetxpert.MCFExtrasupply
MCFExtrademand = _pynetxpert.MCFExtrademand
class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["NetXDBPath"] = _pynetxpert.Config_NetXDBPath_set
    __swig_getmethods__["NetXDBPath"] = _pynetxpert.Config_NetXDBPath_get
    if _newclass:NetXDBPath = _swig_property(_pynetxpert.Config_NetXDBPath_get, _pynetxpert.Config_NetXDBPath_set)
    __swig_setmethods__["ResultDBPath"] = _pynetxpert.Config_ResultDBPath_set
    __swig_getmethods__["ResultDBPath"] = _pynetxpert.Config_ResultDBPath_get
    if _newclass:ResultDBPath = _swig_property(_pynetxpert.Config_ResultDBPath_get, _pynetxpert.Config_ResultDBPath_set)
    __swig_setmethods__["ResultDBType"] = _pynetxpert.Config_ResultDBType_set
    __swig_getmethods__["ResultDBType"] = _pynetxpert.Config_ResultDBType_get
    if _newclass:ResultDBType = _swig_property(_pynetxpert.Config_ResultDBType_get, _pynetxpert.Config_ResultDBType_set)
    __swig_setmethods__["ResultTableName"] = _pynetxpert.Config_ResultTableName_set
    __swig_getmethods__["ResultTableName"] = _pynetxpert.Config_ResultTableName_get
    if _newclass:ResultTableName = _swig_property(_pynetxpert.Config_ResultTableName_get, _pynetxpert.Config_ResultTableName_set)
    __swig_setmethods__["SPTAllDests"] = _pynetxpert.Config_SPTAllDests_set
    __swig_getmethods__["SPTAllDests"] = _pynetxpert.Config_SPTAllDests_get
    if _newclass:SPTAllDests = _swig_property(_pynetxpert.Config_SPTAllDests_get, _pynetxpert.Config_SPTAllDests_set)
    __swig_setmethods__["SPTHeapCard"] = _pynetxpert.Config_SPTHeapCard_set
    __swig_getmethods__["SPTHeapCard"] = _pynetxpert.Config_SPTHeapCard_get
    if _newclass:SPTHeapCard = _swig_property(_pynetxpert.Config_SPTHeapCard_get, _pynetxpert.Config_SPTHeapCard_set)
    __swig_setmethods__["SptAlgorithm"] = _pynetxpert.Config_SptAlgorithm_set
    __swig_getmethods__["SptAlgorithm"] = _pynetxpert.Config_SptAlgorithm_get
    if _newclass:SptAlgorithm = _swig_property(_pynetxpert.Config_SptAlgorithm_get, _pynetxpert.Config_SptAlgorithm_set)
    __swig_setmethods__["McfAlgorithm"] = _pynetxpert.Config_McfAlgorithm_set
    __swig_getmethods__["McfAlgorithm"] = _pynetxpert.Config_McfAlgorithm_get
    if _newclass:McfAlgorithm = _swig_property(_pynetxpert.Config_McfAlgorithm_get, _pynetxpert.Config_McfAlgorithm_set)
    __swig_setmethods__["MstAlgorithm"] = _pynetxpert.Config_MstAlgorithm_set
    __swig_getmethods__["MstAlgorithm"] = _pynetxpert.Config_MstAlgorithm_get
    if _newclass:MstAlgorithm = _swig_property(_pynetxpert.Config_MstAlgorithm_get, _pynetxpert.Config_MstAlgorithm_set)
    __swig_setmethods__["IsDirected"] = _pynetxpert.Config_IsDirected_set
    __swig_getmethods__["IsDirected"] = _pynetxpert.Config_IsDirected_get
    if _newclass:IsDirected = _swig_property(_pynetxpert.Config_IsDirected_get, _pynetxpert.Config_IsDirected_set)
    __swig_setmethods__["ArcsTableName"] = _pynetxpert.Config_ArcsTableName_set
    __swig_getmethods__["ArcsTableName"] = _pynetxpert.Config_ArcsTableName_get
    if _newclass:ArcsTableName = _swig_property(_pynetxpert.Config_ArcsTableName_get, _pynetxpert.Config_ArcsTableName_set)
    __swig_setmethods__["ArcsGeomColumnName"] = _pynetxpert.Config_ArcsGeomColumnName_set
    __swig_getmethods__["ArcsGeomColumnName"] = _pynetxpert.Config_ArcsGeomColumnName_get
    if _newclass:ArcsGeomColumnName = _swig_property(_pynetxpert.Config_ArcsGeomColumnName_get, _pynetxpert.Config_ArcsGeomColumnName_set)
    __swig_setmethods__["ArcIDColumnName"] = _pynetxpert.Config_ArcIDColumnName_set
    __swig_getmethods__["ArcIDColumnName"] = _pynetxpert.Config_ArcIDColumnName_get
    if _newclass:ArcIDColumnName = _swig_property(_pynetxpert.Config_ArcIDColumnName_get, _pynetxpert.Config_ArcIDColumnName_set)
    __swig_setmethods__["FromNodeColumnName"] = _pynetxpert.Config_FromNodeColumnName_set
    __swig_getmethods__["FromNodeColumnName"] = _pynetxpert.Config_FromNodeColumnName_get
    if _newclass:FromNodeColumnName = _swig_property(_pynetxpert.Config_FromNodeColumnName_get, _pynetxpert.Config_FromNodeColumnName_set)
    __swig_setmethods__["ToNodeColumnName"] = _pynetxpert.Config_ToNodeColumnName_set
    __swig_getmethods__["ToNodeColumnName"] = _pynetxpert.Config_ToNodeColumnName_get
    if _newclass:ToNodeColumnName = _swig_property(_pynetxpert.Config_ToNodeColumnName_get, _pynetxpert.Config_ToNodeColumnName_set)
    __swig_setmethods__["CostColumnName"] = _pynetxpert.Config_CostColumnName_set
    __swig_getmethods__["CostColumnName"] = _pynetxpert.Config_CostColumnName_get
    if _newclass:CostColumnName = _swig_property(_pynetxpert.Config_CostColumnName_get, _pynetxpert.Config_CostColumnName_set)
    __swig_setmethods__["CapColumnName"] = _pynetxpert.Config_CapColumnName_set
    __swig_getmethods__["CapColumnName"] = _pynetxpert.Config_CapColumnName_get
    if _newclass:CapColumnName = _swig_property(_pynetxpert.Config_CapColumnName_get, _pynetxpert.Config_CapColumnName_set)
    __swig_setmethods__["NodesTableName"] = _pynetxpert.Config_NodesTableName_set
    __swig_getmethods__["NodesTableName"] = _pynetxpert.Config_NodesTableName_get
    if _newclass:NodesTableName = _swig_property(_pynetxpert.Config_NodesTableName_get, _pynetxpert.Config_NodesTableName_set)
    __swig_setmethods__["NodesGeomColumnName"] = _pynetxpert.Config_NodesGeomColumnName_set
    __swig_getmethods__["NodesGeomColumnName"] = _pynetxpert.Config_NodesGeomColumnName_get
    if _newclass:NodesGeomColumnName = _swig_property(_pynetxpert.Config_NodesGeomColumnName_get, _pynetxpert.Config_NodesGeomColumnName_set)
    __swig_setmethods__["NodeIDColumnName"] = _pynetxpert.Config_NodeIDColumnName_set
    __swig_getmethods__["NodeIDColumnName"] = _pynetxpert.Config_NodeIDColumnName_get
    if _newclass:NodeIDColumnName = _swig_property(_pynetxpert.Config_NodeIDColumnName_get, _pynetxpert.Config_NodeIDColumnName_set)
    __swig_setmethods__["NodeSupplyColumnName"] = _pynetxpert.Config_NodeSupplyColumnName_set
    __swig_getmethods__["NodeSupplyColumnName"] = _pynetxpert.Config_NodeSupplyColumnName_get
    if _newclass:NodeSupplyColumnName = _swig_property(_pynetxpert.Config_NodeSupplyColumnName_get, _pynetxpert.Config_NodeSupplyColumnName_set)
    __swig_setmethods__["BarrierPolyTableName"] = _pynetxpert.Config_BarrierPolyTableName_set
    __swig_getmethods__["BarrierPolyTableName"] = _pynetxpert.Config_BarrierPolyTableName_get
    if _newclass:BarrierPolyTableName = _swig_property(_pynetxpert.Config_BarrierPolyTableName_get, _pynetxpert.Config_BarrierPolyTableName_set)
    __swig_setmethods__["BarrierPolyGeomColumnName"] = _pynetxpert.Config_BarrierPolyGeomColumnName_set
    __swig_getmethods__["BarrierPolyGeomColumnName"] = _pynetxpert.Config_BarrierPolyGeomColumnName_get
    if _newclass:BarrierPolyGeomColumnName = _swig_property(_pynetxpert.Config_BarrierPolyGeomColumnName_get, _pynetxpert.Config_BarrierPolyGeomColumnName_set)
    __swig_setmethods__["BarrierLineTableName"] = _pynetxpert.Config_BarrierLineTableName_set
    __swig_getmethods__["BarrierLineTableName"] = _pynetxpert.Config_BarrierLineTableName_get
    if _newclass:BarrierLineTableName = _swig_property(_pynetxpert.Config_BarrierLineTableName_get, _pynetxpert.Config_BarrierLineTableName_set)
    __swig_setmethods__["BarrierLineGeomColumnName"] = _pynetxpert.Config_BarrierLineGeomColumnName_set
    __swig_getmethods__["BarrierLineGeomColumnName"] = _pynetxpert.Config_BarrierLineGeomColumnName_get
    if _newclass:BarrierLineGeomColumnName = _swig_property(_pynetxpert.Config_BarrierLineGeomColumnName_get, _pynetxpert.Config_BarrierLineGeomColumnName_set)
    __swig_setmethods__["BarrierPointTableName"] = _pynetxpert.Config_BarrierPointTableName_set
    __swig_getmethods__["BarrierPointTableName"] = _pynetxpert.Config_BarrierPointTableName_get
    if _newclass:BarrierPointTableName = _swig_property(_pynetxpert.Config_BarrierPointTableName_get, _pynetxpert.Config_BarrierPointTableName_set)
    __swig_setmethods__["BarrierPointGeomColumnName"] = _pynetxpert.Config_BarrierPointGeomColumnName_set
    __swig_getmethods__["BarrierPointGeomColumnName"] = _pynetxpert.Config_BarrierPointGeomColumnName_get
    if _newclass:BarrierPointGeomColumnName = _swig_property(_pynetxpert.Config_BarrierPointGeomColumnName_get, _pynetxpert.Config_BarrierPointGeomColumnName_set)
    __swig_setmethods__["Treshold"] = _pynetxpert.Config_Treshold_set
    __swig_getmethods__["Treshold"] = _pynetxpert.Config_Treshold_get
    if _newclass:Treshold = _swig_property(_pynetxpert.Config_Treshold_get, _pynetxpert.Config_Treshold_set)
    __swig_setmethods__["UseSpatialIndex"] = _pynetxpert.Config_UseSpatialIndex_set
    __swig_getmethods__["UseSpatialIndex"] = _pynetxpert.Config_UseSpatialIndex_get
    if _newclass:UseSpatialIndex = _swig_property(_pynetxpert.Config_UseSpatialIndex_get, _pynetxpert.Config_UseSpatialIndex_set)
    __swig_setmethods__["LoadDBIntoMemory"] = _pynetxpert.Config_LoadDBIntoMemory_set
    __swig_getmethods__["LoadDBIntoMemory"] = _pynetxpert.Config_LoadDBIntoMemory_get
    if _newclass:LoadDBIntoMemory = _swig_property(_pynetxpert.Config_LoadDBIntoMemory_get, _pynetxpert.Config_LoadDBIntoMemory_set)
    __swig_setmethods__["NumberOfTests"] = _pynetxpert.Config_NumberOfTests_set
    __swig_getmethods__["NumberOfTests"] = _pynetxpert.Config_NumberOfTests_get
    if _newclass:NumberOfTests = _swig_property(_pynetxpert.Config_NumberOfTests_get, _pynetxpert.Config_NumberOfTests_set)
    __swig_setmethods__["SpatiaLiteHome"] = _pynetxpert.Config_SpatiaLiteHome_set
    __swig_getmethods__["SpatiaLiteHome"] = _pynetxpert.Config_SpatiaLiteHome_get
    if _newclass:SpatiaLiteHome = _swig_property(_pynetxpert.Config_SpatiaLiteHome_get, _pynetxpert.Config_SpatiaLiteHome_set)
    __swig_setmethods__["SpatiaLiteCoreName"] = _pynetxpert.Config_SpatiaLiteCoreName_set
    __swig_getmethods__["SpatiaLiteCoreName"] = _pynetxpert.Config_SpatiaLiteCoreName_get
    if _newclass:SpatiaLiteCoreName = _swig_property(_pynetxpert.Config_SpatiaLiteCoreName_get, _pynetxpert.Config_SpatiaLiteCoreName_set)
    __swig_setmethods__["GeometryHandling"] = _pynetxpert.Config_GeometryHandling_set
    __swig_getmethods__["GeometryHandling"] = _pynetxpert.Config_GeometryHandling_get
    if _newclass:GeometryHandling = _swig_property(_pynetxpert.Config_GeometryHandling_get, _pynetxpert.Config_GeometryHandling_set)
    __swig_setmethods__["OnewayColumnName"] = _pynetxpert.Config_OnewayColumnName_set
    __swig_getmethods__["OnewayColumnName"] = _pynetxpert.Config_OnewayColumnName_get
    if _newclass:OnewayColumnName = _swig_property(_pynetxpert.Config_OnewayColumnName_get, _pynetxpert.Config_OnewayColumnName_set)
    __swig_setmethods__["TestCase"] = _pynetxpert.Config_TestCase_set
    __swig_getmethods__["TestCase"] = _pynetxpert.Config_TestCase_get
    if _newclass:TestCase = _swig_property(_pynetxpert.Config_TestCase_get, _pynetxpert.Config_TestCase_set)
    __swig_setmethods__["CleanNetwork"] = _pynetxpert.Config_CleanNetwork_set
    __swig_getmethods__["CleanNetwork"] = _pynetxpert.Config_CleanNetwork_get
    if _newclass:CleanNetwork = _swig_property(_pynetxpert.Config_CleanNetwork_get, _pynetxpert.Config_CleanNetwork_set)
    __swig_setmethods__["LogLevel"] = _pynetxpert.Config_LogLevel_set
    __swig_getmethods__["LogLevel"] = _pynetxpert.Config_LogLevel_get
    if _newclass:LogLevel = _swig_property(_pynetxpert.Config_LogLevel_get, _pynetxpert.Config_LogLevel_set)
    __swig_setmethods__["LogFileFullPath"] = _pynetxpert.Config_LogFileFullPath_set
    __swig_getmethods__["LogFileFullPath"] = _pynetxpert.Config_LogFileFullPath_get
    if _newclass:LogFileFullPath = _swig_property(_pynetxpert.Config_LogFileFullPath_get, _pynetxpert.Config_LogFileFullPath_set)
    def __init__(self): 
        this = _pynetxpert.new_Config()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_Config
    __del__ = lambda self : None;
Config_swigregister = _pynetxpert.Config_swigregister
Config_swigregister(Config)

class Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Network, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    def ConvertInputNetwork(self, *args): return _pynetxpert.Network_ConvertInputNetwork(self, *args)
    def LoadStartNodes(self, *args): return _pynetxpert.Network_LoadStartNodes(self, *args)
    def LoadEndNodes(self, *args): return _pynetxpert.Network_LoadEndNodes(self, *args)
    def GetOriginalNodeID(self, *args): return _pynetxpert.Network_GetOriginalNodeID(self, *args)
    def GetOriginalStartOrEndNodeID(self, *args): return _pynetxpert.Network_GetOriginalStartOrEndNodeID(self, *args)
    __swig_destroy__ = _pynetxpert.delete_Network
    __del__ = lambda self : None;
Network_swigregister = _pynetxpert.Network_swigregister
Network_swigregister(Network)

class LOGGER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LOGGER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LOGGER, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynetxpert.delete_LOGGER
    __del__ = lambda self : None;
    __swig_getmethods__["Initialize"] = lambda x: _pynetxpert.LOGGER_Initialize
    if _newclass:Initialize = staticmethod(_pynetxpert.LOGGER_Initialize)
    __swig_setmethods__["IsInitialized"] = _pynetxpert.LOGGER_IsInitialized_set
    __swig_getmethods__["IsInitialized"] = _pynetxpert.LOGGER_IsInitialized_get
    if _newclass:IsInitialized = _swig_property(_pynetxpert.LOGGER_IsInitialized_get, _pynetxpert.LOGGER_IsInitialized_set)
LOGGER_swigregister = _pynetxpert.LOGGER_swigregister
LOGGER_swigregister(LOGGER)

def LOGGER_Initialize(*args):
  return _pynetxpert.LOGGER_Initialize(*args)
LOGGER_Initialize = _pynetxpert.LOGGER_Initialize
cvar = _pynetxpert.cvar

class DBHELPER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DBHELPER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DBHELPER, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Initialize"] = lambda x: _pynetxpert.DBHELPER_Initialize
    if _newclass:Initialize = staticmethod(_pynetxpert.DBHELPER_Initialize)
    __swig_setmethods__["IsInitialized"] = _pynetxpert.DBHELPER_IsInitialized_set
    __swig_getmethods__["IsInitialized"] = _pynetxpert.DBHELPER_IsInitialized_get
    if _newclass:IsInitialized = _swig_property(_pynetxpert.DBHELPER_IsInitialized_get, _pynetxpert.DBHELPER_IsInitialized_set)
    __swig_getmethods__["CommitCurrentTransaction"] = lambda x: _pynetxpert.DBHELPER_CommitCurrentTransaction
    if _newclass:CommitCurrentTransaction = staticmethod(_pynetxpert.DBHELPER_CommitCurrentTransaction)
    __swig_getmethods__["OpenNewTransaction"] = lambda x: _pynetxpert.DBHELPER_OpenNewTransaction
    if _newclass:OpenNewTransaction = staticmethod(_pynetxpert.DBHELPER_OpenNewTransaction)
    __swig_getmethods__["LoadNetworkFromDB"] = lambda x: _pynetxpert.DBHELPER_LoadNetworkFromDB
    if _newclass:LoadNetworkFromDB = staticmethod(_pynetxpert.DBHELPER_LoadNetworkFromDB)
    __swig_getmethods__["LoadNodesFromDB"] = lambda x: _pynetxpert.DBHELPER_LoadNodesFromDB
    if _newclass:LoadNodesFromDB = staticmethod(_pynetxpert.DBHELPER_LoadNodesFromDB)
    __swig_getmethods__["CloseConnection"] = lambda x: _pynetxpert.DBHELPER_CloseConnection
    if _newclass:CloseConnection = staticmethod(_pynetxpert.DBHELPER_CloseConnection)
    __swig_destroy__ = _pynetxpert.delete_DBHELPER
    __del__ = lambda self : None;
DBHELPER_swigregister = _pynetxpert.DBHELPER_swigregister
DBHELPER_swigregister(DBHELPER)

def DBHELPER_Initialize(*args):
  return _pynetxpert.DBHELPER_Initialize(*args)
DBHELPER_Initialize = _pynetxpert.DBHELPER_Initialize

def DBHELPER_CommitCurrentTransaction():
  return _pynetxpert.DBHELPER_CommitCurrentTransaction()
DBHELPER_CommitCurrentTransaction = _pynetxpert.DBHELPER_CommitCurrentTransaction

def DBHELPER_OpenNewTransaction():
  return _pynetxpert.DBHELPER_OpenNewTransaction()
DBHELPER_OpenNewTransaction = _pynetxpert.DBHELPER_OpenNewTransaction

def DBHELPER_LoadNetworkFromDB(*args):
  return _pynetxpert.DBHELPER_LoadNetworkFromDB(*args)
DBHELPER_LoadNetworkFromDB = _pynetxpert.DBHELPER_LoadNetworkFromDB

def DBHELPER_LoadNodesFromDB(*args):
  return _pynetxpert.DBHELPER_LoadNodesFromDB(*args)
DBHELPER_LoadNodesFromDB = _pynetxpert.DBHELPER_LoadNodesFromDB

def DBHELPER_CloseConnection():
  return _pynetxpert.DBHELPER_CloseConnection()
DBHELPER_CloseConnection = _pynetxpert.DBHELPER_CloseConnection

class ISolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynetxpert.delete_ISolver
    __del__ = lambda self : None;
    def Solve(self, *args): return _pynetxpert.ISolver_Solve(self, *args)
ISolver_swigregister = _pynetxpert.ISolver_swigregister
ISolver_swigregister(ISolver)

class MinimumSpanningTree(ISolver):
    __swig_setmethods__ = {}
    for _s in [ISolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimumSpanningTree, name, value)
    __swig_getmethods__ = {}
    for _s in [ISolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinimumSpanningTree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_MinimumSpanningTree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_MinimumSpanningTree
    __del__ = lambda self : None;
    def Solve(self, *args): return _pynetxpert.MinimumSpanningTree_Solve(self, *args)
    def GetAlgorithm(self): return _pynetxpert.MinimumSpanningTree_GetAlgorithm(self)
    def SetAlgorithm(self, *args): return _pynetxpert.MinimumSpanningTree_SetAlgorithm(self, *args)
    def GetOptimum(self): return _pynetxpert.MinimumSpanningTree_GetOptimum(self)
    def GetMinimumSpanningTree(self): return _pynetxpert.MinimumSpanningTree_GetMinimumSpanningTree(self)
MinimumSpanningTree_swigregister = _pynetxpert.MinimumSpanningTree_swigregister
MinimumSpanningTree_swigregister(MinimumSpanningTree)

class OriginDestinationMatrix(ISolver):
    __swig_setmethods__ = {}
    for _s in [ISolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginDestinationMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [ISolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginDestinationMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_OriginDestinationMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_OriginDestinationMatrix
    __del__ = lambda self : None;
    def Solve(self, *args): return _pynetxpert.OriginDestinationMatrix_Solve(self, *args)
    def GetAlgorithm(self): return _pynetxpert.OriginDestinationMatrix_GetAlgorithm(self)
    def SetAlgorithm(self, *args): return _pynetxpert.OriginDestinationMatrix_SetAlgorithm(self, *args)
    def GetSPTHeapCard(self): return _pynetxpert.OriginDestinationMatrix_GetSPTHeapCard(self)
    def SetSPTHeapCard(self, *args): return _pynetxpert.OriginDestinationMatrix_SetSPTHeapCard(self, *args)
    def GetGeometryHandling(self): return _pynetxpert.OriginDestinationMatrix_GetGeometryHandling(self)
    def SetGeometryHandling(self, *args): return _pynetxpert.OriginDestinationMatrix_SetGeometryHandling(self, *args)
    def GetOrigins(self): return _pynetxpert.OriginDestinationMatrix_GetOrigins(self)
    def SetOrigins(self, *args): return _pynetxpert.OriginDestinationMatrix_SetOrigins(self, *args)
    def GetDestinations(self): return _pynetxpert.OriginDestinationMatrix_GetDestinations(self)
    def SetDestinations(self, *args): return _pynetxpert.OriginDestinationMatrix_SetDestinations(self, *args)
    def GetReachedDests(self): return _pynetxpert.OriginDestinationMatrix_GetReachedDests(self)
    def GetShortestPaths(self): return _pynetxpert.OriginDestinationMatrix_GetShortestPaths(self)
    def GetODMatrix(self): return _pynetxpert.OriginDestinationMatrix_GetODMatrix(self)
    def GetOptimum(self): return _pynetxpert.OriginDestinationMatrix_GetOptimum(self)
    def UncompressRoute(self, *args): return _pynetxpert.OriginDestinationMatrix_UncompressRoute(self, *args)
OriginDestinationMatrix_swigregister = _pynetxpert.OriginDestinationMatrix_swigregister
OriginDestinationMatrix_swigregister(OriginDestinationMatrix)

class ShortestPathTree(ISolver):
    __swig_setmethods__ = {}
    for _s in [ISolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortestPathTree, name, value)
    __swig_getmethods__ = {}
    for _s in [ISolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortestPathTree, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_ShortestPathTree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_ShortestPathTree
    __del__ = lambda self : None;
    def Solve(self, *args): return _pynetxpert.ShortestPathTree_Solve(self, *args)
    def GetAlgorithm(self): return _pynetxpert.ShortestPathTree_GetAlgorithm(self)
    def SetAlgorithm(self, *args): return _pynetxpert.ShortestPathTree_SetAlgorithm(self, *args)
    def GetSPTHeapCard(self): return _pynetxpert.ShortestPathTree_GetSPTHeapCard(self)
    def SetSPTHeapCard(self, *args): return _pynetxpert.ShortestPathTree_SetSPTHeapCard(self, *args)
    def GetGeometryHandling(self): return _pynetxpert.ShortestPathTree_GetGeometryHandling(self)
    def SetGeometryHandling(self, *args): return _pynetxpert.ShortestPathTree_SetGeometryHandling(self, *args)
    def GetOrigin(self): return _pynetxpert.ShortestPathTree_GetOrigin(self)
    def SetOrigin(self, *args): return _pynetxpert.ShortestPathTree_SetOrigin(self, *args)
    def GetDestinations(self): return _pynetxpert.ShortestPathTree_GetDestinations(self)
    def SetDestinations(self, *args): return _pynetxpert.ShortestPathTree_SetDestinations(self, *args)
    def GetReachedDests(self): return _pynetxpert.ShortestPathTree_GetReachedDests(self)
    def GetShortestPaths(self): return _pynetxpert.ShortestPathTree_GetShortestPaths(self)
    def GetOptimum(self): return _pynetxpert.ShortestPathTree_GetOptimum(self)
    def UncompressRoute(self, *args): return _pynetxpert.ShortestPathTree_UncompressRoute(self, *args)
ShortestPathTree_swigregister = _pynetxpert.ShortestPathTree_swigregister
ShortestPathTree_swigregister(ShortestPathTree)

class MinCostFlow(ISolver):
    __swig_setmethods__ = {}
    for _s in [ISolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinCostFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [ISolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinCostFlow, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pynetxpert.delete_MinCostFlow
    __del__ = lambda self : None;
    def Solve(self, *args): return _pynetxpert.MinCostFlow_Solve(self, *args)
    __swig_setmethods__["IsDirected"] = _pynetxpert.MinCostFlow_IsDirected_set
    __swig_getmethods__["IsDirected"] = _pynetxpert.MinCostFlow_IsDirected_get
    if _newclass:IsDirected = _swig_property(_pynetxpert.MinCostFlow_IsDirected_get, _pynetxpert.MinCostFlow_IsDirected_set)
    def GetMinCostFlow(self): return _pynetxpert.MinCostFlow_GetMinCostFlow(self)
    def GetAlgorithm(self): return _pynetxpert.MinCostFlow_GetAlgorithm(self)
    def SetAlgorithm(self, *args): return _pynetxpert.MinCostFlow_SetAlgorithm(self, *args)
    def GetOptimum(self): return _pynetxpert.MinCostFlow_GetOptimum(self)
MinCostFlow_swigregister = _pynetxpert.MinCostFlow_swigregister
MinCostFlow_swigregister(MinCostFlow)

class Transportation(MinCostFlow):
    __swig_setmethods__ = {}
    for _s in [MinCostFlow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transportation, name, value)
    __swig_getmethods__ = {}
    for _s in [MinCostFlow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Transportation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_Transportation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_Transportation
    __del__ = lambda self : None;
    def GetOrigins(self): return _pynetxpert.Transportation_GetOrigins(self)
    def SetOrigins(self, *args): return _pynetxpert.Transportation_SetOrigins(self, *args)
    def GetDestinations(self): return _pynetxpert.Transportation_GetDestinations(self)
    def SetDestinations(self, *args): return _pynetxpert.Transportation_SetDestinations(self, *args)
    def SetExtODMatrix(self, *args): return _pynetxpert.Transportation_SetExtODMatrix(self, *args)
    def SetExtNodeSupply(self, *args): return _pynetxpert.Transportation_SetExtNodeSupply(self, *args)
    def GetExtDistribution(self): return _pynetxpert.Transportation_GetExtDistribution(self)
    def GetJSONExtDistribution(self): return _pynetxpert.Transportation_GetJSONExtDistribution(self)
    def GetSolverJSONResult(self): return _pynetxpert.Transportation_GetSolverJSONResult(self)
    def UncompressRoute(self, *args): return _pynetxpert.Transportation_UncompressRoute(self, *args)
    def Solve(self): return _pynetxpert.Transportation_Solve(self)
Transportation_swigregister = _pynetxpert.Transportation_swigregister
Transportation_swigregister(Transportation)

class NetworkBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkBuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_NetworkBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_NetworkBuilder
    __del__ = lambda self : None;
    def LoadData(self): return _pynetxpert.NetworkBuilder_LoadData(self)
    def GetBuiltNetwork(self): return _pynetxpert.NetworkBuilder_GetBuiltNetwork(self)
NetworkBuilder_swigregister = _pynetxpert.NetworkBuilder_swigregister
NetworkBuilder_swigregister(NetworkBuilder)

class ShortestPathTreeSimple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortestPathTreeSimple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortestPathTreeSimple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_ShortestPathTreeSimple(*args)
        try: self.this.append(this)
        except: self.this = this
    def Solve(self): return _pynetxpert.ShortestPathTreeSimple_Solve(self)
    def GetOptimum(self): return _pynetxpert.ShortestPathTreeSimple_GetOptimum(self)
    __swig_destroy__ = _pynetxpert.delete_ShortestPathTreeSimple
    __del__ = lambda self : None;
ShortestPathTreeSimple_swigregister = _pynetxpert.ShortestPathTreeSimple_swigregister
ShortestPathTreeSimple_swigregister(ShortestPathTreeSimple)

class OriginDestinationMatrixSimple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginDestinationMatrixSimple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OriginDestinationMatrixSimple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_OriginDestinationMatrixSimple(*args)
        try: self.this.append(this)
        except: self.this = this
    def Solve(self): return _pynetxpert.OriginDestinationMatrixSimple_Solve(self)
    def GetOptimum(self): return _pynetxpert.OriginDestinationMatrixSimple_GetOptimum(self)
    __swig_destroy__ = _pynetxpert.delete_OriginDestinationMatrixSimple
    __del__ = lambda self : None;
OriginDestinationMatrixSimple_swigregister = _pynetxpert.OriginDestinationMatrixSimple_swigregister
OriginDestinationMatrixSimple_swigregister(OriginDestinationMatrixSimple)

class MinimumSpanningTreeSimple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimumSpanningTreeSimple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimumSpanningTreeSimple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_MinimumSpanningTreeSimple(*args)
        try: self.this.append(this)
        except: self.this = this
    def Solve(self): return _pynetxpert.MinimumSpanningTreeSimple_Solve(self)
    def GetOptimum(self): return _pynetxpert.MinimumSpanningTreeSimple_GetOptimum(self)
    __swig_destroy__ = _pynetxpert.delete_MinimumSpanningTreeSimple
    __del__ = lambda self : None;
MinimumSpanningTreeSimple_swigregister = _pynetxpert.MinimumSpanningTreeSimple_swigregister
MinimumSpanningTreeSimple_swigregister(MinimumSpanningTreeSimple)

class TransportationSimple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransportationSimple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransportationSimple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_TransportationSimple(*args)
        try: self.this.append(this)
        except: self.this = this
    def Solve(self): return _pynetxpert.TransportationSimple_Solve(self)
    def GetOptimum(self): return _pynetxpert.TransportationSimple_GetOptimum(self)
    def GetDistributionAsJSON(self): return _pynetxpert.TransportationSimple_GetDistributionAsJSON(self)
    __swig_destroy__ = _pynetxpert.delete_TransportationSimple
    __del__ = lambda self : None;
TransportationSimple_swigregister = _pynetxpert.TransportationSimple_swigregister
TransportationSimple_swigregister(TransportationSimple)

class MinimumCostFlowSimple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimumCostFlowSimple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimumCostFlowSimple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_MinimumCostFlowSimple(*args)
        try: self.this.append(this)
        except: self.this = this
    def Solve(self): return _pynetxpert.MinimumCostFlowSimple_Solve(self)
    def GetOptimum(self): return _pynetxpert.MinimumCostFlowSimple_GetOptimum(self)
    def GetMinimumCostFlowAsJSON(self): return _pynetxpert.MinimumCostFlowSimple_GetMinimumCostFlowAsJSON(self)
    __swig_destroy__ = _pynetxpert.delete_MinimumCostFlowSimple
    __del__ = lambda self : None;
MinimumCostFlowSimple_swigregister = _pynetxpert.MinimumCostFlowSimple_swigregister
MinimumCostFlowSimple_swigregister(MinimumCostFlowSimple)

class NetworkBuilderSimple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkBuilderSimple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkBuilderSimple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynetxpert.new_NetworkBuilderSimple(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynetxpert.delete_NetworkBuilderSimple
    __del__ = lambda self : None;
    def Build(self): return _pynetxpert.NetworkBuilderSimple_Build(self)
    def GetBuiltNetworkAsJSON(self): return _pynetxpert.NetworkBuilderSimple_GetBuiltNetworkAsJSON(self)
NetworkBuilderSimple_swigregister = _pynetxpert.NetworkBuilderSimple_swigregister
NetworkBuilderSimple_swigregister(NetworkBuilderSimple)

# This file is compatible with both classic and new-style classes.


